/* The following code was generated by JFlex 1.6.1 */

package compiler.generated;
import java_cup.*;
import java_cup.runtime.*;
import compiler.core.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./specs/lexical.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\5\1\4\1\105\1\41\1\3\16\2\4\0\1\5\1\30"+
    "\1\23\1\0\1\1\1\31\1\32\1\44\1\37\1\40\1\24\1\25"+
    "\1\101\1\22\1\20\1\45\1\6\1\14\2\13\4\15\2\7\1\36"+
    "\1\100\1\102\1\33\1\103\1\34\1\0\3\12\1\17\1\21\1\16"+
    "\5\1\1\10\13\1\1\11\2\1\1\26\1\43\1\27\1\35\1\1"+
    "\1\0\1\46\1\47\1\53\1\65\1\56\1\66\1\72\1\62\1\63"+
    "\1\1\1\60\1\55\1\70\1\57\1\54\1\71\1\1\1\52\1\50"+
    "\1\51\1\64\1\73\1\74\1\67\1\61\1\75\1\76\1\42\1\77"+
    "\1\104\6\2\1\106\32\2\2\0\1\1\1\1\2\1\4\0\1\1"+
    "\2\0\1\2\2\0\1\0\4\0\1\1\4\0\1\1\5\0\2\1"+
    "\1\1\24\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0\5\1"+
    "\7\0\1\1\1\0\1\1\21\0\160\2\5\1\1\0\2\1\2\0"+
    "\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0"+
    "\123\1\1\0\213\1\1\0\5\2\2\0\236\1\11\0\46\1\2\0"+
    "\1\1\7\0\47\1\7\0\1\1\1\0\55\2\1\0\1\2\1\0"+
    "\2\2\1\0\2\2\1\0\1\2\10\0\33\1\5\0\3\1\15\0"+
    "\5\2\6\0\1\1\4\0\13\2\5\0\53\1\37\2\4\0\2\1"+
    "\1\2\143\1\1\0\1\1\10\2\1\0\6\2\2\1\2\2\1\0"+
    "\4\2\2\1\12\2\3\1\2\0\1\1\17\0\1\2\1\1\1\2"+
    "\36\1\33\2\2\0\131\1\13\2\1\1\16\0\12\2\41\1\11\2"+
    "\2\1\4\0\1\1\5\0\26\1\4\2\1\1\11\2\1\1\3\2"+
    "\1\1\5\2\22\0\31\1\3\2\104\0\1\1\1\0\13\1\67\0"+
    "\33\2\1\0\4\2\66\1\3\2\1\1\22\2\1\1\7\2\12\1"+
    "\2\2\2\0\12\2\1\0\7\1\1\0\7\1\1\0\3\2\1\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0"+
    "\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\1\1"+
    "\10\0\1\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2\4\1"+
    "\7\0\1\1\5\0\3\2\1\0\6\1\4\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\2"+
    "\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\1"+
    "\1\0\1\1\7\0\14\2\3\1\1\2\13\0\3\2\1\0\11\1"+
    "\1\0\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1"+
    "\2\0\1\2\1\1\10\2\1\0\3\2\1\0\3\2\2\0\1\1"+
    "\17\0\2\1\2\2\2\0\12\2\1\0\1\1\17\0\3\2\1\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\10\0"+
    "\2\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2\1\0\1\1"+
    "\20\0\1\2\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1\1\6\0"+
    "\1\2\16\0\12\2\11\0\1\1\7\0\3\2\1\0\10\1\1\0"+
    "\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\7\2"+
    "\1\0\3\2\1\0\4\2\7\0\2\2\1\0\2\1\6\0\2\1"+
    "\2\2\2\0\12\2\22\0\2\2\1\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\2\0\1\2\1\1\7\2\1\0"+
    "\3\2\1\0\4\2\7\0\2\2\7\0\1\1\1\0\2\1\2\2"+
    "\2\0\12\2\1\0\2\1\17\0\2\2\1\0\10\1\1\0\3\1"+
    "\1\0\51\1\2\0\1\1\7\2\1\0\3\2\1\0\4\2\1\1"+
    "\10\0\1\2\10\0\2\1\2\2\2\0\12\2\12\0\6\1\2\0"+
    "\2\2\1\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\3\0\1\2\4\0\6\2\1\0\1\2\1\0\10\2\22\0"+
    "\2\2\15\0\60\1\1\2\2\1\7\2\4\0\10\1\10\2\1\0"+
    "\12\2\47\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0"+
    "\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\2\0\2\1\1\0\4\1\1\2\2\1\6\2\1\0\2\2"+
    "\1\1\2\0\5\1\1\0\1\1\1\0\6\2\2\0\12\2\2\0"+
    "\4\1\40\0\1\1\27\0\2\2\6\0\12\2\13\0\1\2\1\0"+
    "\1\2\1\0\1\2\4\0\2\2\10\1\1\0\44\1\4\0\24\2"+
    "\1\0\2\2\5\1\13\2\1\0\44\2\11\0\1\2\71\0\53\1"+
    "\24\2\1\1\12\2\6\0\6\1\4\2\4\1\3\2\1\1\3\2"+
    "\2\1\7\2\3\1\4\2\15\1\14\2\1\1\17\2\2\0\46\1"+
    "\1\0\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1"+
    "\2\0\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1"+
    "\2\0\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1"+
    "\2\0\17\1\1\0\71\1\1\0\4\1\2\0\103\1\2\0\3\2"+
    "\40\0\20\1\20\0\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1"+
    "\5\0\113\1\3\0\3\1\17\0\15\1\1\0\4\1\3\2\13\0"+
    "\22\1\3\2\13\0\22\1\2\2\14\0\15\1\1\0\3\1\1\0"+
    "\2\2\14\0\64\1\40\2\3\0\1\1\3\0\2\1\1\2\2\0"+
    "\12\2\41\0\3\2\2\0\12\2\6\0\130\1\10\0\51\1\1\2"+
    "\1\1\5\0\106\1\12\0\35\1\3\0\14\2\4\0\14\2\12\0"+
    "\12\2\36\1\2\0\5\1\13\0\54\1\4\0\21\2\7\1\2\2"+
    "\6\0\12\2\46\0\27\1\5\2\4\0\65\1\12\2\1\0\35\2"+
    "\2\0\13\2\6\0\12\2\15\0\1\1\130\0\5\2\57\1\21\2"+
    "\7\1\4\0\12\2\21\0\11\2\14\0\3\2\36\1\15\2\2\1"+
    "\12\2\54\1\16\2\14\0\44\1\24\2\10\0\12\2\3\0\3\1"+
    "\12\2\44\1\122\0\3\2\1\0\25\2\4\1\1\2\4\1\3\2"+
    "\2\1\11\0\300\1\47\2\25\0\4\2\u0116\1\2\0\6\1\2\0"+
    "\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0"+
    "\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0"+
    "\3\1\1\0\7\1\16\0\5\2\30\0\1\105\1\105\5\2\20\0"+
    "\2\1\23\0\1\1\13\0\5\2\5\0\6\2\1\0\1\1\15\0"+
    "\1\1\20\0\15\1\3\0\33\1\25\0\15\2\4\0\1\2\3\0"+
    "\14\2\21\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0"+
    "\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0"+
    "\13\1\2\0\4\1\5\0\5\1\4\0\1\1\21\0\51\1\u0a77\0"+
    "\57\1\1\0\57\1\1\0\205\1\6\0\4\1\3\2\2\1\14\0"+
    "\46\1\1\0\1\1\5\0\1\1\2\0\70\1\7\0\1\1\17\0"+
    "\1\2\27\1\11\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1"+
    "\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\40\2"+
    "\57\0\1\1\u01d5\0\3\1\31\0\11\1\6\2\1\0\5\1\2\0"+
    "\5\1\4\0\126\1\2\0\2\2\2\0\3\1\1\0\132\1\1\0"+
    "\4\1\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0"+
    "\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0"+
    "\20\1\12\2\2\1\24\0\57\1\1\2\4\0\12\2\1\0\31\1"+
    "\7\0\1\2\120\1\2\2\45\0\11\1\2\0\147\1\2\0\4\1"+
    "\1\0\4\1\14\0\13\1\115\0\12\1\1\2\3\1\1\2\4\1"+
    "\1\2\27\1\5\2\20\0\1\1\7\0\64\1\14\0\2\2\62\1"+
    "\21\2\13\0\12\2\6\0\22\2\6\1\3\0\1\1\4\0\12\2"+
    "\34\1\10\2\2\0\27\1\15\2\14\0\35\1\3\0\4\2\57\1"+
    "\16\2\16\0\1\1\12\2\46\0\51\1\16\2\11\0\3\1\1\2"+
    "\10\1\2\2\2\0\12\2\6\0\27\1\3\0\1\1\1\2\4\0"+
    "\60\1\1\2\1\1\3\2\2\1\2\2\5\1\2\2\1\1\1\2"+
    "\1\1\30\0\3\1\2\0\13\1\5\2\2\0\3\1\2\2\12\0"+
    "\6\1\2\0\6\1\2\0\6\1\11\0\7\1\1\0\7\1\221\0"+
    "\43\1\10\2\1\0\2\2\2\0\12\2\6\0\u2ba4\1\14\0\27\1"+
    "\4\0\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1"+
    "\5\0\1\1\1\2\12\1\1\0\15\1\1\0\5\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1"+
    "\2\0\66\1\50\0\15\1\3\0\20\2\20\0\7\2\14\0\2\1"+
    "\30\0\3\1\31\0\1\1\6\0\5\1\1\0\207\1\2\0\1\2"+
    "\4\0\1\1\13\0\12\2\7\0\32\1\4\0\1\1\1\0\32\1"+
    "\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1"+
    "\3\0\2\1\3\0\2\1\22\0\3\2\4\0\14\1\1\0\32\1"+
    "\1\0\23\1\1\0\2\1\1\0\17\1\2\0\16\1\42\0\173\1"+
    "\105\0\65\1\210\0\1\2\202\0\35\1\3\0\61\1\57\0\37\1"+
    "\21\0\33\1\65\0\36\1\2\0\44\1\4\0\10\1\1\0\5\1"+
    "\52\0\236\1\2\0\12\2\u0356\0\6\1\2\0\1\1\1\0\54\1"+
    "\1\0\2\1\3\0\1\1\2\0\27\1\252\0\26\1\12\0\32\1"+
    "\106\0\70\1\6\0\2\1\100\0\1\1\3\2\1\0\2\2\5\0"+
    "\4\2\4\1\1\0\3\1\1\0\33\1\4\0\3\2\4\0\1\2"+
    "\40\0\35\1\203\0\66\1\12\0\26\1\12\0\23\1\215\0\111\1"+
    "\u03b7\0\3\2\65\1\17\2\37\0\12\2\20\0\3\2\55\1\13\2"+
    "\2\0\1\2\22\0\31\1\7\0\12\2\6\0\3\2\44\1\16\2"+
    "\1\0\12\2\100\0\3\2\60\1\16\2\4\1\13\0\12\2\u04a6\0"+
    "\53\1\15\2\10\0\12\2\u0936\0\u036f\1\221\0\143\1\u0b9d\0\u042f\1"+
    "\u33d1\0\u0239\1\u04c7\0\105\1\13\0\1\1\56\2\20\0\4\2\15\1"+
    "\u4060\0\2\1\u2163\0\5\2\3\0\26\2\2\0\7\2\36\0\4\2"+
    "\224\0\3\2\u01bb\0\125\1\1\0\107\1\1\0\2\1\2\0\1\1"+
    "\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1"+
    "\1\0\101\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\34\1"+
    "\1\0\4\1\1\0\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1"+
    "\2\0\31\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1"+
    "\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1"+
    "\1\0\10\1\2\0\62\2\u1600\0\4\1\1\0\33\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1"+
    "\1\0\12\1\1\0\21\1\5\0\3\1\1\0\5\1\1\0\21\1"+
    "\u1144\0\ua6d7\1\51\0\u1035\1\13\0\336\1\u3fe2\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\2\36\0\140\2\200\0\360\2\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\17\2\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\40\1\41\2\1\2\42\1\1\1\43\1\0"+
    "\1\44\1\0\3\43\1\45\1\46\2\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\0\1\64\27\2\1\65\1\2"+
    "\1\66\12\2\1\67\1\70\1\71\1\72\1\73\2\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\12\73\1\106\2\107\2\43\2\0\1\110\1\0"+
    "\12\2\1\111\15\2\1\112\2\2\1\113\4\2\1\114"+
    "\10\2\1\115\1\116\1\117\1\74\1\0\1\120\1\0"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\107\2\43\1\0\3\2\1\132\6\2\1\133"+
    "\2\2\1\134\1\2\1\135\3\2\1\136\1\137\1\140"+
    "\2\2\1\141\15\2\1\142\1\2\1\107\2\43\1\143"+
    "\1\2\1\144\3\2\1\145\1\146\2\2\1\147\2\2"+
    "\1\150\1\2\1\151\10\2\1\152\1\153\1\154\4\2"+
    "\1\155\1\107\2\43\2\2\1\156\1\2\1\157\2\2"+
    "\1\160\2\2\1\161\2\2\1\162\1\2\1\163\5\2"+
    "\1\164\1\107\2\43\1\2\1\165\4\2\1\166\3\2"+
    "\1\167\1\170\1\171\1\2\1\172\1\107\2\43\1\173"+
    "\3\2\1\174\4\2\1\107\2\43\1\2\1\175\2\2"+
    "\1\176\1\2\1\177\1\107\2\43\1\2\1\200\1\201"+
    "\1\202\1\0\2\43\1\2\1\0\2\43\1\203\1\0"+
    "\2\43\1\0\2\43\1\0\2\43\1\0\2\43\1\0"+
    "\1\43\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\325\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\325\0\u02c6\0\u030d\0\325\0\325"+
    "\0\u0354\0\u039b\0\u03e2\0\u0429\0\325\0\u0470\0\325\0\325"+
    "\0\325\0\u04b7\0\325\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852"+
    "\0\u0899\0\u08e0\0\u0927\0\325\0\325\0\325\0\325\0\u096e"+
    "\0\u09b5\0\325\0\u09fc\0\u0a43\0\325\0\325\0\u0a8a\0\u0ad1"+
    "\0\u0b18\0\325\0\u0b5f\0\u0ba6\0\u0bed\0\325\0\u0c34\0\u0c7b"+
    "\0\u0cc2\0\u0d09\0\325\0\325\0\u0d50\0\u0d97\0\325\0\325"+
    "\0\325\0\325\0\325\0\325\0\325\0\325\0\325\0\325"+
    "\0\325\0\325\0\u0dde\0\u0e25\0\325\0\u0e6c\0\u0eb3\0\u0efa"+
    "\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u011c\0\u14cd\0\u1514\0\u155b"+
    "\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793"+
    "\0\u17da\0\325\0\u1821\0\325\0\u1868\0\325\0\u18af\0\u18f6"+
    "\0\325\0\325\0\325\0\325\0\325\0\325\0\325\0\325"+
    "\0\325\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7"+
    "\0\u1b2e\0\u1b75\0\u1bbc\0\325\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8"+
    "\0\u1d1f\0\u1d66\0\325\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u011c\0\u20ba"+
    "\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2"+
    "\0\u2339\0\u2380\0\u23c7\0\u240e\0\u011c\0\u2455\0\u249c\0\u24e3"+
    "\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u011c\0\u2646\0\u268d\0\u26d4"+
    "\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\325\0\325\0\325"+
    "\0\325\0\u1984\0\325\0\u287e\0\325\0\325\0\325\0\325"+
    "\0\325\0\325\0\325\0\325\0\325\0\u28c5\0\u290c\0\u2953"+
    "\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u011c\0\u2ab6\0\u2afd\0\u2b44"+
    "\0\u2b8b\0\u2bd2\0\u2c19\0\u011c\0\u2c60\0\u2ca7\0\u011c\0\u2cee"+
    "\0\u011c\0\u2d35\0\u2d7c\0\u2dc3\0\u011c\0\u011c\0\u011c\0\u2e0a"+
    "\0\u2e51\0\u011c\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb"+
    "\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u011c"+
    "\0\u3233\0\u327a\0\u32c1\0\u3308\0\325\0\u334f\0\u011c\0\u3396"+
    "\0\u33dd\0\u3424\0\u011c\0\u011c\0\u346b\0\u34b2\0\u011c\0\u34f9"+
    "\0\u3540\0\u011c\0\u3587\0\u011c\0\u35ce\0\u3615\0\u365c\0\u36a3"+
    "\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u011c\0\u011c\0\u3806\0\u384d"+
    "\0\u3894\0\u38db\0\u3922\0\u011c\0\u3969\0\u39b0\0\u39f7\0\u3a3e"+
    "\0\u3a85\0\u011c\0\u3acc\0\u011c\0\u3b13\0\u3b5a\0\u011c\0\u3ba1"+
    "\0\u3be8\0\u011c\0\u3c2f\0\u3c76\0\u011c\0\u3cbd\0\u011c\0\u3d04"+
    "\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u011c\0\u3e67\0\u3eae\0\u3ef5"+
    "\0\u3f3c\0\u011c\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u011c\0\u409f"+
    "\0\u40e6\0\u412d\0\u011c\0\u011c\0\u011c\0\u4174\0\u011c\0\u41bb"+
    "\0\u4202\0\u4249\0\u011c\0\u4290\0\u42d7\0\u431e\0\u011c\0\u4365"+
    "\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u011c"+
    "\0\u459d\0\u45e4\0\u011c\0\u462b\0\u011c\0\u4672\0\u46b9\0\u4700"+
    "\0\u4747\0\u011c\0\u011c\0\u011c\0\u478e\0\u47d5\0\u481c\0\u4863"+
    "\0\u48aa\0\u48f1\0\u4938\0\u011c\0\u497f\0\u49c6\0\u4a0d\0\u4a54"+
    "\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c"+
    "\0\u4cd3\0\u4d1a\0\u4d1a\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u4e7d"+
    "\0\u4ec4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\2\7\1\10\1\11\3\5"+
    "\3\11\2\5\1\12\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\7\1\32\1\4\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\5\1\43"+
    "\1\44\1\45\3\5\1\46\1\5\1\47\1\50\2\5"+
    "\1\51\1\5\1\52\1\53\1\5\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\2\4\3\63\1\64\1\65"+
    "\16\63\1\66\17\63\1\67\43\63\3\70\1\71\1\72"+
    "\36\70\1\73\1\4\42\70\110\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\30\5\10\0\1\5\4\0\1\7"+
    "\110\0\1\74\1\75\1\76\1\77\1\0\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\33\0\1\76\1\106"+
    "\6\0\1\104\1\103\1\77\25\0\2\11\1\76\2\0"+
    "\3\11\1\103\1\104\1\105\1\106\33\0\1\76\1\106"+
    "\6\0\1\104\1\103\26\0\2\105\3\0\3\105\113\0"+
    "\1\107\10\0\1\110\106\0\1\111\100\0\1\112\5\0"+
    "\1\113\106\0\1\114\106\0\1\115\105\0\1\116\1\117"+
    "\106\0\1\120\106\0\1\121\106\0\1\122\6\0\1\123"+
    "\70\0\1\124\6\0\1\125\54\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\1\5\1\126\26\5\10\0\1\5"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\4\5"+
    "\1\127\1\5\1\130\4\5\1\131\14\5\10\0\1\5"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\3\5"+
    "\1\132\7\5\1\133\1\134\1\5\1\135\7\5\1\136"+
    "\1\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\4\5\1\137\7\5\1\140\13\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\10\5\1\141\17\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\1\142\5\5\1\143\1\144"+
    "\4\5\1\145\13\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\6\5\1\146\21\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\7\5\1\147\11\5\1\150\6\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\1\151\7\5"+
    "\1\152\5\5\1\153\11\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\11\5\1\154\6\5"+
    "\1\155\1\5\1\156\5\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\6\5\1\157\1\5"+
    "\1\160\17\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\1\161\5\5\1\162\1\163\5\5"+
    "\1\164\12\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\1\165\3\5\1\166\11\5\1\167"+
    "\11\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\6\5\1\170\21\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\14\5\1\171"+
    "\13\5\10\0\1\5\33\0\1\172\46\0\1\173\37\0"+
    "\1\174\47\0\1\175\3\0\3\63\2\0\16\63\1\0"+
    "\17\63\1\0\43\63\4\0\1\65\102\0\3\176\2\0"+
    "\1\176\1\177\4\176\2\177\1\200\5\176\1\201\15\176"+
    "\1\0\1\176\1\202\1\203\2\176\1\204\1\176\1\205"+
    "\1\206\4\176\1\207\6\176\1\210\16\176\46\0\1\211"+
    "\46\0\1\72\102\0\3\176\2\0\1\176\1\212\4\176"+
    "\2\212\1\213\5\176\1\214\15\176\1\0\1\176\1\215"+
    "\1\216\2\176\1\217\1\176\1\220\1\221\4\176\1\222"+
    "\6\176\1\223\16\176\10\0\1\74\1\75\1\224\2\0"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\33\0"+
    "\1\224\1\106\6\0\1\104\1\103\26\0\2\75\3\0"+
    "\3\75\1\103\1\104\1\105\1\106\34\0\1\106\6\0"+
    "\1\104\1\103\26\0\1\225\1\226\2\0\6\226\1\0"+
    "\1\226\24\0\2\226\3\0\1\226\2\0\1\226\6\0"+
    "\2\226\26\0\1\227\1\75\1\224\2\0\3\227\1\103"+
    "\1\104\1\105\1\106\33\0\1\224\1\106\6\0\1\104"+
    "\1\103\26\0\1\102\1\75\1\224\2\0\3\102\1\103"+
    "\1\104\1\105\1\106\33\0\1\224\1\106\6\0\1\104"+
    "\1\103\26\0\1\230\1\75\1\224\2\0\3\230\1\103"+
    "\1\104\1\105\1\106\33\0\1\224\1\106\6\0\1\104"+
    "\1\103\26\0\2\105\3\0\3\105\1\103\1\104\1\0"+
    "\1\106\34\0\1\106\6\0\1\104\1\103\26\0\2\231"+
    "\3\0\3\231\4\0\1\232\2\0\1\232\114\0\1\233"+
    "\77\0\1\234\63\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\2\5\1\235\25\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\10\5\1\236\17\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\6\5\1\237\21\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\3\5\1\240\24\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\1\241\27\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\11\5\1\242\16\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\6\5\1\243\21\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\23\5\1\244\4\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\15\5\1\245\12\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\1\246\12\5\1\247\2\5"+
    "\1\250\11\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\4\5\1\251\10\5\1\252\12\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\3\5\1\253\24\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\2\5\1\254\1\255"+
    "\24\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\11\5\1\256\16\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\1\257\27\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\1\260\27\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\11\5\1\261\16\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\2\5\1\262\25\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\3\5\1\263\24\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\3\5\1\264\24\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\26\5\1\265\1\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\7\5\1\266\20\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\2\5\1\267\1\270\24\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\23\5\1\271\4\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\16\5\1\272\11\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\20\5\1\273\7\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\7\5\1\274\20\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\4\5\1\275\23\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\6\5\1\276\21\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\11\5\1\277\16\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\5\5\1\300\22\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\6\5\1\301\6\5\1\302\12\5\10\0\1\5"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\1\5"+
    "\1\303\26\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\15\5\1\304\12\5\10\0\1\5"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\15\5"+
    "\1\305\12\5\10\0\1\5\33\0\1\306\106\0\1\307"+
    "\47\0\1\310\11\0\1\200\4\0\3\200\77\0\1\311"+
    "\4\0\3\311\77\0\1\312\4\0\3\312\26\0\1\313"+
    "\50\0\1\314\4\0\3\314\26\0\1\313\106\0\1\315"+
    "\106\0\1\316\106\0\1\317\106\0\1\320\106\0\1\321"+
    "\106\0\1\322\106\0\1\323\106\0\1\324\50\0\1\225"+
    "\1\226\1\325\1\0\6\226\1\0\1\226\24\0\2\226"+
    "\3\0\1\226\1\0\1\325\1\226\6\0\2\226\26\0"+
    "\2\326\1\325\1\0\6\326\1\0\1\326\24\0\2\326"+
    "\3\0\1\326\1\0\1\325\1\326\6\0\2\326\26\0"+
    "\1\327\1\75\1\224\2\0\3\327\1\103\1\104\1\105"+
    "\1\106\33\0\1\224\1\106\6\0\1\104\1\103\26\0"+
    "\1\330\1\75\1\224\2\0\3\330\1\103\1\104\1\105"+
    "\1\106\33\0\1\224\1\106\6\0\1\104\1\103\26\0"+
    "\2\231\3\0\3\231\1\103\1\104\45\0\1\104\1\103"+
    "\26\0\2\231\3\0\3\231\71\0\24\234\1\331\62\234"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\3\5"+
    "\1\332\24\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\1\333\27\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\7\5\1\334"+
    "\20\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\10\5\1\335\17\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\3\5\1\336"+
    "\24\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\5\5\1\337\22\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\4\5\1\340"+
    "\23\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\10\5\1\341\17\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\3\5\1\342"+
    "\24\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\11\5\1\343\16\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\10\5\1\344"+
    "\17\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\6\5\1\345\1\5\1\346\17\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\2\5\1\347\25\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\16\5\1\350\11\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\10\5\1\351\17\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\5\5\1\352\22\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\3\5\1\353\24\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\2\5\1\354\25\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\4\5\1\355\23\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\24\5\1\356\3\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\10\5\1\357\17\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\10\5\1\360\17\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\15\5\1\361\12\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\7\5\1\362\20\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\3\5\1\363\24\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\10\5\1\364\17\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\6\5\1\365\1\366\20\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\1\5\1\367\26\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\1\370\27\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\2\5\1\371\25\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\1\372\27\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\1\373\27\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\12\5\1\374"+
    "\15\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\3\5\1\375\24\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\25\5\1\376"+
    "\2\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\7\5\1\377\20\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\17\5\1\u0100"+
    "\10\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\7\5\1\u0101\20\5\10\0\1\5\44\0"+
    "\1\313\50\0\2\u0102\1\325\1\0\6\u0102\1\0\1\u0102"+
    "\24\0\2\u0102\3\0\1\u0102\1\0\1\325\1\u0102\6\0"+
    "\2\u0102\26\0\1\u0103\1\75\1\224\2\0\3\u0103\1\103"+
    "\1\104\1\105\1\106\33\0\1\224\1\106\6\0\1\104"+
    "\1\103\26\0\1\u0104\1\75\1\224\2\0\3\u0104\1\103"+
    "\1\104\1\105\1\106\33\0\1\224\1\106\6\0\1\104"+
    "\1\103\20\0\24\234\1\331\20\234\1\u0105\41\234\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\4\5\1\u0106"+
    "\23\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\12\5\1\u0107\15\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\10\5\1\u0108"+
    "\17\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\15\5\1\u0109\12\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\14\5\1\u010a"+
    "\13\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\3\5\1\u010b\24\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\4\5\1\u010c"+
    "\23\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\5\5\1\u010d\22\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\2\5\1\u010e"+
    "\25\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\26\5\1\u010f\1\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\1\u0110\27\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\4\5\1\u0111\23\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\14\5\1\u0112\13\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\15\5\1\u0113\12\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\2\5\1\u0114\25\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\11\5\1\u0115\16\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\25\5\1\u0116\2\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\1\u0117\27\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\4\5\1\u0118\23\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\4\5\1\u0119\23\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\10\5\1\u011a\17\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\7\5\1\u011b\20\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\16\5\1\u011c\11\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\10\5\1\u011d\17\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\3\5\1\u011e\24\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\7\5\1\u011f\20\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\1\u0120\27\5\10\0\1\5"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\10\5"+
    "\1\u0121\17\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\1\u0122\27\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\15\5\1\u0123"+
    "\12\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\10\5\1\u0124\17\5\10\0\1\5\6\0"+
    "\2\u0125\1\325\1\0\6\u0125\1\0\1\u0125\24\0\2\u0125"+
    "\3\0\1\u0125\1\0\1\325\1\u0125\6\0\2\u0125\26\0"+
    "\1\u0126\1\75\1\224\2\0\3\u0126\1\103\1\104\1\105"+
    "\1\106\33\0\1\224\1\106\6\0\1\104\1\103\26\0"+
    "\1\u0127\1\75\1\224\2\0\3\u0127\1\103\1\104\1\105"+
    "\1\106\33\0\1\224\1\106\6\0\1\104\1\103\21\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\1\u0128\27\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\1\u0129\27\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\5\5\1\u012a\22\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\4\5\1\u012b\23\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\14\5\1\u012c\13\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\15\5\1\u012d\12\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\17\5\1\u012e\10\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\11\5\1\u012f\16\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\11\5\1\u0130\16\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\17\5\1\u0131\10\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\10\5\1\u0132\17\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\11\5\1\u0133\16\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\20\5\1\u0134\7\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\3\5\1\u0135\24\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\22\5\1\u0136\5\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\10\5\1\u0137\17\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\7\5\1\u0138\20\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\7\5\1\u0139\20\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\24\5\1\u013a\3\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\5\5\1\u013b\22\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\3\5\1\u013c\24\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\5\5\1\u013d\22\5\10\0\1\5\6\0\2\u013e\1\325"+
    "\1\0\6\u013e\1\0\1\u013e\24\0\2\u013e\3\0\1\u013e"+
    "\1\0\1\325\1\u013e\6\0\2\u013e\26\0\1\u013f\1\75"+
    "\1\224\2\0\3\u013f\1\103\1\104\1\105\1\106\33\0"+
    "\1\224\1\106\6\0\1\104\1\103\26\0\1\u0140\1\75"+
    "\1\224\2\0\3\u0140\1\103\1\104\1\105\1\106\33\0"+
    "\1\224\1\106\6\0\1\104\1\103\21\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\5\5\1\u0141\22\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\11\5\1\u0142\16\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\6\5\1\u0143\21\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\10\5\1\u0144\17\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\2\5\1\u0145\25\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\16\5\1\u0146\11\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\2\5\1\u0147\25\5\10\0"+
    "\1\5\1\0\2\5\3\0\12\5\1\0\1\5\24\0"+
    "\5\5\1\u0148\22\5\10\0\1\5\1\0\2\5\3\0"+
    "\12\5\1\0\1\5\24\0\1\u0149\27\5\10\0\1\5"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\10\5"+
    "\1\u014a\17\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\3\5\1\u014b\24\5\10\0\1\5"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\13\5"+
    "\1\u014c\14\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\10\5\1\u014d\17\5\10\0\1\5"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\3\5"+
    "\1\u014e\24\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\10\5\1\u014f\17\5\10\0\1\5"+
    "\6\0\2\u0150\1\325\1\0\6\u0150\1\0\1\u0150\24\0"+
    "\2\u0150\3\0\1\u0150\1\0\1\325\1\u0150\6\0\2\u0150"+
    "\26\0\1\u0151\1\75\1\224\2\0\3\u0151\1\103\1\104"+
    "\1\105\1\106\33\0\1\224\1\106\6\0\1\104\1\103"+
    "\26\0\1\u0152\1\75\1\224\2\0\3\u0152\1\103\1\104"+
    "\1\105\1\106\33\0\1\224\1\106\6\0\1\104\1\103"+
    "\21\0\2\5\3\0\12\5\1\0\1\5\24\0\3\5"+
    "\1\u0153\24\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\11\5\1\u0154\16\5\10\0\1\5"+
    "\1\0\2\5\3\0\12\5\1\0\1\5\24\0\11\5"+
    "\1\u0155\16\5\10\0\1\5\1\0\2\5\3\0\12\5"+
    "\1\0\1\5\24\0\1\u0156\27\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\10\5\1\u0157"+
    "\17\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\10\5\1\u0158\17\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\5\5\1\u0159"+
    "\22\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\11\5\1\u015a\16\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\10\5\1\u015b"+
    "\17\5\10\0\1\5\6\0\2\u015c\1\325\1\0\6\u015c"+
    "\1\0\1\u015c\24\0\2\u015c\3\0\1\u015c\1\0\1\325"+
    "\1\u015c\6\0\2\u015c\26\0\1\u015d\1\75\1\224\2\0"+
    "\3\u015d\1\103\1\104\1\105\1\106\33\0\1\224\1\106"+
    "\6\0\1\104\1\103\26\0\1\u015e\1\75\1\224\2\0"+
    "\3\u015e\1\103\1\104\1\105\1\106\33\0\1\224\1\106"+
    "\6\0\1\104\1\103\21\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\15\5\1\u015f\12\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\3\5\1\u0160"+
    "\24\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\20\5\1\u0161\7\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\6\5\1\u0162"+
    "\21\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\10\5\1\u0163\17\5\10\0\1\5\1\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\3\5\1\u0164"+
    "\24\5\10\0\1\5\1\0\2\5\3\0\12\5\1\0"+
    "\1\5\24\0\17\5\1\u0165\10\5\10\0\1\5\6\0"+
    "\2\u0166\1\325\1\0\6\u0166\1\0\1\u0166\24\0\2\u0166"+
    "\3\0\1\u0166\1\0\1\325\1\u0166\6\0\2\u0166\26\0"+
    "\1\u0167\1\75\1\224\2\0\3\u0167\1\103\1\104\1\105"+
    "\1\106\33\0\1\224\1\106\6\0\1\104\1\103\26\0"+
    "\1\u0168\1\75\1\224\2\0\3\u0168\1\103\1\104\1\105"+
    "\1\106\33\0\1\224\1\106\6\0\1\104\1\103\21\0"+
    "\2\5\3\0\12\5\1\0\1\5\24\0\27\5\1\u0169"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\10\5\1\u016a\17\5\10\0\1\5\1\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\20\5\1\u016b\7\5"+
    "\10\0\1\5\1\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\2\5\1\u016c\25\5\10\0\1\5\6\0\2\u016d"+
    "\1\325\1\0\6\u016d\1\0\1\u016d\24\0\2\u016d\3\0"+
    "\1\u016d\1\0\1\325\1\u016d\6\0\2\u016d\26\0\1\u016e"+
    "\1\75\1\224\2\0\3\u016e\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\1\u016f"+
    "\1\75\1\224\2\0\3\u016f\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\21\0\2\5"+
    "\3\0\12\5\1\0\1\5\24\0\10\5\1\u0170\17\5"+
    "\10\0\1\5\6\0\2\u0171\1\325\1\0\6\u0171\1\0"+
    "\1\u0171\24\0\2\u0171\3\0\1\u0171\1\0\1\325\1\u0171"+
    "\6\0\2\u0171\26\0\1\u0172\1\75\1\224\2\0\3\u0172"+
    "\1\103\1\104\1\105\1\106\33\0\1\224\1\106\6\0"+
    "\1\104\1\103\26\0\1\u0173\1\75\1\224\2\0\3\u0173"+
    "\1\103\1\104\1\105\1\106\33\0\1\224\1\106\6\0"+
    "\1\104\1\103\21\0\2\5\3\0\12\5\1\0\1\5"+
    "\24\0\17\5\1\u0174\10\5\10\0\1\5\6\0\2\u0175"+
    "\1\325\1\0\6\u0175\1\0\1\u0175\24\0\2\u0175\3\0"+
    "\1\u0175\1\0\1\325\1\u0175\6\0\2\u0175\26\0\1\u0176"+
    "\1\75\1\224\2\0\3\u0176\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\1\u0177"+
    "\1\75\1\224\2\0\3\u0177\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\2\u0178"+
    "\1\325\1\0\6\u0178\1\0\1\u0178\24\0\2\u0178\3\0"+
    "\1\u0178\1\0\1\325\1\u0178\6\0\2\u0178\26\0\1\u0179"+
    "\1\75\1\224\2\0\3\u0179\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\1\u017a"+
    "\1\75\1\224\2\0\3\u017a\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\2\u017b"+
    "\1\325\1\0\6\u017b\1\0\1\u017b\24\0\2\u017b\3\0"+
    "\1\u017b\1\0\1\325\1\u017b\6\0\2\u017b\26\0\1\u017c"+
    "\1\75\1\224\2\0\3\u017c\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\1\u017d"+
    "\1\75\1\224\2\0\3\u017d\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\2\u017e"+
    "\1\325\1\0\6\u017e\1\0\1\u017e\24\0\2\u017e\3\0"+
    "\1\u017e\1\0\1\325\1\u017e\6\0\2\u017e\26\0\1\u017f"+
    "\1\75\1\224\2\0\3\u017f\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\1\u0180"+
    "\1\75\1\224\2\0\3\u0180\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\2\u0181"+
    "\1\325\1\0\6\u0181\1\0\1\u0181\24\0\2\u0181\3\0"+
    "\1\u0181\1\0\1\325\1\u0181\6\0\2\u0181\26\0\1\u0182"+
    "\1\75\1\224\2\0\3\u0182\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\1\u0183"+
    "\1\75\1\224\2\0\3\u0183\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\26\0\2\u0184"+
    "\1\325\1\0\6\u0184\1\0\1\u0184\24\0\2\u0184\3\0"+
    "\1\u0184\1\0\1\325\1\u0184\6\0\2\u0184\26\0\1\u0185"+
    "\1\75\1\224\2\0\3\u0185\1\103\1\104\1\105\1\106"+
    "\33\0\1\224\1\106\6\0\1\104\1\103\30\0\1\325"+
    "\44\0\1\325\37\0\1\u0186\1\75\1\224\2\0\3\u0186"+
    "\1\103\1\104\1\105\1\106\33\0\1\224\1\106\6\0"+
    "\1\104\1\103\26\0\1\u0187\1\75\1\224\2\0\3\u0187"+
    "\1\103\1\104\1\105\1\106\33\0\1\224\1\106\6\0"+
    "\1\104\1\103\26\0\1\u0188\1\75\1\224\2\0\3\u0188"+
    "\1\103\1\104\1\105\1\106\33\0\1\224\1\106\6\0"+
    "\1\104\1\103\26\0\1\u0189\1\75\1\224\2\0\3\u0189"+
    "\1\103\1\104\1\105\1\106\33\0\1\224\1\106\6\0"+
    "\1\104\1\103\26\0\2\75\1\224\2\0\3\75\1\103"+
    "\1\104\1\105\1\106\33\0\1\224\1\106\6\0\1\104"+
    "\1\103\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20235];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\4\1\1\11\2\1\2\11"+
    "\4\1\1\11\1\1\3\11\1\1\1\11\20\1\4\11"+
    "\2\1\1\11\2\1\2\11\3\1\1\11\2\1\1\0"+
    "\1\11\1\0\3\1\2\11\2\0\14\11\1\1\1\0"+
    "\1\11\44\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\11\11\12\1\1\11\4\1\2\0\1\11\1\0\51\1"+
    "\4\11\1\0\1\11\1\0\11\11\3\1\1\0\53\1"+
    "\1\11\147\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
	return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
	return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  private long parseLong(int start, int end, int radix) {
	long result = 0;
	long digit;

	for (int i = start; i < end; i++) {
	  digit  = Character.digit(yycharat(i),radix);
	  result*= radix;
	  result+= digit;
	}

	return result;
  }

  private void reportError(int line, String msg) {
        throw new RuntimeException("Lexical error at line #" + line + ": " + msg);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2896) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(sym.EOF);
            }
            case 394: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { reportError(yyline+1, "Illegal character \"" + yytext() + "\"");
            }
          case 132: break;
          case 2: 
            { return symbol(sym.IDENTIFIER,yytext());
            }
          case 133: break;
          case 3: 
            { /* just ignore it*/
            }
          case 134: break;
          case 4: 
            { return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
            }
          case 135: break;
          case 5: 
            { return symbol(sym.DOT);
            }
          case 136: break;
          case 6: 
            { return symbol(sym.MINUS);
            }
          case 137: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 138: break;
          case 8: 
            { return symbol(sym.MULT);
            }
          case 139: break;
          case 9: 
            { return symbol(sym.PLUS);
            }
          case 140: break;
          case 10: 
            { return symbol(sym.LBRACK);
            }
          case 141: break;
          case 11: 
            { return symbol(sym.RBRACK);
            }
          case 142: break;
          case 12: 
            { return symbol(sym.NOT);
            }
          case 143: break;
          case 13: 
            { return symbol(sym.MOD);
            }
          case 144: break;
          case 14: 
            { return symbol(sym.AND);
            }
          case 145: break;
          case 15: 
            { return symbol(sym.EQ);
            }
          case 146: break;
          case 16: 
            { return symbol(sym.QUESTION);
            }
          case 147: break;
          case 17: 
            { return symbol(sym.XOR);
            }
          case 148: break;
          case 18: 
            { return symbol(sym.COLON);
            }
          case 149: break;
          case 19: 
            { return symbol(sym.LPAREN);
            }
          case 150: break;
          case 20: 
            { return symbol(sym.RPAREN);
            }
          case 151: break;
          case 21: 
            { return symbol(sym.OR);
            }
          case 152: break;
          case 22: 
            { yybegin(CHARLITERAL);
            }
          case 153: break;
          case 23: 
            { return symbol(sym.DIV);
            }
          case 154: break;
          case 24: 
            { return symbol(sym.LBRACE);
            }
          case 155: break;
          case 25: 
            { return symbol(sym.RBRACE);
            }
          case 156: break;
          case 26: 
            { return symbol(sym.SEMICOLON);
            }
          case 157: break;
          case 27: 
            { return symbol(sym.COMMA);
            }
          case 158: break;
          case 28: 
            { return symbol(sym.LT);
            }
          case 159: break;
          case 29: 
            { return symbol(sym.GT);
            }
          case 160: break;
          case 30: 
            { return symbol(sym.COMP);
            }
          case 161: break;
          case 31: 
            { string.append( yytext() );
            }
          case 162: break;
          case 32: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 163: break;
          case 33: 
            { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
            }
          case 164: break;
          case 34: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 165: break;
          case 35: 
            { return symbol(sym.INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
            }
          case 166: break;
          case 36: 
            { return symbol(sym.INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 167: break;
          case 37: 
            { return symbol(sym.FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 168: break;
          case 38: 
            { return symbol(sym.FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 169: break;
          case 39: 
            { return symbol(sym.MINUSMINUS);
            }
          case 170: break;
          case 40: 
            { return symbol(sym.MINUSEQ);
            }
          case 171: break;
          case 41: 
            { return symbol(sym.MULTEQ);
            }
          case 172: break;
          case 42: 
            { return symbol(sym.PLUSPLUS);
            }
          case 173: break;
          case 43: 
            { return symbol(sym.PLUSEQ);
            }
          case 174: break;
          case 44: 
            { return symbol(sym.NOTEQ);
            }
          case 175: break;
          case 45: 
            { return symbol(sym.MODEQ);
            }
          case 176: break;
          case 46: 
            { return symbol(sym.ANDAND);
            }
          case 177: break;
          case 47: 
            { return symbol(sym.ANDEQ);
            }
          case 178: break;
          case 48: 
            { return symbol(sym.EQEQ);
            }
          case 179: break;
          case 49: 
            { return symbol(sym.XOREQ);
            }
          case 180: break;
          case 50: 
            { return symbol(sym.OREQ);
            }
          case 181: break;
          case 51: 
            { return symbol(sym.OROR);
            }
          case 182: break;
          case 52: 
            { return symbol(sym.DIVEQ);
            }
          case 183: break;
          case 53: 
            { return symbol(sym.IF);
            }
          case 184: break;
          case 54: 
            { return symbol(sym.DO);
            }
          case 185: break;
          case 55: 
            { return symbol(sym.LTEQ);
            }
          case 186: break;
          case 56: 
            { return symbol(sym.LSHIFT);
            }
          case 187: break;
          case 57: 
            { return symbol(sym.GTEQ);
            }
          case 188: break;
          case 58: 
            { return symbol(sym.RSHIFT);
            }
          case 189: break;
          case 59: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 190: break;
          case 60: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                        string.append( val );
            }
          case 191: break;
          case 61: 
            { string.append( '\"' );
            }
          case 192: break;
          case 62: 
            { string.append( '\\' );
            }
          case 193: break;
          case 63: 
            { string.append( '\'' );
            }
          case 194: break;
          case 64: 
            { string.append( '\b' );
            }
          case 195: break;
          case 65: 
            { string.append( '\t' );
            }
          case 196: break;
          case 66: 
            { string.append( '\r' );
            }
          case 197: break;
          case 67: 
            { string.append( '\n' );
            }
          case 198: break;
          case 68: 
            { string.append( '\f' );
            }
          case 199: break;
          case 69: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character(yytext().charAt(0)));
            }
          case 200: break;
          case 70: 
            { return symbol(sym.INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
          case 201: break;
          case 71: 
            { return symbol(sym.INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
            }
          case 202: break;
          case 72: 
            { return symbol(sym.OROREQ);
            }
          case 203: break;
          case 73: 
            { return symbol(sym.TRY);
            }
          case 204: break;
          case 74: 
            { return symbol(sym.NEW);
            }
          case 205: break;
          case 75: 
            { return symbol(sym.INT);
            }
          case 206: break;
          case 76: 
            { return symbol(sym.FOR);
            }
          case 207: break;
          case 77: 
            { return symbol(sym.LSHIFTEQ);
            }
          case 208: break;
          case 78: 
            { return symbol(sym.RSHIFTEQ);
            }
          case 209: break;
          case 79: 
            { return symbol(sym.URSHIFT);
            }
          case 210: break;
          case 80: 
            { yybegin(YYINITIAL);
                                        int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
										return symbol(sym.CHARACTER_LITERAL, new Character((char)val));
            }
          case 211: break;
          case 81: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\"'));
            }
          case 212: break;
          case 82: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\\'));
            }
          case 213: break;
          case 83: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\''));
            }
          case 214: break;
          case 84: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\b'));
            }
          case 215: break;
          case 85: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\t'));
            }
          case 216: break;
          case 86: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\r'));
            }
          case 217: break;
          case 87: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\n'));
            }
          case 218: break;
          case 88: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\f'));
            }
          case 219: break;
          case 89: 
            { return symbol(sym.INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
          case 220: break;
          case 90: 
            { return symbol(sym.BYTE);
            }
          case 221: break;
          case 91: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(true));
            }
          case 222: break;
          case 92: 
            { return symbol(sym.THIS);
            }
          case 223: break;
          case 93: 
            { return symbol(sym.CASE);
            }
          case 224: break;
          case 94: 
            { return symbol(sym.CHAR);
            }
          case 225: break;
          case 95: 
            { return symbol(sym.LONG);
            }
          case 226: break;
          case 96: 
            { return symbol(sym.ELSE);
            }
          case 227: break;
          case 97: 
            { return symbol(sym.NULL_LITERAL);
            }
          case 228: break;
          case 98: 
            { return symbol(sym.VOID);
            }
          case 229: break;
          case 99: 
            { /* just ignore it */
            }
          case 230: break;
          case 100: 
            { return symbol(sym.BREAK);
            }
          case 231: break;
          case 101: 
            { return symbol(sym.SHORT);
            }
          case 232: break;
          case 102: 
            { return symbol(sym.SUPER);
            }
          case 233: break;
          case 103: 
            { return symbol(sym.THROW);
            }
          case 234: break;
          case 104: 
            { return symbol(sym.CATCH);
            }
          case 235: break;
          case 105: 
            { return symbol(sym.CLASS);
            }
          case 236: break;
          case 106: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(false));
            }
          case 237: break;
          case 107: 
            { return symbol(sym.FLOAT);
            }
          case 238: break;
          case 108: 
            { return symbol(sym.FINAL);
            }
          case 239: break;
          case 109: 
            { return symbol(sym.WHILE);
            }
          case 240: break;
          case 110: 
            { return symbol(sym.STATIC);
            }
          case 241: break;
          case 111: 
            { return symbol(sym.SWITCH);
            }
          case 242: break;
          case 112: 
            { return symbol(sym.RETURN);
            }
          case 243: break;
          case 113: 
            { return symbol(sym.NATIVE);
            }
          case 244: break;
          case 114: 
            { return symbol(sym.IMPORT);
            }
          case 245: break;
          case 115: 
            { return symbol(sym.DOUBLE);
            }
          case 246: break;
          case 116: 
            { return symbol(sym.PUBLIC);
            }
          case 247: break;
          case 117: 
            { return symbol(sym.BOOLEAN);
            }
          case 248: break;
          case 118: 
            { return symbol(sym.EXTENDS);
            }
          case 249: break;
          case 119: 
            { return symbol(sym.DEFAULT);
            }
          case 250: break;
          case 120: 
            { return symbol(sym.FINALLY);
            }
          case 251: break;
          case 121: 
            { return symbol(sym.PACKAGE);
            }
          case 252: break;
          case 122: 
            { return symbol(sym.PRIVATE);
            }
          case 253: break;
          case 123: 
            { return symbol(sym.ABSTRACT);
            }
          case 254: break;
          case 124: 
            { return symbol(sym.CONTINUE);
            }
          case 255: break;
          case 125: 
            { return symbol(sym.TRANSIENT);
            }
          case 256: break;
          case 126: 
            { return symbol(sym.INTERFACE);
            }
          case 257: break;
          case 127: 
            { return symbol(sym.PROTECTED);
            }
          case 258: break;
          case 128: 
            { return symbol(sym.THREADSAFE);
            }
          case 259: break;
          case 129: 
            { return symbol(sym.INSTANCEOF);
            }
          case 260: break;
          case 130: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 261: break;
          case 131: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 262: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
