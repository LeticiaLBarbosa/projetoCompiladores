/* The following code was generated by JFlex 1.6.1 */

package compiler.generated;
import java_cup.*;
import java_cup.runtime.*;
import compiler.core.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./specs/lexical.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\52\1\25\1\30\1\105\1\51\1\27\16\52\4\0\1\25\1\40"+
    "\1\33\1\0\1\4\1\41\1\42\1\21\1\47\1\50\1\34\1\35"+
    "\1\101\1\10\1\31\1\54\1\1\1\32\2\32\4\3\1\2\1\2"+
    "\1\46\1\100\1\102\1\43\1\103\1\44\1\0\3\5\1\5\1\7"+
    "\1\13\5\4\1\15\3\4\1\11\4\4\1\17\2\4\1\6\2\4"+
    "\1\36\1\20\1\37\1\45\1\4\1\0\1\55\1\23\1\61\1\70"+
    "\1\63\1\12\1\73\1\66\1\67\1\4\1\64\1\14\1\71\1\22"+
    "\1\62\1\72\1\4\1\60\1\56\1\57\1\16\1\26\1\74\1\24"+
    "\1\65\1\75\1\76\1\53\1\77\1\104\6\52\1\106\32\52\2\0"+
    "\1\4\1\4\2\4\4\0\1\4\2\0\1\52\2\0\1\0\4\0"+
    "\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4\4\0"+
    "\14\4\16\0\5\4\7\0\1\4\1\0\1\4\21\0\160\52\5\4"+
    "\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0\1\4"+
    "\1\0\24\4\1\0\123\4\1\0\213\4\1\0\5\52\2\0\236\4"+
    "\11\0\46\4\2\0\1\4\7\0\47\4\11\0\55\52\1\0\1\52"+
    "\1\0\2\52\1\0\2\52\1\0\1\52\10\0\33\4\5\0\3\4"+
    "\15\0\4\52\7\0\1\4\4\0\13\52\5\0\53\4\37\52\4\0"+
    "\2\4\1\52\143\4\1\0\1\4\10\52\1\0\6\52\2\4\2\52"+
    "\1\0\4\52\2\4\12\52\3\4\2\0\1\4\17\0\1\52\1\4"+
    "\1\52\36\4\33\52\2\0\131\4\13\52\1\4\16\0\12\52\41\4"+
    "\11\52\2\4\4\0\1\4\5\0\26\4\4\52\1\4\11\52\1\4"+
    "\3\52\1\4\5\52\22\0\31\4\3\52\244\0\4\52\66\4\3\52"+
    "\1\4\22\52\1\4\7\52\12\4\2\52\2\0\12\52\1\0\7\4"+
    "\1\0\7\4\1\0\3\52\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\52\1\4\7\52"+
    "\2\0\2\52\2\0\3\52\1\4\10\0\1\52\4\0\2\4\1\0"+
    "\3\4\2\52\2\0\12\52\4\4\7\0\1\4\5\0\3\52\1\0"+
    "\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\2\0\1\52\1\0\5\52\4\0\2\52\2\0"+
    "\3\52\3\0\1\52\7\0\4\4\1\0\1\4\7\0\14\52\3\4"+
    "\1\52\13\0\3\52\1\0\11\4\1\0\3\4\1\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\52\1\4\10\52\1\0"+
    "\3\52\1\0\3\52\2\0\1\4\17\0\2\4\2\52\2\0\12\52"+
    "\1\0\1\4\17\0\3\52\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\52\1\4\7\52"+
    "\2\0\2\52\2\0\3\52\10\0\2\52\4\0\2\4\1\0\3\4"+
    "\2\52\2\0\12\52\1\0\1\4\20\0\1\52\1\4\1\0\6\4"+
    "\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4"+
    "\3\0\2\4\3\0\3\4\3\0\14\4\4\0\5\52\3\0\3\52"+
    "\1\0\4\52\2\0\1\4\6\0\1\52\16\0\12\52\11\0\1\4"+
    "\7\0\3\52\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4"+
    "\1\0\5\4\3\0\1\4\7\52\1\0\3\52\1\0\4\52\7\0"+
    "\2\52\1\0\2\4\6\0\2\4\2\52\2\0\12\52\22\0\2\52"+
    "\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4"+
    "\2\0\1\52\1\4\7\52\1\0\3\52\1\0\4\52\7\0\2\52"+
    "\7\0\1\4\1\0\2\4\2\52\2\0\12\52\1\0\2\4\17\0"+
    "\2\52\1\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4\7\52"+
    "\1\0\3\52\1\0\4\52\1\4\10\0\1\52\10\0\2\4\2\52"+
    "\2\0\12\52\12\0\6\4\2\0\2\52\1\0\22\4\3\0\30\4"+
    "\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\52\4\0\6\52"+
    "\1\0\1\52\1\0\10\52\22\0\2\52\15\0\60\4\1\52\2\4"+
    "\7\52\4\0\10\4\10\52\1\0\12\52\47\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4"+
    "\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4"+
    "\1\52\2\4\6\52\1\0\2\52\1\4\2\0\5\4\1\0\1\4"+
    "\1\0\6\52\2\0\12\52\2\0\2\4\42\0\1\4\27\0\2\52"+
    "\6\0\12\52\13\0\1\52\1\0\1\52\1\0\1\52\4\0\2\52"+
    "\10\4\1\0\44\4\4\0\24\52\1\0\2\52\5\4\13\52\1\0"+
    "\44\52\11\0\1\52\71\0\53\4\24\52\1\4\12\52\6\0\6\4"+
    "\4\52\4\4\3\52\1\4\3\52\2\4\7\52\3\4\4\52\15\4"+
    "\14\52\1\4\17\52\2\0\46\4\12\0\53\4\1\0\1\4\3\0"+
    "\u0149\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4\2\0"+
    "\103\4\2\0\3\52\40\0\20\4\20\0\125\4\14\0\u026c\4\2\0"+
    "\21\4\1\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0"+
    "\4\4\3\52\13\0\22\4\3\52\13\0\22\4\2\52\14\0\15\4"+
    "\1\0\3\4\1\0\2\52\14\0\64\4\40\52\3\0\1\4\3\0"+
    "\2\4\1\52\2\0\12\52\41\0\3\52\2\0\12\52\6\0\130\4"+
    "\10\0\51\4\1\52\1\4\5\0\106\4\12\0\35\4\3\0\14\52"+
    "\4\0\14\52\12\0\12\52\36\4\2\0\5\4\13\0\54\4\4\0"+
    "\21\52\7\4\2\52\6\0\12\52\46\0\27\4\5\52\4\0\65\4"+
    "\12\52\1\0\35\52\2\0\13\52\6\0\12\52\15\0\1\4\130\0"+
    "\5\52\57\4\21\52\7\4\4\0\12\52\21\0\11\52\14\0\3\52"+
    "\36\4\12\52\3\0\2\4\12\52\6\0\46\4\16\52\14\0\44\4"+
    "\24\52\10\0\12\52\3\0\3\4\12\52\44\4\122\0\3\52\1\0"+
    "\25\52\4\4\1\52\4\4\1\52\15\0\300\4\47\52\25\0\4\52"+
    "\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\16\0\5\52\30\0"+
    "\1\105\1\105\5\52\20\0\2\4\23\0\1\4\13\0\5\52\5\0"+
    "\6\52\1\0\1\4\15\0\1\4\20\0\15\4\3\0\32\4\26\0"+
    "\15\52\4\0\1\52\3\0\14\52\21\0\1\4\4\0\1\4\2\0"+
    "\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0"+
    "\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4\6\0"+
    "\4\4\3\52\16\0\46\4\12\0\66\4\11\0\1\4\17\0\1\52"+
    "\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\40\52\57\0"+
    "\1\4\u01d5\0\3\4\31\0\11\4\6\52\1\0\5\4\2\0\5\4"+
    "\4\0\126\4\2\0\2\52\2\0\3\4\1\0\132\4\1\0\4\4"+
    "\5\0\51\4\3\0\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4"+
    "\112\0\u51cc\4\64\0\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4"+
    "\12\52\2\4\24\0\57\4\1\52\14\0\2\52\1\0\31\4\10\0"+
    "\120\4\2\52\45\0\11\4\2\0\147\4\2\0\4\4\1\0\2\4"+
    "\16\0\12\4\120\0\10\4\1\52\3\4\1\52\4\4\1\52\27\4"+
    "\5\52\20\0\1\4\7\0\64\4\14\0\2\52\62\4\21\52\13\0"+
    "\12\52\6\0\22\52\6\4\3\0\1\4\4\0\12\52\34\4\10\52"+
    "\2\0\27\4\15\52\14\0\35\4\3\0\4\52\57\4\16\52\16\0"+
    "\1\4\12\52\46\0\51\4\16\52\11\0\3\4\1\52\10\4\2\52"+
    "\2\0\12\52\6\0\27\4\3\0\1\4\1\52\4\0\60\4\1\52"+
    "\1\4\3\52\2\4\2\52\5\4\2\52\1\4\1\52\1\4\30\0"+
    "\3\4\43\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0"+
    "\7\4\221\0\43\4\10\52\1\0\2\52\2\0\12\52\6\0\u2ba4\4"+
    "\14\0\27\4\4\0\61\4\u2104\0\u012e\4\2\0\76\4\2\0\152\4"+
    "\46\0\7\4\14\0\5\4\5\0\1\4\1\52\12\4\1\0\15\4"+
    "\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4"+
    "\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\52"+
    "\20\0\7\52\14\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4"+
    "\1\0\207\4\2\0\1\52\4\0\1\4\13\0\12\52\7\0\32\4"+
    "\4\0\1\4\1\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4"+
    "\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\52"+
    "\4\0\14\4\1\0\32\4\1\0\23\4\1\0\2\4\1\0\17\4"+
    "\2\0\16\4\42\0\173\4\105\0\65\4\210\0\1\52\202\0\35\4"+
    "\3\0\61\4\57\0\37\4\21\0\33\4\65\0\36\4\2\0\44\4"+
    "\4\0\10\4\1\0\5\4\52\0\236\4\2\0\12\52\u0356\0\6\4"+
    "\2\0\1\4\1\0\54\4\1\0\2\4\3\0\1\4\2\0\27\4"+
    "\252\0\26\4\12\0\32\4\306\0\1\4\3\52\1\0\2\52\5\0"+
    "\4\52\4\4\1\0\3\4\1\0\33\4\4\0\3\52\4\0\1\52"+
    "\40\0\35\4\203\0\66\4\12\0\26\4\12\0\23\4\215\0\111\4"+
    "\u03b7\0\3\52\65\4\17\52\37\0\12\52\20\0\3\52\55\4\13\52"+
    "\2\0\1\52\u0f42\0\u036f\4\221\0\143\4\u0b9d\0\u042f\4\u33d1\0\u0239\4"+
    "\u45c7\0\2\4\u2163\0\5\52\3\0\26\52\2\0\7\52\36\0\4\52"+
    "\224\0\3\52\u01bb\0\125\4\1\0\107\4\1\0\2\4\2\0\1\4"+
    "\2\0\2\4\2\0\4\4\1\0\14\4\1\0\1\4\1\0\7\4"+
    "\1\0\101\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\34\4"+
    "\1\0\4\4\1\0\5\4\1\0\1\4\3\0\7\4\1\0\u0154\4"+
    "\2\0\31\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4"+
    "\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4"+
    "\1\0\10\4\2\0\62\52\u2800\0\ua6d7\4\51\0\u1035\4\13\0\336\4"+
    "\u3fe2\0\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\52\36\0\140\52\200\0\360\52\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\3\2\1\4\2\2\1\5"+
    "\1\2\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\12\2\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\0\2\37\1\40\2\0"+
    "\2\41\1\1\3\0\1\1\1\42\1\0\1\43\1\0"+
    "\1\44\5\2\3\0\1\45\1\0\7\2\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\0\1\61\17\2\1\62\2\2\1\63\5\2"+
    "\1\64\1\65\1\66\1\67\1\70\2\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\12\70"+
    "\1\1\1\0\1\42\1\0\1\42\2\2\1\103\2\2"+
    "\1\0\2\45\1\0\1\1\2\2\1\104\4\2\1\105"+
    "\1\0\10\2\1\106\13\2\1\107\10\2\1\110\1\111"+
    "\1\112\1\71\1\0\1\113\1\0\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\0\3\2\1\124"+
    "\1\125\3\2\1\126\1\127\1\0\6\2\1\130\3\2"+
    "\1\131\2\2\1\132\2\2\1\133\1\134\14\2\1\135"+
    "\1\136\1\137\1\2\1\140\1\2\1\141\1\2\1\142"+
    "\2\2\1\143\2\2\1\144\2\2\1\145\1\146\14\2"+
    "\1\147\1\2\1\150\2\2\1\151\1\2\1\152\2\2"+
    "\1\153\5\2\1\154\1\155\1\2\1\156\3\2\1\157"+
    "\1\160\5\2\1\161\3\2\1\162\1\163\1\2\1\164"+
    "\1\165\3\2\1\166\5\2\1\167\2\2\1\170\1\2"+
    "\1\171\1\2\1\172\1\173\1\174\1\2\1\175";

  private static int [] zzUnpackAction() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u039b\0\u04b7\0\u04fe\0\u039b\0\u039b\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u039b\0\u0661\0\u039b\0\u039b\0\u039b\0\u06a8"+
    "\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0"+
    "\0\u0927\0\u096e\0\u09b5\0\u039b\0\u039b\0\u039b\0\u039b\0\u09fc"+
    "\0\u0a43\0\u039b\0\u0a8a\0\u0ad1\0\u0b18\0\u039b\0\u039b\0\u0b5f"+
    "\0\u0ba6\0\u0bed\0\u039b\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50"+
    "\0\u0d97\0\u0dde\0\u039b\0\u0470\0\u039b\0\u0e25\0\u0e6c\0\u0eb3"+
    "\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb"+
    "\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u039b\0\u039b"+
    "\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b"+
    "\0\u12dc\0\u1323\0\u039b\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486"+
    "\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be"+
    "\0\u1705\0\u174c\0\u0163\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af"+
    "\0\u18f6\0\u193d\0\u1984\0\u039b\0\u19cb\0\u039b\0\u1a12\0\u039b"+
    "\0\u1a59\0\u1aa0\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b"+
    "\0\u039b\0\u039b\0\u039b\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u1e82\0\u039b\0\u1ec9\0\u1f10\0\u0163\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u039b\0\u10a4\0\u202c\0\u039b\0\u2073\0\u20ba\0\u0163\0\u2101"+
    "\0\u2148\0\u218f\0\u21d6\0\u039b\0\u221d\0\u2264\0\u22ab\0\u22f2"+
    "\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u0163\0\u249c\0\u24e3"+
    "\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b"+
    "\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953"+
    "\0\u299a\0\u29e1\0\u039b\0\u039b\0\u039b\0\u039b\0\u1b2e\0\u039b"+
    "\0\u2a28\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b"+
    "\0\u039b\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u0163\0\u0163\0\u2b8b"+
    "\0\u2bd2\0\u2c19\0\u0163\0\u0163\0\u2c60\0\u2ca7\0\u2cee\0\u2d35"+
    "\0\u2d7c\0\u2dc3\0\u2e0a\0\u0163\0\u2e51\0\u2e98\0\u2edf\0\u0163"+
    "\0\u2f26\0\u2f6d\0\u0163\0\u2fb4\0\u2ffb\0\u0163\0\u0163\0\u3042"+
    "\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a"+
    "\0\u32c1\0\u3308\0\u334f\0\u0163\0\u0163\0\u3396\0\u33dd\0\u0163"+
    "\0\u3424\0\u039b\0\u346b\0\u0163\0\u34b2\0\u34f9\0\u0163\0\u3540"+
    "\0\u3587\0\u0163\0\u35ce\0\u3615\0\u0163\0\u0163\0\u365c\0\u36a3"+
    "\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db"+
    "\0\u3922\0\u3969\0\u0163\0\u39b0\0\u0163\0\u39f7\0\u3a3e\0\u0163"+
    "\0\u3a85\0\u0163\0\u3acc\0\u3b13\0\u0163\0\u3b5a\0\u3ba1\0\u3be8"+
    "\0\u3c2f\0\u3c76\0\u0163\0\u0163\0\u3cbd\0\u0163\0\u3d04\0\u3d4b"+
    "\0\u3d92\0\u0163\0\u0163\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5"+
    "\0\u0163\0\u3f3c\0\u3f83\0\u3fca\0\u0163\0\u0163\0\u4011\0\u0163"+
    "\0\u0163\0\u4058\0\u409f\0\u40e6\0\u0163\0\u412d\0\u4174\0\u41bb"+
    "\0\u4202\0\u4249\0\u0163\0\u4290\0\u42d7\0\u0163\0\u431e\0\u0163"+
    "\0\u4365\0\u0163\0\u0163\0\u0163\0\u43ac\0\u0163";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\4\6\1\7\1\6\1\10\1\6"+
    "\1\11\3\12\1\0\1\13\1\14\1\15\1\6\1\16"+
    "\1\17\1\20\1\16\1\21\1\5\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\16\1\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\6\1\47\3\6\1\50"+
    "\1\51\1\6\1\52\1\6\1\53\1\6\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\2\0\20\63\1\64"+
    "\6\63\1\65\1\66\2\63\1\67\53\63\20\70\1\71"+
    "\1\0\5\70\1\72\1\73\56\70\1\0\1\74\1\75"+
    "\1\74\2\0\1\76\1\77\4\0\4\100\4\0\1\76"+
    "\4\0\1\101\1\74\30\0\1\77\24\0\3\5\3\0"+
    "\1\77\4\0\4\100\11\0\1\101\1\5\30\0\1\77"+
    "\24\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\10\0\1\6"+
    "\1\0\1\102\2\5\4\0\1\103\20\0\1\104\1\5"+
    "\10\0\1\105\44\0\7\6\1\0\3\6\1\106\3\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\107\4\6\1\110\4\6\1\111\6\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\5\6\1\112"+
    "\13\6\10\0\1\6\1\0\7\6\1\0\7\6\1\0"+
    "\1\113\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\21\6\10\0\1\6\20\114\1\115\1\116\5\114"+
    "\1\117\1\0\20\114\1\117\33\114\2\117\1\0\7\6"+
    "\1\0\5\6\1\120\1\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\1\121\5\6\1\122"+
    "\12\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\3\6\1\123\1\6\1\124\2\6\1\125\10\6\10\0"+
    "\1\6\110\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\5\6\1\126"+
    "\13\6\10\0\1\6\30\0\1\16\57\0\3\101\26\0"+
    "\1\101\117\0\1\127\100\0\1\130\5\0\1\131\106\0"+
    "\1\132\106\0\1\133\105\0\1\134\1\135\106\0\1\136"+
    "\106\0\1\137\106\0\1\140\7\0\1\141\67\0\1\142"+
    "\6\0\1\143\44\0\7\6\1\0\7\6\2\0\1\6"+
    "\1\144\1\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\21\6\10\0\1\6\1\0\7\6\1\0\5\6"+
    "\1\145\1\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\2\6\1\146\5\6\1\147\1\150"+
    "\5\6\1\151\1\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\3\6\1\152\5\6\1\153\7\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\6\6\1\154"+
    "\12\6\10\0\1\6\1\0\7\6\1\0\3\6\1\155"+
    "\3\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\156\4\6\1\157\3\6\1\160\7\6"+
    "\10\0\1\6\1\0\7\6\1\0\3\6\1\161\3\6"+
    "\2\0\2\6\1\162\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\21\6\10\0\1\6\1\0\7\6\1\0"+
    "\1\6\1\163\5\6\2\0\1\164\2\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\14\6\1\165\4\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\5\6"+
    "\1\166\1\167\12\6\10\0\1\6\1\0\7\6\1\0"+
    "\5\6\1\170\1\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\1\171\2\6\1\172\15\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\11\6"+
    "\1\173\7\6\10\0\1\6\43\0\1\174\36\0\1\175"+
    "\47\0\1\176\37\0\1\177\3\0\20\63\1\0\6\63"+
    "\2\0\2\63\1\0\53\63\1\200\1\201\1\200\1\202"+
    "\6\200\1\203\5\200\1\204\1\205\1\206\1\207\3\200"+
    "\2\0\1\200\1\201\1\210\15\200\1\0\5\200\1\211"+
    "\1\212\24\200\32\0\1\66\77\0\1\213\65\0\1\200"+
    "\1\214\1\200\1\215\6\200\1\216\5\200\1\217\1\220"+
    "\1\221\1\222\3\200\2\0\1\200\1\214\1\223\15\200"+
    "\1\0\5\200\1\224\1\225\24\200\32\0\1\73\57\0"+
    "\1\74\1\75\1\74\3\0\1\77\4\0\4\100\11\0"+
    "\1\101\1\74\30\0\1\77\24\0\3\75\3\0\1\77"+
    "\21\0\1\101\1\75\30\0\1\77\24\0\3\226\1\0"+
    "\1\226\1\0\1\226\2\0\2\226\7\0\1\226\5\0"+
    "\1\227\1\226\22\0\1\226\3\0\1\226\1\0\1\226"+
    "\4\0\1\226\17\0\3\230\4\0\1\231\21\0\1\230"+
    "\2\0\1\231\65\0\4\100\70\0\3\101\3\0\1\77"+
    "\2\0\4\232\14\0\1\101\30\0\1\77\24\0\3\75"+
    "\2\0\1\76\1\77\14\0\1\76\4\0\1\101\1\75"+
    "\30\0\1\77\24\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\5\6"+
    "\1\233\13\6\10\0\1\6\1\0\7\6\1\0\3\6"+
    "\1\234\3\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\3\6\1\235\15\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\1\236\2\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\21\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\1\237\2\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\10\0\1\6\20\117\1\240\1\0\6\117\1\0\76\117"+
    "\1\240\1\241\6\117\1\0\56\117\1\0\1\117\1\0"+
    "\1\117\6\0\1\117\5\0\1\117\1\242\1\114\1\117"+
    "\1\243\1\0\1\117\3\0\2\117\10\0\1\117\10\0"+
    "\1\117\1\0\2\114\47\0\1\241\65\0\20\117\1\240"+
    "\1\244\6\117\1\0\56\117\1\0\7\6\1\0\3\6"+
    "\1\245\3\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\2\6\1\246\16\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\17\6\1\247\1\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\6\6"+
    "\1\250\12\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\5\6\1\251\13\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\2\6\1\252\16\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\12\6\1\253\6\6"+
    "\10\0\1\6\43\0\1\254\77\0\1\255\53\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\1\6\1\256\17\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\15\6\1\257\3\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\1\260"+
    "\20\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\1\261\2\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\21\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\5\6\1\262\13\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\12\6\1\263\6\6\10\0\1\6"+
    "\1\0\7\6\1\0\5\6\1\264\1\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\1\265"+
    "\7\6\1\266\10\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\3\6\1\267\6\6\1\270\6\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\2\6\1\271"+
    "\16\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\1\272\20\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\6\1\273\1\274\16\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\1\275\2\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\1\276\20\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\1\6\1\277"+
    "\17\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\2\6\1\300\16\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\6\1\301\1\302\16\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\15\6\1\303\3\6"+
    "\10\0\1\6\1\0\7\6\1\0\5\6\1\304\1\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\21\6\10\0\1\6\1\0\7\6\1\0\1\6"+
    "\1\305\5\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\1\6\1\306\1\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\4\6\1\307\14\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\5\6"+
    "\1\310\4\6\1\311\6\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\12\6\1\312\6\6\10\0\1\6"+
    "\43\0\1\313\106\0\1\314\37\0\1\315\4\0\1\202"+
    "\1\0\1\202\26\0\1\202\55\0\1\316\1\0\1\316"+
    "\26\0\1\316\55\0\1\317\1\0\1\317\15\0\1\320"+
    "\10\0\1\317\55\0\1\321\1\0\1\321\15\0\1\320"+
    "\10\0\1\321\75\0\1\322\106\0\1\323\106\0\1\324"+
    "\106\0\1\325\106\0\1\326\106\0\1\327\106\0\1\330"+
    "\106\0\1\331\66\0\3\226\1\0\1\226\1\0\1\226"+
    "\1\0\1\77\2\226\4\100\3\0\1\226\5\0\1\332"+
    "\1\226\22\0\1\226\3\0\1\226\1\0\1\226\4\0"+
    "\1\226\1\0\1\77\15\0\3\332\1\0\1\332\1\0"+
    "\1\332\2\0\2\332\7\0\1\332\6\0\1\332\22\0"+
    "\1\332\3\0\1\332\1\0\1\332\4\0\1\332\17\0"+
    "\3\230\6\0\4\232\14\0\1\230\55\0\3\230\26\0"+
    "\1\230\55\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\1\333\20\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\1\6"+
    "\1\334\17\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\335\20\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\16\6\1\336\2\6\10\0\1\6\1\0"+
    "\1\117\1\0\1\117\6\0\1\117\5\0\4\117\1\243"+
    "\1\0\1\117\3\0\2\117\10\0\1\117\10\0\1\117"+
    "\1\0\2\117\27\0\3\117\1\0\1\117\1\0\1\117"+
    "\2\0\2\117\7\0\1\117\6\0\1\117\22\0\1\117"+
    "\3\0\1\117\1\0\1\117\4\0\1\117\17\0\7\6"+
    "\1\0\3\6\1\337\3\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\12\6\1\340\6\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\1\341"+
    "\20\6\10\0\1\6\1\0\7\6\1\0\3\6\1\342"+
    "\3\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\21\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\6\6\1\343\12\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\13\6\1\344\5\6\10\0"+
    "\1\6\34\255\1\345\52\255\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\2\6\1\346\16\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\6\6\1\347\12\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\2\6\1\350\16\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\4\6"+
    "\1\351\14\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\3\6\1\352\15\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\2\6\1\353\16\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\6\6\1\354\12\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\1\355"+
    "\2\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\5\6\1\356\1\357\12\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\1\6\1\360\17\6\10\0\1\6"+
    "\1\0\7\6\1\0\5\6\1\361\1\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\1\6"+
    "\1\362\17\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\6\6\1\363\12\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\4\6\1\364\14\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\2\6\1\365\16\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\3\6"+
    "\1\366\15\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\6\6\1\367\12\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\6\6\1\370\12\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\2\6\1\371\16\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\6\6"+
    "\1\372\12\6\10\0\1\6\1\0\7\6\1\0\3\6"+
    "\1\373\3\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\5\6\1\374\13\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\1\6\1\375\1\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\1\376"+
    "\20\6\10\0\1\6\1\0\7\6\1\0\3\6\1\377"+
    "\3\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\21\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\7\6\1\u0100\11\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\2\6\1\u0101\16\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\u0102\3\0\1\6\17\0\1\6\2\0\21\6\10\0"+
    "\1\6\1\0\7\6\1\0\3\6\1\u0103\3\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\10\0\1\6\21\0\1\320\66\0\3\332\1\0"+
    "\1\332\1\0\1\332\1\0\1\77\2\332\7\0\1\332"+
    "\6\0\1\332\22\0\1\332\3\0\1\332\1\0\1\332"+
    "\4\0\1\332\1\0\1\77\15\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\2\6\1\u0104\16\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\6\6\1\u0105\12\6\10\0\1\6"+
    "\1\0\7\6\1\0\3\6\1\u0106\3\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\u0107\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\7\6"+
    "\1\u0108\11\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\6\6\1\u0109\12\6\10\0\1\6\34\255\1\345"+
    "\17\255\1\u010a\32\255\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\3\6\1\u010b\15\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\3\6\1\u010c\15\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\12\6\1\u010d\6\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\11\6\1\u010e"+
    "\7\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\2\6\1\u010f\16\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\4\6\1\u0110\14\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\1\6\1\u0111\17\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\17\6\1\u0112"+
    "\1\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\1\u0113\20\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\3\6\1\u0114\15\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\1\6\1\u0115\17\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\11\6\1\u0116\7\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\12\6"+
    "\1\u0117\6\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\1\u0118\2\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\21\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\u0119\20\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\3\6\1\u011a\15\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\6\6\1\u011b\12\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\3\6"+
    "\1\u011c\15\6\10\0\1\6\1\0\7\6\1\0\3\6"+
    "\1\u011d\3\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\10\0\1\6\1\0\7\6"+
    "\1\0\5\6\1\u011e\1\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\12\6\1\u011f\6\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\1\u0120"+
    "\20\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\6\6\1\u0121\12\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\u0122\20\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\6\6\1\u0123\12\6\10\0\1\6"+
    "\1\0\7\6\1\0\3\6\1\u0124\3\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\6\6"+
    "\1\u0125\12\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\u0126\20\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\u0127\20\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\4\6\1\u0128\14\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\3\6\1\u0129\15\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\11\6"+
    "\1\u012a\7\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\12\6\1\u012b\6\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\13\6\1\u012c\5\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\1\u012d\2\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\21\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\1\u012e\2\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\13\6"+
    "\1\u012f\5\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\1\u0130\2\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\21\6\10\0\1\6\1\0\7\6\1\0"+
    "\1\6\1\u0131\5\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\21\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\14\6\1\u0132\4\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\2\6\1\u0133"+
    "\16\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\6\6\1\u0134\12\6\10\0\1\6\1\0\7\6\1\0"+
    "\3\6\1\u0135\3\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\21\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\4\6\1\u0136\14\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\16\6\1\u0137"+
    "\2\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\4\6\1\u0138\14\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\2\6\1\u0139\16\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\10\6\1\u013a\10\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\1\u013b\2\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\4\6"+
    "\1\u013c\14\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\5\6\1\u013d\13\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\6\6\1\u013e\12\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\1\6\1\u013f\17\6"+
    "\10\0\1\6\1\0\7\6\1\0\5\6\1\u0140\1\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\21\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\6\1\u0141\17\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\4\6\1\u0142\14\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\1\u0143\20\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\6\6\1\u0144"+
    "\12\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\2\6\1\u0145\16\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\6\6\1\u0146\12\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\2\6\1\u0147\16\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\6\6\1\u0148"+
    "\12\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\2\6\1\u0149\16\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\1\u014a\2\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\1\u014b\2\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\21\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\1\u014c\20\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\6\6\1\u014d\12\6"+
    "\10\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\6\6"+
    "\1\u014e\12\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\4\6\1\u014f\14\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\1\u0150\2\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\21\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\6\6\1\u0151\12\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\12\6\1\u0152"+
    "\6\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\2\6\1\u0153\16\6\10\0\1\6\1\0\7\6\1\0"+
    "\1\6\1\u0154\5\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\21\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\5\6\1\u0155\13\6\10\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\6\6\1\u0156"+
    "\12\6\10\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\2\6\1\u0157\16\6\10\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\13\6\1\u0158\5\6\10\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\20\6\1\u0159\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\6\6\1\u015a\12\6"+
    "\10\0\1\6\1\0\7\6\1\0\1\6\1\u015b\5\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\21\6\10\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\6\1\u015c\17\6\10\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\6\6\1\u015d\12\6\10\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\13\6\1\u015e\5\6"+
    "\10\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17395];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\12\1\1\11\3\1\1\11\2\1\2\11\4\1"+
    "\1\11\1\1\3\11\14\1\4\11\2\1\1\11\1\1"+
    "\1\0\1\1\2\11\2\0\1\1\1\11\1\1\3\0"+
    "\2\1\1\0\1\11\1\0\1\11\5\1\3\0\1\1"+
    "\1\0\7\1\12\11\1\1\1\0\1\11\30\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\11\11\13\1\1\0"+
    "\1\1\1\0\1\11\5\1\1\0\1\11\1\1\1\0"+
    "\1\11\7\1\1\11\1\0\35\1\4\11\1\0\1\11"+
    "\1\0\10\11\1\0\12\1\1\0\44\1\1\11\124\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
	return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
	return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  private long parseLong(int start, int end, int radix) {
	long result = 0;
	long digit;

	for (int i = start; i < end; i++) {
	  digit  = Character.digit(yycharat(i),radix);
	  result*= radix;
	  result+= digit;
	}

	return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2664) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.I_CONSTANT , new String(yytext()));
            }
          case 126: break;
          case 2: 
            { return symbol(sym.IDENTIFIER,yytext());
            }
          case 127: break;
          case 3: 
            { return symbol(sym.MINUS);
            }
          case 128: break;
          case 4: 
            { yybegin(CHARLITERAL);
            }
          case 129: break;
          case 5: 
            { /* just ignore it*/
            }
          case 130: break;
          case 6: 
            { return symbol(sym.DOT);
            }
          case 131: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 132: break;
          case 8: 
            { return symbol(sym.MULT);
            }
          case 133: break;
          case 9: 
            { return symbol(sym.PLUS);
            }
          case 134: break;
          case 10: 
            { return symbol(sym.LBRACK);
            }
          case 135: break;
          case 11: 
            { return symbol(sym.RBRACK);
            }
          case 136: break;
          case 12: 
            { return symbol(sym.NOT);
            }
          case 137: break;
          case 13: 
            { return symbol(sym.MOD);
            }
          case 138: break;
          case 14: 
            { return symbol(sym.AND);
            }
          case 139: break;
          case 15: 
            { return symbol(sym.EQ);
            }
          case 140: break;
          case 16: 
            { return symbol(sym.QUESTION);
            }
          case 141: break;
          case 17: 
            { return symbol(sym.XOR);
            }
          case 142: break;
          case 18: 
            { return symbol(sym.COLON);
            }
          case 143: break;
          case 19: 
            { return symbol(sym.LPAREN);
            }
          case 144: break;
          case 20: 
            { return symbol(sym.RPAREN);
            }
          case 145: break;
          case 21: 
            { return symbol(sym.OR);
            }
          case 146: break;
          case 22: 
            { return symbol(sym.DIV);
            }
          case 147: break;
          case 23: 
            { return symbol(sym.LBRACE);
            }
          case 148: break;
          case 24: 
            { return symbol(sym.RBRACE);
            }
          case 149: break;
          case 25: 
            { return symbol(sym.SEMICOLON);
            }
          case 150: break;
          case 26: 
            { return symbol(sym.COMMA);
            }
          case 151: break;
          case 27: 
            { return symbol(sym.LT);
            }
          case 152: break;
          case 28: 
            { return symbol(sym.GT);
            }
          case 153: break;
          case 29: 
            { return symbol(sym.COMP);
            }
          case 154: break;
          case 30: 
            { string.append( yytext() );
            }
          case 155: break;
          case 31: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 156: break;
          case 32: 
            { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
            }
          case 157: break;
          case 33: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 158: break;
          case 34: 
            { return symbol(sym.F_CONSTANT , new String(yytext()));
            }
          case 159: break;
          case 35: 
            { return symbol(sym.MINUSMINUS);
            }
          case 160: break;
          case 36: 
            { return symbol(sym.MINUSEQ);
            }
          case 161: break;
          case 37: 
            { return symbol(sym.C_CONSTANT , new String(yytext()));
            }
          case 162: break;
          case 38: 
            { return symbol(sym.MULTEQ);
            }
          case 163: break;
          case 39: 
            { return symbol(sym.PLUSPLUS);
            }
          case 164: break;
          case 40: 
            { return symbol(sym.PLUSEQ);
            }
          case 165: break;
          case 41: 
            { return symbol(sym.NOTEQ);
            }
          case 166: break;
          case 42: 
            { return symbol(sym.MODEQ);
            }
          case 167: break;
          case 43: 
            { return symbol(sym.ANDAND);
            }
          case 168: break;
          case 44: 
            { return symbol(sym.ANDEQ);
            }
          case 169: break;
          case 45: 
            { return symbol(sym.EQEQ);
            }
          case 170: break;
          case 46: 
            { return symbol(sym.XOREQ);
            }
          case 171: break;
          case 47: 
            { return symbol(sym.OREQ);
            }
          case 172: break;
          case 48: 
            { return symbol(sym.OROR);
            }
          case 173: break;
          case 49: 
            { return symbol(sym.DIVEQ);
            }
          case 174: break;
          case 50: 
            { return symbol(sym.IF);
            }
          case 175: break;
          case 51: 
            { return symbol(sym.DO);
            }
          case 176: break;
          case 52: 
            { return symbol(sym.LTEQ);
            }
          case 177: break;
          case 53: 
            { return symbol(sym.LSHIFT);
            }
          case 178: break;
          case 54: 
            { return symbol(sym.GTEQ);
            }
          case 179: break;
          case 55: 
            { return symbol(sym.RSHIFT);
            }
          case 180: break;
          case 56: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 181: break;
          case 57: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                        string.append( val );
            }
          case 182: break;
          case 58: 
            { string.append( '\f' );
            }
          case 183: break;
          case 59: 
            { string.append( '\\' );
            }
          case 184: break;
          case 60: 
            { string.append( '\'' );
            }
          case 185: break;
          case 61: 
            { string.append( '\n' );
            }
          case 186: break;
          case 62: 
            { string.append( '\b' );
            }
          case 187: break;
          case 63: 
            { string.append( '\"' );
            }
          case 188: break;
          case 64: 
            { string.append( '\t' );
            }
          case 189: break;
          case 65: 
            { string.append( '\r' );
            }
          case 190: break;
          case 66: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character(yytext().charAt(0)));
            }
          case 191: break;
          case 67: 
            { return symbol(sym.FOR);
            }
          case 192: break;
          case 68: 
            { return symbol(sym.NEW);
            }
          case 193: break;
          case 69: 
            { return symbol(sym.OROREQ);
            }
          case 194: break;
          case 70: 
            { return symbol(sym.TRY);
            }
          case 195: break;
          case 71: 
            { return symbol(sym.INT);
            }
          case 196: break;
          case 72: 
            { return symbol(sym.LSHIFTEQ);
            }
          case 197: break;
          case 73: 
            { return symbol(sym.RSHIFTEQ);
            }
          case 198: break;
          case 74: 
            { return symbol(sym.URSHIFT);
            }
          case 199: break;
          case 75: 
            { yybegin(YYINITIAL);
                                        int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
										return symbol(sym.CHARACTER_LITERAL, new Character((char)val));
            }
          case 200: break;
          case 76: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\f'));
            }
          case 201: break;
          case 77: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\\'));
            }
          case 202: break;
          case 78: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\''));
            }
          case 203: break;
          case 79: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\n'));
            }
          case 204: break;
          case 80: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\b'));
            }
          case 205: break;
          case 81: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\"'));
            }
          case 206: break;
          case 82: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\t'));
            }
          case 207: break;
          case 83: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\r'));
            }
          case 208: break;
          case 84: 
            { return symbol(sym.LONG);
            }
          case 209: break;
          case 85: 
            { return symbol(sym.NULL_LITERAL);
            }
          case 210: break;
          case 86: 
            { return symbol(sym.BYTE);
            }
          case 211: break;
          case 87: 
            { return symbol(sym.VOID);
            }
          case 212: break;
          case 88: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(true));
            }
          case 213: break;
          case 89: 
            { return symbol(sym.THIS);
            }
          case 214: break;
          case 90: 
            { return symbol(sym.CASE);
            }
          case 215: break;
          case 91: 
            { return symbol(sym.CHAR);
            }
          case 216: break;
          case 92: 
            { return symbol(sym.ELSE);
            }
          case 217: break;
          case 93: 
            { return symbol(sym.FLOAT);
            }
          case 218: break;
          case 94: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(false));
            }
          case 219: break;
          case 95: 
            { return symbol(sym.FINAL);
            }
          case 220: break;
          case 96: 
            { return symbol(sym.BREAK);
            }
          case 221: break;
          case 97: 
            { /* just ignore it */
            }
          case 222: break;
          case 98: 
            { return symbol(sym.SUPER);
            }
          case 223: break;
          case 99: 
            { return symbol(sym.SHORT);
            }
          case 224: break;
          case 100: 
            { return symbol(sym.THROW);
            }
          case 225: break;
          case 101: 
            { return symbol(sym.CLASS);
            }
          case 226: break;
          case 102: 
            { return symbol(sym.CATCH);
            }
          case 227: break;
          case 103: 
            { return symbol(sym.WHILE);
            }
          case 228: break;
          case 104: 
            { return symbol(sym.NATIVE);
            }
          case 229: break;
          case 105: 
            { return symbol(sym.STATIC);
            }
          case 230: break;
          case 106: 
            { return symbol(sym.SWITCH);
            }
          case 231: break;
          case 107: 
            { return symbol(sym.RETURN);
            }
          case 232: break;
          case 108: 
            { return symbol(sym.IMPORT);
            }
          case 233: break;
          case 109: 
            { return symbol(sym.DOUBLE);
            }
          case 234: break;
          case 110: 
            { return symbol(sym.PUBLIC);
            }
          case 235: break;
          case 111: 
            { return symbol(sym.FINALLY);
            }
          case 236: break;
          case 112: 
            { return symbol(sym.BOOLEAN);
            }
          case 237: break;
          case 113: 
            { return symbol(sym.EXTENDS);
            }
          case 238: break;
          case 114: 
            { return symbol(sym.DEFAULT);
            }
          case 239: break;
          case 115: 
            { return symbol(sym.PACKAGE);
            }
          case 240: break;
          case 116: 
            { return symbol(sym.PRIVATE);
            }
          case 241: break;
          case 117: 
            { return symbol(sym.ABSTRACT);
            }
          case 242: break;
          case 118: 
            { return symbol(sym.CONTINUE);
            }
          case 243: break;
          case 119: 
            { return symbol(sym.TRANSIENT);
            }
          case 244: break;
          case 120: 
            { return symbol(sym.INTERFACE);
            }
          case 245: break;
          case 121: 
            { return symbol(sym.PROTECTED);
            }
          case 246: break;
          case 122: 
            { return symbol(sym.THREADSAFE);
            }
          case 247: break;
          case 123: 
            { return symbol(sym.INSTANCEOF);
            }
          case 248: break;
          case 124: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 249: break;
          case 125: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 250: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
