/* The following code was generated by JFlex 1.6.1 */

/**
 * Lexical Specification
 *
 */
package compiler.generated;
import java_cup.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./specs/lexical.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\37\1\2\1\105\1\40\1\1\22\0\1\3\1\26\1\20"+
    "\1\0\1\0\1\27\1\30\1\21\1\35\1\36\1\22\1\23\1\100"+
    "\1\17\1\15\1\63\1\4\1\12\2\11\4\13\2\5\1\34\1\77"+
    "\1\103\1\31\1\102\1\32\1\0\1\10\1\10\1\10\1\74\1\16"+
    "\1\14\5\41\1\6\2\41\1\41\3\41\1\41\4\41\1\7\2\41"+
    "\1\24\1\64\1\25\1\33\1\41\1\0\1\54\1\62\1\57\1\65"+
    "\1\50\1\66\1\46\1\53\1\44\1\41\1\67\1\51\1\56\1\45"+
    "\1\47\1\52\1\41\1\43\1\60\1\42\1\55\1\71\1\72\1\70"+
    "\1\61\1\73\1\75\1\101\1\76\1\104\6\0\1\105\35\0\1\0"+
    "\14\0\1\0\21\0\1\0\u1f65\0\1\105\1\105\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\13\4\1\26"+
    "\1\27\1\30\2\4\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\42\1\43\1\41\2\0"+
    "\2\44\2\0\1\45\1\46\1\47\1\0\3\45\1\50"+
    "\1\46\1\0\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\0\1\60\1\61\1\62\1\63\1\64\5\4"+
    "\1\65\26\4\1\0\1\66\1\67\7\4\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\41\1\76\2\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\12\76\1\111\2\112\2\45\1\46\1\0\1\113\2\4"+
    "\1\114\3\4\1\115\2\4\1\116\27\4\1\0\3\4"+
    "\1\117\4\4\1\120\1\121\1\122\1\77\1\0\1\123"+
    "\1\0\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\112\2\45\1\4\1\135\2\4\1\136"+
    "\6\4\1\137\1\140\1\4\1\141\7\4\1\142\1\4"+
    "\1\143\7\4\1\144\1\0\5\4\1\145\1\4\1\112"+
    "\2\45\1\4\1\146\16\4\1\147\1\150\1\4\1\151"+
    "\1\152\2\4\1\153\1\4\1\154\2\4\1\155\1\156"+
    "\1\157\1\160\1\112\2\45\2\4\1\161\2\4\1\162"+
    "\1\4\1\163\4\4\1\164\2\4\1\165\1\4\1\166"+
    "\1\4\1\167\2\4\1\112\2\45\5\4\1\170\1\171"+
    "\1\4\1\172\3\4\1\173\1\174\1\175\1\112\2\45"+
    "\6\4\1\176\1\177\1\4\1\112\2\45\1\200\1\4"+
    "\1\201\2\4\1\202\1\4\1\112\2\45\1\203\1\204"+
    "\1\205\1\4\1\0\2\45\1\4\1\0\2\45\1\206"+
    "\1\0\2\45\1\0\2\45\1\0\2\45\1\0\2\45"+
    "\1\0\1\45\1\46\1\0\5\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\322\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\322\0\322\0\u02bc\0\u0302\0\322"+
    "\0\322\0\u0348\0\u038e\0\u03d4\0\u041a\0\322\0\u0460\0\322"+
    "\0\322\0\322\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\322\0\322\0\322\0\322\0\u0906\0\u094c"+
    "\0\u0992\0\322\0\u09d8\0\u0a1e\0\322\0\322\0\u0a64\0\u0aaa"+
    "\0\u0af0\0\u0b36\0\322\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\322"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\322\0\u0dac\0\u0df2\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\u0e38\0\322"+
    "\0\322\0\322\0\322\0\322\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u01ea\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a"+
    "\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a"+
    "\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a"+
    "\0\u15e0\0\322\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784"+
    "\0\u17ca\0\u1810\0\322\0\322\0\322\0\u1856\0\322\0\u189c"+
    "\0\u18e2\0\322\0\u1928\0\u196e\0\322\0\322\0\322\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\u19b4\0\u19fa\0\u1a40"+
    "\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\322"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\322\0\u1e14"+
    "\0\u1e5a\0\u01ea\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"+
    "\0\u01ea\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8"+
    "\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418"+
    "\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648"+
    "\0\u268e\0\u26d4\0\u271a\0\u2760\0\u01ea\0\u27a6\0\u27ec\0\u2832"+
    "\0\u2878\0\322\0\322\0\322\0\322\0\u19fa\0\322\0\u28be"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\322\0\322"+
    "\0\322\0\u2904\0\u294a\0\u2990\0\u29d6\0\u01ea\0\u2a1c\0\u2a62"+
    "\0\u01ea\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u01ea"+
    "\0\u01ea\0\u2c4c\0\u01ea\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa"+
    "\0\u2df0\0\u2e36\0\u01ea\0\u2e7c\0\u01ea\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u01ea\0\u30ac\0\u30f2\0\u3138"+
    "\0\u317e\0\u31c4\0\u320a\0\u01ea\0\u3250\0\u3296\0\u32dc\0\u3322"+
    "\0\u3368\0\u01ea\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c"+
    "\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c"+
    "\0\u01ea\0\u01ea\0\u3782\0\u01ea\0\u01ea\0\u37c8\0\u380e\0\u01ea"+
    "\0\u3854\0\322\0\u389a\0\u38e0\0\u3926\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u01ea\0\u3aca\0\u3b10"+
    "\0\u01ea\0\u3b56\0\u01ea\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u01ea"+
    "\0\u3cb4\0\u3cfa\0\u01ea\0\u3d40\0\u01ea\0\u3d86\0\u01ea\0\u3dcc"+
    "\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc"+
    "\0\u4042\0\u01ea\0\u01ea\0\u4088\0\u01ea\0\u40ce\0\u4114\0\u415a"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8"+
    "\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u01ea\0\u01ea\0\u4416\0\u445c"+
    "\0\u44a2\0\u44e8\0\u01ea\0\u452e\0\u01ea\0\u4574\0\u45ba\0\u01ea"+
    "\0\u4600\0\u4646\0\u468c\0\u46d2\0\u01ea\0\u01ea\0\u01ea\0\u4718"+
    "\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u01ea"+
    "\0\u4948\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32"+
    "\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4cd6\0\u4d1c"+
    "\0\u4d62\0\u4da8\0\u4dee\0\u4e34\0\u4e7a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\3\11\3\10\1\11"+
    "\1\12\1\11\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\6\1\11\1\33\1\34\1\35\1\36"+
    "\2\11\1\37\1\40\1\41\1\11\1\42\2\11\1\43"+
    "\1\44\1\11\1\45\1\46\1\4\1\47\1\50\2\11"+
    "\1\51\1\52\2\11\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\4\1\63\1\64\1\65\15\63"+
    "\1\66\6\63\1\67\34\63\1\70\21\63\1\71\1\72"+
    "\1\73\16\71\1\0\5\71\1\74\34\71\1\75\21\71"+
    "\110\0\1\6\107\0\1\76\1\77\1\100\1\101\1\0"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\31\0\1\107"+
    "\1\100\13\0\1\110\1\105\1\0\1\101\3\0\1\110"+
    "\15\0\2\10\1\100\2\0\3\10\1\105\1\106\1\107"+
    "\31\0\1\107\1\100\13\0\1\110\1\105\5\0\1\110"+
    "\14\0\12\11\1\0\1\11\22\0\22\11\2\0\10\11"+
    "\15\0\2\106\3\0\3\106\111\0\1\111\11\0\1\112"+
    "\105\0\1\113\77\0\1\114\5\0\1\115\105\0\1\116"+
    "\103\0\1\117\1\0\1\120\104\0\1\121\1\122\105\0"+
    "\1\123\105\0\1\124\57\0\12\11\1\0\1\11\22\0"+
    "\2\11\1\125\7\11\1\126\7\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\7\11\1\127\12\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\4\11\1\130"+
    "\10\11\1\131\4\11\2\0\1\11\1\132\6\11\14\0"+
    "\12\11\1\0\1\11\22\0\7\11\1\133\3\11\1\134"+
    "\1\135\5\11\2\0\10\11\14\0\12\11\1\0\1\11"+
    "\22\0\10\11\1\136\11\11\2\0\3\11\1\137\4\11"+
    "\14\0\12\11\1\0\1\11\22\0\6\11\1\140\13\11"+
    "\2\0\10\11\14\0\12\11\1\0\1\11\22\0\2\11"+
    "\1\141\10\11\1\142\1\143\5\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\21\11\1\144\2\0\10\11"+
    "\14\0\12\11\1\0\1\11\22\0\6\11\1\145\1\11"+
    "\1\146\1\11\1\147\1\150\6\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\1\11\1\151\10\11\1\152"+
    "\1\11\1\153\3\11\1\154\1\11\2\0\5\11\1\155"+
    "\2\11\14\0\12\11\1\0\1\11\22\0\2\11\1\156"+
    "\3\11\1\157\11\11\1\160\1\11\2\0\10\11\33\0"+
    "\1\161\6\0\1\162\57\0\12\11\1\0\1\11\22\0"+
    "\6\11\1\163\1\164\12\11\2\0\10\11\14\0\12\11"+
    "\1\0\1\11\22\0\3\11\1\165\2\11\1\166\1\11"+
    "\1\167\2\11\1\170\6\11\2\0\10\11\14\0\12\11"+
    "\1\0\1\11\22\0\6\11\1\171\13\11\2\0\10\11"+
    "\14\0\12\11\1\0\1\11\22\0\12\11\1\172\7\11"+
    "\2\0\10\11\42\0\1\173\47\0\1\174\35\0\1\175"+
    "\50\0\1\176\34\0\1\177\51\0\1\200\2\0\1\63"+
    "\2\0\15\63\1\0\43\63\1\0\21\63\2\0\1\65"+
    "\103\0\1\63\2\0\15\63\1\0\6\63\1\201\34\63"+
    "\1\0\21\63\1\202\2\0\1\202\1\203\4\202\2\203"+
    "\1\204\4\202\1\205\1\206\16\202\1\0\1\202\1\207"+
    "\1\210\1\202\1\211\14\202\1\212\1\202\1\213\1\202"+
    "\1\214\16\202\22\0\1\215\66\0\1\73\124\0\1\215"+
    "\5\0\1\117\56\0\1\202\2\0\1\202\1\216\4\202"+
    "\2\216\1\217\4\202\1\220\1\221\16\202\1\0\1\202"+
    "\1\222\1\223\1\202\1\224\14\202\1\225\1\202\1\226"+
    "\1\202\1\227\16\202\5\0\1\76\1\77\1\230\2\0"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\31\0\1\107"+
    "\1\230\13\0\1\110\1\105\5\0\1\110\15\0\2\77"+
    "\3\0\3\77\1\105\1\106\1\107\31\0\1\107\14\0"+
    "\1\110\1\105\5\0\1\110\15\0\1\231\1\232\2\0"+
    "\5\232\1\0\1\232\31\0\1\232\3\0\1\232\2\0"+
    "\1\232\2\0\1\232\2\0\2\232\5\0\1\232\15\0"+
    "\1\233\1\77\1\230\2\0\3\233\1\105\1\106\1\107"+
    "\31\0\1\107\1\230\13\0\1\110\1\105\5\0\1\110"+
    "\15\0\1\104\1\77\1\230\2\0\3\104\1\105\1\106"+
    "\1\107\31\0\1\107\1\230\13\0\1\110\1\105\5\0"+
    "\1\110\15\0\1\234\1\77\1\230\2\0\3\234\1\105"+
    "\1\106\1\107\31\0\1\107\1\230\13\0\1\110\1\105"+
    "\5\0\1\110\15\0\2\106\3\0\3\106\1\105\1\0"+
    "\1\107\31\0\1\107\14\0\1\110\1\105\5\0\1\110"+
    "\15\0\2\235\3\0\3\235\3\0\1\236\3\0\1\236"+
    "\62\0\106\237\3\0\12\11\1\0\1\11\22\0\13\11"+
    "\1\240\1\241\3\11\1\242\1\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\2\11\1\243\1\244\16\11"+
    "\2\0\10\11\14\0\12\11\1\0\1\11\22\0\1\11"+
    "\1\245\20\11\2\0\10\11\14\0\12\11\1\0\1\11"+
    "\22\0\1\11\1\246\15\11\1\247\2\11\2\0\10\11"+
    "\14\0\12\11\1\0\1\11\22\0\11\11\1\250\10\11"+
    "\2\0\10\11\14\0\12\11\1\0\1\11\22\0\22\11"+
    "\2\0\5\11\1\251\2\11\14\0\12\11\1\0\1\11"+
    "\22\0\1\11\1\252\20\11\2\0\10\11\14\0\12\11"+
    "\1\0\1\11\22\0\10\11\1\253\11\11\2\0\10\11"+
    "\14\0\12\11\1\0\1\11\22\0\17\11\1\254\2\11"+
    "\2\0\10\11\14\0\12\11\1\0\1\11\22\0\1\11"+
    "\1\255\20\11\2\0\10\11\14\0\12\11\1\0\1\11"+
    "\22\0\4\11\1\256\15\11\2\0\10\11\14\0\12\11"+
    "\1\0\1\11\22\0\3\11\1\257\2\11\1\260\13\11"+
    "\2\0\10\11\14\0\12\11\1\0\1\11\22\0\16\11"+
    "\1\261\3\11\2\0\10\11\14\0\12\11\1\0\1\11"+
    "\22\0\21\11\1\262\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\17\11\1\263\2\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\4\11\1\264\15\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\13\11\1\265"+
    "\6\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\13\11\1\266\6\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\1\11\1\267\15\11\1\270\2\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\13\11\1\271"+
    "\6\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\6\11\1\272\13\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\11\11\1\273\10\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\4\11\1\274\15\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\3\11\1\275"+
    "\16\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\7\11\1\276\12\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\6\11\1\277\13\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\1\11\1\300\20\11\2\0"+
    "\10\11\33\0\1\301\66\0\12\11\1\0\1\11\22\0"+
    "\14\11\1\302\5\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\22\11\2\0\1\11\1\303\6\11\14\0"+
    "\12\11\1\0\1\11\22\0\4\11\1\304\15\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\2\11\1\305"+
    "\17\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\6\11\1\306\13\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\10\11\1\307\11\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\3\11\1\310\16\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\3\11\1\311"+
    "\16\11\2\0\10\11\42\0\1\312\50\0\1\313\34\0"+
    "\1\314\54\0\1\63\2\237\15\63\1\237\43\63\1\237"+
    "\21\63\4\0\1\204\4\0\3\204\76\0\1\315\4\0"+
    "\3\315\76\0\1\316\4\0\3\316\5\0\1\317\70\0"+
    "\1\320\4\0\3\320\5\0\1\317\105\0\1\321\105\0"+
    "\1\322\105\0\1\323\105\0\1\324\105\0\1\325\105\0"+
    "\1\326\105\0\1\327\105\0\1\330\70\0\1\231\1\232"+
    "\1\331\1\0\5\232\1\0\1\232\31\0\1\232\1\331"+
    "\2\0\1\232\2\0\1\232\2\0\1\232\2\0\2\232"+
    "\5\0\1\232\15\0\2\332\1\331\1\0\5\332\1\0"+
    "\1\332\31\0\1\332\1\331\2\0\1\332\2\0\1\332"+
    "\2\0\1\332\2\0\2\332\5\0\1\332\15\0\1\333"+
    "\1\77\1\230\2\0\3\333\1\105\1\106\1\107\31\0"+
    "\1\107\1\230\13\0\1\110\1\105\5\0\1\110\15\0"+
    "\1\334\1\77\1\230\2\0\3\334\1\105\1\106\1\107"+
    "\31\0\1\107\1\230\13\0\1\110\1\105\5\0\1\110"+
    "\15\0\2\235\3\0\3\235\1\105\50\0\1\110\1\105"+
    "\5\0\1\110\15\0\2\235\3\0\3\235\75\0\12\11"+
    "\1\0\1\11\22\0\4\11\1\335\15\11\2\0\10\11"+
    "\14\0\12\11\1\0\1\11\22\0\7\11\1\336\12\11"+
    "\2\0\10\11\14\0\12\11\1\0\1\11\22\0\6\11"+
    "\1\337\1\340\12\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\17\11\1\341\2\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\14\11\1\342\5\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\7\11\1\343"+
    "\12\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\1\11\1\344\20\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\6\11\1\345\1\11\1\346\11\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\3\11\1\347"+
    "\16\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\10\11\1\350\11\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\7\11\1\351\12\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\7\11\1\352\12\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\5\11\1\353"+
    "\14\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\22\11\2\0\4\11\1\354\3\11\14\0\12\11\1\0"+
    "\1\11\22\0\1\11\1\355\20\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\22\11\2\0\2\11\1\356"+
    "\5\11\14\0\12\11\1\0\1\11\22\0\10\11\1\357"+
    "\11\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\1\11\1\360\20\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\1\11\1\361\20\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\17\11\1\362\2\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\2\11\1\363"+
    "\17\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\16\11\1\364\3\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\7\11\1\365\12\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\1\11\1\366\20\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\2\11\1\367"+
    "\17\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\7\11\1\370\12\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\16\11\1\371\3\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\1\11\1\372\20\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\13\11\1\373"+
    "\6\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\10\11\1\374\11\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\7\11\1\375\12\11\2\0\10\11\11\0"+
    "\22\301\1\376\63\301\3\0\12\11\1\0\1\11\22\0"+
    "\21\11\1\377\2\0\10\11\14\0\12\11\1\0\1\11"+
    "\22\0\13\11\1\u0100\6\11\2\0\10\11\14\0\12\11"+
    "\1\0\1\11\22\0\13\11\1\u0101\6\11\2\0\10\11"+
    "\14\0\12\11\1\0\1\11\22\0\13\11\1\u0102\6\11"+
    "\2\0\10\11\14\0\12\11\1\0\1\11\22\0\17\11"+
    "\1\u0103\2\11\2\0\10\11\14\0\12\11\1\0\1\11"+
    "\22\0\22\11\2\0\1\u0104\7\11\14\0\12\11\1\0"+
    "\1\11\22\0\10\11\1\u0105\11\11\2\0\10\11\32\0"+
    "\1\317\70\0\2\u0106\1\331\1\0\5\u0106\1\0\1\u0106"+
    "\31\0\1\u0106\1\331\2\0\1\u0106\2\0\1\u0106\2\0"+
    "\1\u0106\2\0\2\u0106\5\0\1\u0106\15\0\1\u0107\1\77"+
    "\1\230\2\0\3\u0107\1\105\1\106\1\107\31\0\1\107"+
    "\1\230\13\0\1\110\1\105\5\0\1\110\15\0\1\u0108"+
    "\1\77\1\230\2\0\3\u0108\1\105\1\106\1\107\31\0"+
    "\1\107\1\230\13\0\1\110\1\105\5\0\1\110\14\0"+
    "\12\11\1\0\1\11\22\0\17\11\1\u0109\2\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\22\11\2\0"+
    "\5\11\1\u010a\2\11\14\0\12\11\1\0\1\11\22\0"+
    "\13\11\1\u010b\6\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\2\11\1\u010c\17\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\2\11\1\u010d\17\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\13\11\1\u010e"+
    "\6\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\2\11\1\u010f\17\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\7\11\1\u0110\12\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\22\11\2\0\4\11\1\u0111"+
    "\3\11\14\0\12\11\1\0\1\11\22\0\4\11\1\u0112"+
    "\15\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\13\11\1\u0113\6\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\7\11\1\u0114\12\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\13\11\1\u0115\6\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\3\11\1\u0116"+
    "\16\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\2\11\1\u0117\17\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\3\11\1\u0118\16\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\17\11\1\u0119\2\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\12\11\1\u011a"+
    "\7\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\3\11\1\u011b\16\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\1\11\1\u011c\20\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\2\11\1\u011d\17\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\12\11\1\u011e"+
    "\7\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\16\11\1\u011f\3\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\22\11\2\0\2\11\1\u0120\5\11\14\0"+
    "\12\11\1\0\1\11\22\0\7\11\1\u0121\12\11\2\0"+
    "\10\11\11\0\22\301\1\376\40\301\1\u0122\22\301\3\0"+
    "\12\11\1\0\1\11\22\0\10\11\1\u0123\11\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\14\11\1\u0124"+
    "\5\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\10\11\1\u0125\11\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\1\11\1\u0126\20\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\7\11\1\u0127\12\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\7\11\1\u0128"+
    "\12\11\2\0\10\11\15\0\2\u0129\1\331\1\0\5\u0129"+
    "\1\0\1\u0129\31\0\1\u0129\1\331\2\0\1\u0129\2\0"+
    "\1\u0129\2\0\1\u0129\2\0\2\u0129\5\0\1\u0129\15\0"+
    "\1\u012a\1\77\1\230\2\0\3\u012a\1\105\1\106\1\107"+
    "\31\0\1\107\1\230\13\0\1\110\1\105\5\0\1\110"+
    "\15\0\1\u012b\1\77\1\230\2\0\3\u012b\1\105\1\106"+
    "\1\107\31\0\1\107\1\230\13\0\1\110\1\105\5\0"+
    "\1\110\14\0\12\11\1\0\1\11\22\0\3\11\1\u012c"+
    "\16\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\22\11\2\0\1\u012d\7\11\14\0\12\11\1\0\1\11"+
    "\22\0\4\11\1\u012e\15\11\2\0\10\11\14\0\12\11"+
    "\1\0\1\11\22\0\22\11\2\0\1\11\1\u012f\6\11"+
    "\14\0\12\11\1\0\1\11\22\0\4\11\1\u0130\15\11"+
    "\2\0\10\11\14\0\12\11\1\0\1\11\22\0\1\11"+
    "\1\u0131\20\11\2\0\10\11\14\0\12\11\1\0\1\11"+
    "\22\0\15\11\1\u0132\4\11\2\0\10\11\14\0\12\11"+
    "\1\0\1\11\22\0\7\11\1\u0133\12\11\2\0\10\11"+
    "\14\0\12\11\1\0\1\11\22\0\22\11\2\0\1\u0134"+
    "\7\11\14\0\12\11\1\0\1\11\22\0\1\11\1\u0135"+
    "\20\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\16\11\1\u0136\3\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\5\11\1\u0137\14\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\16\11\1\u0138\3\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\13\11\1\u0139"+
    "\6\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\4\11\1\u013a\15\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\16\11\1\u013b\3\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\2\11\1\u013c\17\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\12\11\1\u013d"+
    "\7\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\13\11\1\u013e\6\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\7\11\1\u013f\12\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\10\11\1\u0140\11\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\10\11\1\u0141"+
    "\11\11\2\0\10\11\15\0\2\u0142\1\331\1\0\5\u0142"+
    "\1\0\1\u0142\31\0\1\u0142\1\331\2\0\1\u0142\2\0"+
    "\1\u0142\2\0\1\u0142\2\0\2\u0142\5\0\1\u0142\15\0"+
    "\1\u0143\1\77\1\230\2\0\3\u0143\1\105\1\106\1\107"+
    "\31\0\1\107\1\230\13\0\1\110\1\105\5\0\1\110"+
    "\15\0\1\u0144\1\77\1\230\2\0\3\u0144\1\105\1\106"+
    "\1\107\31\0\1\107\1\230\13\0\1\110\1\105\5\0"+
    "\1\110\14\0\12\11\1\0\1\11\22\0\7\11\1\u0145"+
    "\12\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\17\11\1\u0146\2\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\13\11\1\u0147\6\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\16\11\1\u0148\3\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\7\11\1\u0149"+
    "\12\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\17\11\1\u014a\2\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\7\11\1\u014b\12\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\1\11\1\u014c\20\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\7\11\1\u014d"+
    "\12\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\16\11\1\u014e\3\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\14\11\1\u014f\5\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\6\11\1\u0150\13\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\4\11\1\u0151"+
    "\15\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\1\11\1\u0152\20\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\20\11\1\u0153\1\11\2\0\10\11\15\0"+
    "\2\u0154\1\331\1\0\5\u0154\1\0\1\u0154\31\0\1\u0154"+
    "\1\331\2\0\1\u0154\2\0\1\u0154\2\0\1\u0154\2\0"+
    "\2\u0154\5\0\1\u0154\15\0\1\u0155\1\77\1\230\2\0"+
    "\3\u0155\1\105\1\106\1\107\31\0\1\107\1\230\13\0"+
    "\1\110\1\105\5\0\1\110\15\0\1\u0156\1\77\1\230"+
    "\2\0\3\u0156\1\105\1\106\1\107\31\0\1\107\1\230"+
    "\13\0\1\110\1\105\5\0\1\110\14\0\12\11\1\0"+
    "\1\11\22\0\4\11\1\u0157\15\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\13\11\1\u0158\6\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\16\11\1\u0159"+
    "\3\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\7\11\1\u015a\12\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\4\11\1\u015b\15\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\7\11\1\u015c\12\11\2\0"+
    "\10\11\14\0\12\11\1\0\1\11\22\0\1\11\1\u015d"+
    "\20\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\7\11\1\u015e\12\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\4\11\1\u015f\15\11\2\0\10\11\15\0"+
    "\2\u0160\1\331\1\0\5\u0160\1\0\1\u0160\31\0\1\u0160"+
    "\1\331\2\0\1\u0160\2\0\1\u0160\2\0\1\u0160\2\0"+
    "\2\u0160\5\0\1\u0160\15\0\1\u0161\1\77\1\230\2\0"+
    "\3\u0161\1\105\1\106\1\107\31\0\1\107\1\230\13\0"+
    "\1\110\1\105\5\0\1\110\15\0\1\u0162\1\77\1\230"+
    "\2\0\3\u0162\1\105\1\106\1\107\31\0\1\107\1\230"+
    "\13\0\1\110\1\105\5\0\1\110\14\0\12\11\1\0"+
    "\1\11\22\0\1\11\1\u0163\20\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\22\11\2\0\1\11\1\u0164"+
    "\6\11\14\0\12\11\1\0\1\11\22\0\7\11\1\u0165"+
    "\12\11\2\0\10\11\14\0\12\11\1\0\1\11\22\0"+
    "\6\11\1\u0166\13\11\2\0\10\11\14\0\12\11\1\0"+
    "\1\11\22\0\1\11\1\u0167\20\11\2\0\10\11\14\0"+
    "\12\11\1\0\1\11\22\0\22\11\2\0\1\u0168\7\11"+
    "\14\0\12\11\1\0\1\11\22\0\3\11\1\u0169\16\11"+
    "\2\0\10\11\15\0\2\u016a\1\331\1\0\5\u016a\1\0"+
    "\1\u016a\31\0\1\u016a\1\331\2\0\1\u016a\2\0\1\u016a"+
    "\2\0\1\u016a\2\0\2\u016a\5\0\1\u016a\15\0\1\u016b"+
    "\1\77\1\230\2\0\3\u016b\1\105\1\106\1\107\31\0"+
    "\1\107\1\230\13\0\1\110\1\105\5\0\1\110\15\0"+
    "\1\u016c\1\77\1\230\2\0\3\u016c\1\105\1\106\1\107"+
    "\31\0\1\107\1\230\13\0\1\110\1\105\5\0\1\110"+
    "\14\0\12\11\1\0\1\11\22\0\7\11\1\u016d\12\11"+
    "\2\0\10\11\14\0\12\11\1\0\1\11\22\0\22\11"+
    "\2\0\1\11\1\u016e\6\11\14\0\12\11\1\0\1\11"+
    "\22\0\17\11\1\u016f\2\11\2\0\10\11\14\0\12\11"+
    "\1\0\1\11\22\0\22\11\2\0\6\11\1\u0170\1\11"+
    "\15\0\2\u0171\1\331\1\0\5\u0171\1\0\1\u0171\31\0"+
    "\1\u0171\1\331\2\0\1\u0171\2\0\1\u0171\2\0\1\u0171"+
    "\2\0\2\u0171\5\0\1\u0171\15\0\1\u0172\1\77\1\230"+
    "\2\0\3\u0172\1\105\1\106\1\107\31\0\1\107\1\230"+
    "\13\0\1\110\1\105\5\0\1\110\15\0\1\u0173\1\77"+
    "\1\230\2\0\3\u0173\1\105\1\106\1\107\31\0\1\107"+
    "\1\230\13\0\1\110\1\105\5\0\1\110\14\0\12\11"+
    "\1\0\1\11\22\0\7\11\1\u0174\12\11\2\0\10\11"+
    "\15\0\2\u0175\1\331\1\0\5\u0175\1\0\1\u0175\31\0"+
    "\1\u0175\1\331\2\0\1\u0175\2\0\1\u0175\2\0\1\u0175"+
    "\2\0\2\u0175\5\0\1\u0175\15\0\1\u0176\1\77\1\230"+
    "\2\0\3\u0176\1\105\1\106\1\107\31\0\1\107\1\230"+
    "\13\0\1\110\1\105\5\0\1\110\15\0\1\u0177\1\77"+
    "\1\230\2\0\3\u0177\1\105\1\106\1\107\31\0\1\107"+
    "\1\230\13\0\1\110\1\105\5\0\1\110\14\0\12\11"+
    "\1\0\1\11\22\0\22\11\2\0\1\u0178\7\11\15\0"+
    "\2\u0179\1\331\1\0\5\u0179\1\0\1\u0179\31\0\1\u0179"+
    "\1\331\2\0\1\u0179\2\0\1\u0179\2\0\1\u0179\2\0"+
    "\2\u0179\5\0\1\u0179\15\0\1\u017a\1\77\1\230\2\0"+
    "\3\u017a\1\105\1\106\1\107\31\0\1\107\1\230\13\0"+
    "\1\110\1\105\5\0\1\110\15\0\1\u017b\1\77\1\230"+
    "\2\0\3\u017b\1\105\1\106\1\107\31\0\1\107\1\230"+
    "\13\0\1\110\1\105\5\0\1\110\15\0\2\u017c\1\331"+
    "\1\0\5\u017c\1\0\1\u017c\31\0\1\u017c\1\331\2\0"+
    "\1\u017c\2\0\1\u017c\2\0\1\u017c\2\0\2\u017c\5\0"+
    "\1\u017c\15\0\1\u017d\1\77\1\230\2\0\3\u017d\1\105"+
    "\1\106\1\107\31\0\1\107\1\230\13\0\1\110\1\105"+
    "\5\0\1\110\15\0\1\u017e\1\77\1\230\2\0\3\u017e"+
    "\1\105\1\106\1\107\31\0\1\107\1\230\13\0\1\110"+
    "\1\105\5\0\1\110\15\0\2\u017f\1\331\1\0\5\u017f"+
    "\1\0\1\u017f\31\0\1\u017f\1\331\2\0\1\u017f\2\0"+
    "\1\u017f\2\0\1\u017f\2\0\2\u017f\5\0\1\u017f\15\0"+
    "\1\u0180\1\77\1\230\2\0\3\u0180\1\105\1\106\1\107"+
    "\31\0\1\107\1\230\13\0\1\110\1\105\5\0\1\110"+
    "\15\0\1\u0181\1\77\1\230\2\0\3\u0181\1\105\1\106"+
    "\1\107\31\0\1\107\1\230\13\0\1\110\1\105\5\0"+
    "\1\110\15\0\2\u0182\1\331\1\0\5\u0182\1\0\1\u0182"+
    "\31\0\1\u0182\1\331\2\0\1\u0182\2\0\1\u0182\2\0"+
    "\1\u0182\2\0\2\u0182\5\0\1\u0182\15\0\1\u0183\1\77"+
    "\1\230\2\0\3\u0183\1\105\1\106\1\107\31\0\1\107"+
    "\1\230\13\0\1\110\1\105\5\0\1\110\15\0\1\u0184"+
    "\1\77\1\230\2\0\3\u0184\1\105\1\106\1\107\31\0"+
    "\1\107\1\230\13\0\1\110\1\105\5\0\1\110\15\0"+
    "\2\u0185\1\331\1\0\5\u0185\1\0\1\u0185\31\0\1\u0185"+
    "\1\331\2\0\1\u0185\2\0\1\u0185\2\0\1\u0185\2\0"+
    "\2\u0185\5\0\1\u0185\15\0\1\u0186\1\77\1\230\2\0"+
    "\3\u0186\1\105\1\106\1\107\31\0\1\107\1\230\13\0"+
    "\1\110\1\105\5\0\1\110\15\0\1\u0187\1\77\1\230"+
    "\2\0\3\u0187\1\105\1\106\1\107\31\0\1\107\1\230"+
    "\13\0\1\110\1\105\5\0\1\110\15\0\2\u0188\1\331"+
    "\1\0\5\u0188\1\0\1\u0188\31\0\1\u0188\1\331\2\0"+
    "\1\u0188\2\0\1\u0188\2\0\1\u0188\2\0\2\u0188\5\0"+
    "\1\u0188\15\0\1\u0189\1\77\1\230\2\0\3\u0189\1\105"+
    "\1\106\1\107\31\0\1\107\1\230\13\0\1\110\1\105"+
    "\5\0\1\110\17\0\1\331\42\0\1\331\40\0\1\u018a"+
    "\1\77\1\230\2\0\3\u018a\1\105\1\106\1\107\31\0"+
    "\1\107\1\230\13\0\1\110\1\105\5\0\1\110\15\0"+
    "\1\u018b\1\77\1\230\2\0\3\u018b\1\105\1\106\1\107"+
    "\31\0\1\107\1\230\13\0\1\110\1\105\5\0\1\110"+
    "\15\0\1\u018c\1\77\1\230\2\0\3\u018c\1\105\1\106"+
    "\1\107\31\0\1\107\1\230\13\0\1\110\1\105\5\0"+
    "\1\110\15\0\1\u018d\1\77\1\230\2\0\3\u018d\1\105"+
    "\1\106\1\107\31\0\1\107\1\230\13\0\1\110\1\105"+
    "\5\0\1\110\15\0\2\77\1\230\2\0\3\77\1\105"+
    "\1\106\1\107\31\0\1\107\1\230\13\0\1\110\1\105"+
    "\5\0\1\110\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\5\1\2\11\2\1\2\11"+
    "\4\1\1\11\1\1\3\11\20\1\4\11\3\1\1\11"+
    "\2\1\2\11\1\1\2\0\1\1\1\11\2\0\2\1"+
    "\1\11\1\0\3\1\1\11\1\1\1\0\7\11\1\0"+
    "\5\11\34\1\1\0\1\11\10\1\3\11\1\1\1\11"+
    "\2\1\1\11\2\1\11\11\12\1\1\11\5\1\1\0"+
    "\1\11\41\1\1\0\10\1\4\11\1\0\1\11\1\0"+
    "\11\11\44\1\1\0\43\1\1\11\116\1\1\0\3\1"+
    "\1\0\3\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  StringBuffer string = new StringBuffer();
  public static String curLine;

  /**
   * Factory method for creating Symbols for a given type.
   * @param type The type of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn);
  }

  /**
   * Factory method for creating Symbols for a given type and its value.
   * @param type The type of this symbol
   * @param value The value of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type, Object value) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn, value);
  }

  /**
   * Reports an error occured in a given line.
   * @param line The bad line
   * @param msg Additional information about the error
   */
  private void reportError(int line, String msg) {
      throw new RuntimeException("Lexical error at line #" + line + ": " + msg);
  }

  private long parseLong(int start, int end, int radix) {
  long result = 0;
  long digit;

  for (int i = start; i < end; i++) {
    digit  = Character.digit(yycharat(i),radix);
    result*= radix;
    result+= digit;
  }

  return result;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { reportError(yyline+1, "Illegal character \"" + yytext() + "\"");
            }
          case 135: break;
          case 2: 
            { /* just ignore it*/
            }
          case 136: break;
          case 3: 
            { return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
            }
          case 137: break;
          case 4: 
            { return symbol(sym.IDENTIFIER, new String(yytext()));
            }
          case 138: break;
          case 5: 
            { return symbol(sym.DOT);
            }
          case 139: break;
          case 6: 
            { return symbol(sym.MINUS);
            }
          case 140: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 141: break;
          case 8: 
            { yybegin(CHARLITERAL);
            }
          case 142: break;
          case 9: 
            { return symbol(sym.MULT);
            }
          case 143: break;
          case 10: 
            { return symbol(sym.PLUS);
            }
          case 144: break;
          case 11: 
            { return symbol(sym.LBRACK);
            }
          case 145: break;
          case 12: 
            { return symbol(sym.RBRACK);
            }
          case 146: break;
          case 13: 
            { return symbol(sym.NOT);
            }
          case 147: break;
          case 14: 
            { return symbol(sym.MOD);
            }
          case 148: break;
          case 15: 
            { return symbol(sym.AND);
            }
          case 149: break;
          case 16: 
            { return symbol(sym.ASSIGNMENT, new String(yytext()));
            }
          case 150: break;
          case 17: 
            { return symbol(sym.QUESTION);
            }
          case 151: break;
          case 18: 
            { return symbol(sym.XOR);
            }
          case 152: break;
          case 19: 
            { return symbol(sym.COLON);
            }
          case 153: break;
          case 20: 
            { return symbol(sym.LPAREN);
            }
          case 154: break;
          case 21: 
            { return symbol(sym.RPAREN);
            }
          case 155: break;
          case 22: 
            { return symbol(sym.DIV);
            }
          case 156: break;
          case 23: 
            { return symbol(sym.D);
            }
          case 157: break;
          case 24: 
            { return symbol(sym.F);
            }
          case 158: break;
          case 25: 
            { return symbol(sym.LBRACE);
            }
          case 159: break;
          case 26: 
            { return symbol(sym.RBRACE);
            }
          case 160: break;
          case 27: 
            { return symbol(sym.SEMICOLON);
            }
          case 161: break;
          case 28: 
            { return symbol(sym.COMMA);
            }
          case 162: break;
          case 29: 
            { return symbol(sym.OR);
            }
          case 163: break;
          case 30: 
            { return symbol(sym.GT);
            }
          case 164: break;
          case 31: 
            { return symbol(sym.LT);
            }
          case 165: break;
          case 32: 
            { return symbol(sym.NEG_BINARY);
            }
          case 166: break;
          case 33: 
            { string.append( yytext() );
            }
          case 167: break;
          case 34: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 168: break;
          case 35: 
            { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
            }
          case 169: break;
          case 36: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 170: break;
          case 37: 
            { return symbol(sym.INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
            }
          case 171: break;
          case 38: 
            { return symbol(sym.FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 172: break;
          case 39: 
            { return symbol(sym.INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 173: break;
          case 40: 
            { return symbol(sym.FLOATING_POINT_LITERAL, new String(yytext()));
            }
          case 174: break;
          case 41: 
            { return symbol(sym.FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 175: break;
          case 42: 
            { return symbol(sym.AUTODECRM);
            }
          case 176: break;
          case 43: 
            { return symbol(sym.MINUSASSIGN, new String(yytext()));
            }
          case 177: break;
          case 44: 
            { return symbol(sym.MULTASSIGN);
            }
          case 178: break;
          case 45: 
            { return symbol(sym.AUTOINCRM);
            }
          case 179: break;
          case 46: 
            { return symbol(sym.PLUSASSIGN, new String(yytext()));
            }
          case 180: break;
          case 47: 
            { return symbol(sym.NOTEQ);
            }
          case 181: break;
          case 48: 
            { return symbol(sym.MODASSIGN);
            }
          case 182: break;
          case 49: 
            { return symbol(sym.ANDAND);
            }
          case 183: break;
          case 50: 
            { return symbol(sym.ANDASSIGN);
            }
          case 184: break;
          case 51: 
            { return symbol(sym.EQEQ);
            }
          case 185: break;
          case 52: 
            { return symbol(sym.XORASSIGN);
            }
          case 186: break;
          case 53: 
            { return symbol(sym.IF);
            }
          case 187: break;
          case 54: 
            { return symbol(sym.DIVASSIGN);
            }
          case 188: break;
          case 55: 
            { return symbol(sym.DO);
            }
          case 189: break;
          case 56: 
            { return symbol(sym.ORASSIGN);
            }
          case 190: break;
          case 57: 
            { return symbol(sym.OROR);
            }
          case 191: break;
          case 58: 
            { return symbol(sym.GTEQ);
            }
          case 192: break;
          case 59: 
            { return symbol(sym.RSHIFT);
            }
          case 193: break;
          case 60: 
            { return symbol(sym.LTEQ);
            }
          case 194: break;
          case 61: 
            { return symbol(sym.LSHIFT);
            }
          case 195: break;
          case 62: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 196: break;
          case 63: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 197: break;
          case 64: 
            { string.append( '\"' );
            }
          case 198: break;
          case 65: 
            { string.append( '\'' );
            }
          case 199: break;
          case 66: 
            { string.append( '\t' );
            }
          case 200: break;
          case 67: 
            { string.append( '\r' );
            }
          case 201: break;
          case 68: 
            { string.append( '\n' );
            }
          case 202: break;
          case 69: 
            { string.append( '\b' );
            }
          case 203: break;
          case 70: 
            { string.append( '\\' );
            }
          case 204: break;
          case 71: 
            { string.append( '\f' );
            }
          case 205: break;
          case 72: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character(yytext().charAt(0)));
            }
          case 206: break;
          case 73: 
            { return symbol(sym.INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
          case 207: break;
          case 74: 
            { return symbol(sym.INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
            }
          case 208: break;
          case 75: 
            { throw new Error("Illegal character <"+yytext()+">");
            }
          case 209: break;
          case 76: 
            { return symbol(sym.TRY);
            }
          case 210: break;
          case 77: 
            { return symbol(sym.INT);
            }
          case 211: break;
          case 78: 
            { return symbol(sym.NEW);
            }
          case 212: break;
          case 79: 
            { return symbol(sym.FOR);
            }
          case 213: break;
          case 80: 
            { return symbol(sym.RSHIFTASSIGN, new String(yytext()));
            }
          case 214: break;
          case 81: 
            { return symbol(sym.URSHIFT);
            }
          case 215: break;
          case 82: 
            { return symbol(sym.LSHIFTASSIGN, new String(yytext()));
            }
          case 216: break;
          case 83: 
            { yybegin(YYINITIAL);
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(sym.CHARACTER_LITERAL, new Character((char)val));
            }
          case 217: break;
          case 84: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\"'));
            }
          case 218: break;
          case 85: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\''));
            }
          case 219: break;
          case 86: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\t'));
            }
          case 220: break;
          case 87: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\r'));
            }
          case 221: break;
          case 88: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\n'));
            }
          case 222: break;
          case 89: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\b'));
            }
          case 223: break;
          case 90: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\\'));
            }
          case 224: break;
          case 91: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\f'));
            }
          case 225: break;
          case 92: 
            { return symbol(sym.INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
          case 226: break;
          case 93: 
            { return symbol(sym.TRUE);
            }
          case 227: break;
          case 94: 
            { return symbol(sym.THIS);
            }
          case 228: break;
          case 95: 
            { return symbol(sym.NULL);
            }
          case 229: break;
          case 96: 
            { return symbol(sym.ELSE);
            }
          case 230: break;
          case 97: 
            { return symbol(sym.LONG);
            }
          case 231: break;
          case 98: 
            { return symbol(sym.CHAR);
            }
          case 232: break;
          case 99: 
            { return symbol(sym.CASE);
            }
          case 233: break;
          case 100: 
            { return symbol(sym.BYTE);
            }
          case 234: break;
          case 101: 
            { return symbol(sym.VOID);
            }
          case 235: break;
          case 102: 
            { return symbol(sym.THROW);
            }
          case 236: break;
          case 103: 
            { return symbol(sym.CLASS);
            }
          case 237: break;
          case 104: 
            { return symbol(sym.CATCH);
            }
          case 238: break;
          case 105: 
            { return symbol(sym.SHORT);
            }
          case 239: break;
          case 106: 
            { return symbol(sym.SUPER);
            }
          case 240: break;
          case 107: 
            { return symbol(sym.BREAK);
            }
          case 241: break;
          case 108: 
            { /* just ignore it */
            }
          case 242: break;
          case 109: 
            { return symbol(sym.FINAL);
            }
          case 243: break;
          case 110: 
            { return symbol(sym.FLOAT);
            }
          case 244: break;
          case 111: 
            { return symbol(sym.FALSE);
            }
          case 245: break;
          case 112: 
            { return symbol(sym.WHILE);
            }
          case 246: break;
          case 113: 
            { return symbol(sym.RETURN);
            }
          case 247: break;
          case 114: 
            { return symbol(sym.IMPORT);
            }
          case 248: break;
          case 115: 
            { return symbol(sym.NATIVE);
            }
          case 249: break;
          case 116: 
            { return symbol(sym.PUBLIC);
            }
          case 250: break;
          case 117: 
            { return symbol(sym.STATIC);
            }
          case 251: break;
          case 118: 
            { return symbol(sym.SWITCH);
            }
          case 252: break;
          case 119: 
            { return symbol(sym.DOUBLE);
            }
          case 253: break;
          case 120: 
            { return symbol(sym.EXTENDS);
            }
          case 254: break;
          case 121: 
            { return symbol(sym.PRIVATE);
            }
          case 255: break;
          case 122: 
            { return symbol(sym.PACKAGE);
            }
          case 256: break;
          case 123: 
            { return symbol(sym.BOOLEAN);
            }
          case 257: break;
          case 124: 
            { return symbol(sym.DEFAULT);
            }
          case 258: break;
          case 125: 
            { return symbol(sym.FINALLY);
            }
          case 259: break;
          case 126: 
            { return symbol(sym.ABSTRACT);
            }
          case 260: break;
          case 127: 
            { return symbol(sym.CONTINUE);
            }
          case 261: break;
          case 128: 
            { return symbol(sym.TRANSIENT);
            }
          case 262: break;
          case 129: 
            { return symbol(sym.INTERFACE);
            }
          case 263: break;
          case 130: 
            { return symbol(sym.PROTECTED);
            }
          case 264: break;
          case 131: 
            { return symbol(sym.THREADSAFE);
            }
          case 265: break;
          case 132: 
            { return symbol(sym.INSTANCEOF);
            }
          case 266: break;
          case 133: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 267: break;
          case 134: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 268: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
