/* The following code was generated by JFlex 1.6.1 */

/**
 * Lexical Specification
 *
 */
package compiler.analysis.generated;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./specs/lexical.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\37\1\11\1\0\1\40\1\10\22\0\1\12\1\23\1\15"+
    "\1\26\1\26\1\27\1\30\1\16\1\35\1\36\1\17\1\20\1\74"+
    "\1\3\1\14\1\52\1\13\11\1\1\34\1\73\1\77\1\31\1\76"+
    "\1\32\1\26\2\2\1\47\1\2\1\2\1\2\5\2\1\6\6\2"+
    "\1\41\1\2\1\6\5\2\1\21\1\0\1\22\1\33\1\2\1\0"+
    "\1\53\1\54\1\56\1\62\1\51\1\4\1\46\1\61\1\44\1\2"+
    "\1\57\1\5\1\64\1\45\1\50\1\65\1\2\1\43\1\55\1\42"+
    "\1\7\1\66\1\67\1\63\1\60\1\70\1\71\1\75\1\72\1\100"+
    "\44\0\1\25\14\0\1\25\21\0\1\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff4d\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\3\2\5\1\2"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\5\3\1\25\10\3\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\0\1\37\1\40\5\3"+
    "\1\36\6\0\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\3\3\1\52\7\3\1\0\1\53"+
    "\15\3\1\54\6\3\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\2\63\2\3\1\64\2\3\3\0\2\3\1\65"+
    "\3\3\1\66\3\3\1\67\3\3\1\0\26\3\1\70"+
    "\1\71\1\72\3\3\1\73\3\0\1\74\3\3\1\75"+
    "\5\3\1\76\1\3\1\77\1\3\1\0\3\3\1\100"+
    "\10\3\1\101\1\102\6\3\1\103\1\3\1\104\1\105"+
    "\1\106\2\0\1\3\1\107\10\3\1\110\1\3\1\111"+
    "\1\3\1\112\2\3\1\113\1\3\1\114\1\3\1\115"+
    "\6\3\1\116\1\3\2\0\2\3\1\117\3\3\1\120"+
    "\1\121\3\3\1\122\1\3\1\123\1\3\1\124\1\3"+
    "\1\125\3\3\1\126\2\0\5\3\1\127\1\3\1\130"+
    "\2\3\1\131\1\132\1\3\1\133\2\0\5\3\1\134"+
    "\1\3\1\135\1\3\2\0\1\136\1\3\1\137\3\3"+
    "\1\140\2\0\1\141\1\142\1\143\1\3\2\0\1\3"+
    "\2\0\1\144\5\0\1\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\101\0\u0208\0\101\0\u0249\0\u0249\0\u028a\0\u02cb\0\101"+
    "\0\101\0\u030c\0\u034d\0\u038e\0\u03cf\0\101\0\u0410\0\101"+
    "\0\101\0\101\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e"+
    "\0\101\0\101\0\101\0\101\0\u07df\0\u0820\0\u0861\0\101"+
    "\0\u08a2\0\u08e3\0\101\0\101\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\u0c30\0\u0c71\0\u0cb2\0\303\0\u0cf3\0\u0d34\0\u0d75"+
    "\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\101\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144"+
    "\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c"+
    "\0\u138d\0\u13ce\0\101\0\101\0\101\0\u140f\0\101\0\u1450"+
    "\0\u1491\0\101\0\u14d2\0\u1513\0\303\0\u1554\0\u1595\0\u15d6"+
    "\0\u1617\0\u1658\0\u1699\0\u16da\0\303\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\303\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74"+
    "\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\101"+
    "\0\101\0\101\0\u1f7c\0\u1fbd\0\u1ffe\0\303\0\u203f\0\u2080"+
    "\0\u20c1\0\303\0\u2102\0\u2143\0\u2184\0\303\0\u21c5\0\u2206"+
    "\0\u2247\0\u2288\0\u22c9\0\303\0\u230a\0\303\0\u234b\0\u238c"+
    "\0\u23cd\0\u240e\0\u244f\0\303\0\u2490\0\u24d1\0\u2512\0\u2553"+
    "\0\u2594\0\u25d5\0\u2616\0\u2657\0\303\0\303\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u279c\0\u27dd\0\303\0\u281e\0\303\0\u285f"+
    "\0\303\0\u28a0\0\u28e1\0\u2922\0\303\0\u2963\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\101\0\u2b6b\0\303"+
    "\0\u2bac\0\303\0\u2bed\0\u2c2e\0\303\0\u2c6f\0\303\0\u2cb0"+
    "\0\303\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\303"+
    "\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\303\0\u2fbc\0\u2ffd"+
    "\0\u303e\0\303\0\303\0\u307f\0\u30c0\0\u3101\0\303\0\u3142"+
    "\0\303\0\u3183\0\303\0\u31c4\0\303\0\u3205\0\u3246\0\u3287"+
    "\0\303\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e"+
    "\0\303\0\u348f\0\303\0\u34d0\0\u3511\0\303\0\303\0\u3552"+
    "\0\303\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719"+
    "\0\303\0\u375a\0\303\0\u379b\0\u37dc\0\u381d\0\303\0\u385e"+
    "\0\303\0\u389f\0\u38e0\0\u3921\0\303\0\u3962\0\u39a3\0\303"+
    "\0\303\0\303\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29"+
    "\0\303\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\101";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\4\1\10"+
    "\2\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\3\2\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\11\1\4\1\33\1\34\1\35"+
    "\1\36\3\4\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\3\4\1\45\2\4\1\46\1\47\1\50\1\4\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\102\0"+
    "\1\3\3\0\3\61\3\0\1\3\1\62\65\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\16\4"+
    "\13\0\1\63\25\0\1\64\50\0\2\4\1\0\1\4"+
    "\1\65\2\4\2\0\2\4\25\0\3\4\1\66\3\4"+
    "\1\67\1\4\1\0\1\70\15\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\7\4\1\71\1\4\1\0"+
    "\16\4\21\0\1\11\70\0\1\72\3\0\3\61\3\0"+
    "\1\72\1\62\65\0\2\73\1\74\4\73\1\75\1\76"+
    "\2\73\3\0\5\74\1\77\1\0\11\74\2\0\1\100"+
    "\10\73\1\0\16\73\41\0\1\101\67\0\1\102\10\0"+
    "\1\103\100\0\1\104\100\0\1\105\77\0\1\106\1\107"+
    "\100\0\1\110\100\0\1\111\50\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\2\4\1\112\6\4\1\0\6\4"+
    "\1\113\7\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\10\4\1\114\1\0\16\4\11\0\2\4\1\0"+
    "\1\115\3\4\2\0\2\4\25\0\4\4\1\116\4\4"+
    "\1\0\11\4\1\117\4\4\11\0\2\4\1\0\3\4"+
    "\1\120\2\0\2\4\25\0\10\4\1\121\1\0\1\122"+
    "\15\4\11\0\2\4\1\0\1\4\1\123\2\4\2\0"+
    "\2\4\25\0\11\4\1\0\10\4\1\124\5\4\27\0"+
    "\1\125\11\0\1\126\50\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\11\4\1\0\1\4\1\127\14\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\2\4\1\130"+
    "\4\4\1\131\1\4\1\0\5\4\1\132\10\4\11\0"+
    "\2\4\1\0\3\4\1\133\2\0\2\4\25\0\1\4"+
    "\1\134\7\4\1\0\5\4\1\135\1\136\5\4\1\137"+
    "\1\4\11\0\2\4\1\0\1\4\1\140\2\4\2\0"+
    "\2\4\25\0\7\4\1\141\1\4\1\0\1\142\5\4"+
    "\1\143\7\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\7\4\1\144\1\145\1\0\16\4\11\0\2\4"+
    "\1\0\3\4\1\146\2\0\2\4\25\0\2\4\1\147"+
    "\6\4\1\0\1\150\15\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\7\4\1\151\1\4\1\0\16\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\11\4"+
    "\1\0\6\4\1\152\7\4\41\0\1\153\43\0\1\154"+
    "\34\0\1\155\44\0\1\156\33\0\1\157\45\0\1\160"+
    "\6\0\3\61\72\0\1\161\11\0\1\162\66\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\7\4\1\163\1\4"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\4\4\1\164\4\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\2\4\1\165\6\4"+
    "\1\0\16\4\11\0\2\4\1\0\1\4\1\166\2\4"+
    "\2\0\2\4\25\0\11\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\4\4\1\167\4\4"+
    "\1\0\16\4\11\0\1\72\3\0\3\61\3\0\1\72"+
    "\66\0\2\73\1\0\4\73\2\0\2\73\25\0\1\100"+
    "\10\73\1\0\16\73\13\0\1\74\13\0\5\74\1\77"+
    "\1\0\11\74\2\0\1\170\47\0\1\75\1\171\27\0"+
    "\1\170\47\0\1\75\1\76\27\0\1\170\64\0\1\74"+
    "\54\0\2\73\1\0\4\73\2\0\2\73\25\0\1\100"+
    "\1\172\7\73\1\0\16\73\11\0\2\4\1\0\3\4"+
    "\1\173\2\0\2\4\25\0\11\4\1\0\1\174\4\4"+
    "\1\175\10\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\2\4\1\176\1\177\5\4\1\0\16\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\1\4\1\200"+
    "\7\4\1\0\16\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\1\4\1\201\7\4\1\0\2\4\1\202"+
    "\13\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\12\4\1\203\3\4\11\0\2\4\1\0"+
    "\1\4\1\204\2\4\2\0\2\4\25\0\11\4\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\14\4\1\205\1\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\1\4\1\206\7\4\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\2\4\1\207\13\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\1\4\1\210\7\4\1\0"+
    "\16\4\27\0\1\211\62\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\11\4\1\0\2\4\1\212\13\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\10\4\1\213"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\7\4\1\214\1\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\1\4\1\215\7\4"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\11\4\1\0\12\4\1\216\3\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\1\217"+
    "\15\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\4\4\1\220\4\4\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\7\4\1\221\1\4\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\3\4\1\222\5\4\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\11\4\1\0\1\223\15\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\4\4"+
    "\1\224\4\4\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\1\4\1\225\7\4\1\0\2\4"+
    "\1\226\13\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\11\4\1\0\1\227\15\4\11\0\2\4\1\0"+
    "\3\4\1\230\2\0\2\4\25\0\11\4\1\0\16\4"+
    "\11\0\2\4\1\0\1\231\3\4\2\0\2\4\25\0"+
    "\11\4\1\0\16\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\11\4\1\0\1\4\1\232\14\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\3\4\1\233"+
    "\3\4\1\234\1\4\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\11\4\1\0\3\4\1\235"+
    "\12\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\3\4\1\236\5\4\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\3\4\1\237\5\4\1\0"+
    "\16\4\41\0\1\240\44\0\1\241\33\0\1\242\50\0"+
    "\1\161\11\0\1\161\66\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\11\4\1\0\1\243\15\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\1\244"+
    "\15\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\2\4\1\245\13\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\5\4\1\246\3\4\1\0"+
    "\16\4\52\0\1\247\46\0\1\75\1\76\25\0\1\250"+
    "\1\0\1\170\40\0\2\73\1\0\4\73\2\0\2\73"+
    "\25\0\1\100\1\73\1\251\6\73\1\0\16\73\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\10\4\1\252"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\4\4\1\253\4\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\7\4\1\254\1\255"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\11\4\1\0\2\4\1\256\13\4\11\0\2\4"+
    "\1\0\3\4\1\257\2\0\2\4\25\0\11\4\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\10\4\1\260\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\1\4\1\261\7\4\1\0\16\4"+
    "\11\0\2\4\1\0\1\4\1\262\2\4\2\0\2\4"+
    "\25\0\7\4\1\263\1\4\1\0\16\4\11\0\2\4"+
    "\1\0\1\4\1\264\2\4\2\0\2\4\25\0\11\4"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\3\4\1\265\5\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\10\4\1\266\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\10\4\1\267\1\0\16\4\10\0\17\211\1\270\61\211"+
    "\1\0\2\4\1\0\4\4\2\0\2\4\25\0\1\4"+
    "\1\271\7\4\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\11\4\1\0\1\272\15\4\11\0"+
    "\2\4\1\0\1\4\1\273\2\4\2\0\2\4\25\0"+
    "\11\4\1\0\16\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\10\4\1\274\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\10\4\1\275\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\1\4\1\276\7\4\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\11\4\1\0\3\4\1\277"+
    "\12\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\2\4\1\300\6\4\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\1\4\1\301\7\4\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\2\4\1\302\13\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\1\4\1\303\7\4\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\3\4\1\304\12\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\10\4\1\305\1\0\16\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\2\4"+
    "\1\306\6\4\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\11\4\1\0\1\4\1\307\14\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\11\4"+
    "\1\0\1\310\15\4\11\0\2\4\1\0\1\4\1\311"+
    "\2\4\2\0\2\4\25\0\11\4\1\0\16\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\11\4\1\0"+
    "\13\4\1\312\2\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\1\4\1\313\7\4\1\0\16\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\11\4\1\0"+
    "\4\4\1\314\11\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\11\4\1\0\7\4\1\315\6\4\11\0"+
    "\2\4\1\0\1\4\1\316\2\4\2\0\2\4\25\0"+
    "\11\4\1\0\16\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\1\4\1\317\7\4\1\0\16\4\11\0"+
    "\2\4\1\0\1\4\1\320\2\4\2\0\2\4\25\0"+
    "\11\4\1\0\16\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\10\4\1\321\1\0\16\4\53\0\1\322"+
    "\75\0\1\76\41\0\2\73\1\0\4\73\2\0\2\73"+
    "\25\0\1\100\2\73\1\323\5\73\1\0\16\73\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\11\4\1\0"+
    "\2\4\1\324\13\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\11\4\1\0\14\4\1\325\1\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\11\4\1\0"+
    "\1\326\15\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\2\4\1\327\6\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\2\4\1\330\6\4"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\11\4\1\0\1\331\15\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\10\4\1\332\1\0\16\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\2\4"+
    "\1\333\6\4\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\11\4\1\0\13\4\1\334\2\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\4\4"+
    "\1\335\4\4\1\0\16\4\10\0\17\211\1\270\32\211"+
    "\1\336\26\211\1\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\2\4\1\337\6\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\4\4"+
    "\1\340\11\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\10\4\1\341\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\2\4\1\342\6\4\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\3\4\1\343\5\4\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\11\4\1\0\6\4\1\344"+
    "\7\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\1\4\1\345\7\4\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\11\4\1\0\3\4\1\346"+
    "\12\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\2\4\1\347\13\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\3\4\1\350\5\4\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\6\4\1\351\7\4\11\0\2\4\1\0"+
    "\1\4\1\352\2\4\2\0\2\4\25\0\11\4\1\0"+
    "\16\4\11\0\2\4\1\0\3\4\1\353\2\0\2\4"+
    "\25\0\11\4\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\3\4\1\354\5\4\1\0\16\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\11\4"+
    "\1\0\1\355\15\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\10\4\1\356\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\1\357"+
    "\15\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\10\4\1\360\1\0\16\4\11\0\2\4\1\0\1\4"+
    "\1\361\2\4\2\0\2\4\25\0\11\4\1\0\16\4"+
    "\54\0\1\362\35\0\2\73\1\0\4\73\2\0\2\73"+
    "\25\0\1\100\3\73\1\363\4\73\1\0\16\73\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\3\4\1\364"+
    "\5\4\1\0\16\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\11\4\1\0\7\4\1\365\6\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\4\4\1\366"+
    "\4\4\1\0\16\4\11\0\2\4\1\0\1\367\3\4"+
    "\2\0\2\4\25\0\11\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\4\4\1\370\4\4"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\11\4\1\0\11\4\1\371\4\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\1\4\1\372\7\4"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\10\4\1\373\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\11\4\1\0\7\4\1\374"+
    "\6\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\1\375\15\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\11\4\1\0\1\376\15\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\11\4\1\0"+
    "\3\4\1\377\12\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\2\4\1\u0100\6\4\1\0\16\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\11\4\1\0"+
    "\6\4\1\u0101\7\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\4\4\1\u0102\4\4\1\0\16\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\10\4\1\u0103"+
    "\1\0\16\4\11\0\2\4\1\0\1\4\1\u0104\2\4"+
    "\2\0\2\4\25\0\11\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\3\4"+
    "\1\u0105\12\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\1\4\1\u0106\7\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\3\4"+
    "\1\u0107\12\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\5\4\1\u0108\3\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\5\4"+
    "\1\u0109\10\4\55\0\1\u010a\34\0\2\73\1\0\4\73"+
    "\2\0\2\73\25\0\1\100\4\73\1\u010b\3\73\1\0"+
    "\16\73\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\10\4\1\u010c\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\11\4\1\0\2\4\1\u010d\13\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\11\4"+
    "\1\0\1\u010e\15\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\11\4\1\0\3\4\1\u010f\12\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\10\4\1\u0110"+
    "\1\0\16\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\11\4\1\0\2\4\1\u0111\13\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\3\4"+
    "\1\u0112\12\4\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\4\4\1\u0113\4\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\7\4\1\u0114\1\4"+
    "\1\0\16\4\11\0\2\4\1\0\3\4\1\u0115\2\0"+
    "\2\4\25\0\11\4\1\0\16\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\1\4\1\u0116\7\4\1\0"+
    "\16\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\10\4\1\u0117\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\1\4\1\u0118\7\4\1\0\16\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\10\4"+
    "\1\u0119\1\0\16\4\56\0\1\u011a\33\0\2\73\1\0"+
    "\4\73\2\0\2\73\25\0\1\100\5\73\1\u011b\2\73"+
    "\1\0\16\73\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\4\4\1\u011c\4\4\1\0\16\4\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\1\u011d"+
    "\15\4\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\11\4\1\0\3\4\1\u011e\12\4\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\10\4\1\u011f\1\0\16\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\4\4"+
    "\1\u0120\4\4\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\1\4\1\u0121\7\4\1\0\16\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\4\4"+
    "\1\u0122\4\4\1\0\16\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\10\4\1\u0123\1\0\16\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\10\4\1\u0124"+
    "\1\0\16\4\57\0\1\u0125\32\0\2\73\1\0\4\73"+
    "\2\0\2\73\25\0\1\100\6\73\1\u0126\1\73\1\0"+
    "\16\73\11\0\2\4\1\0\4\4\2\0\2\4\25\0"+
    "\1\4\1\u0127\7\4\1\0\16\4\11\0\2\4\1\0"+
    "\1\u0128\3\4\2\0\2\4\25\0\11\4\1\0\16\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\10\4"+
    "\1\u0129\1\0\16\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\7\4\1\u012a\1\4\1\0\16\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\1\4\1\u012b"+
    "\7\4\1\0\16\4\11\0\2\4\1\0\4\4\2\0"+
    "\2\4\25\0\3\4\1\u012c\5\4\1\0\16\4\11\0"+
    "\2\4\1\0\4\4\2\0\2\4\25\0\11\4\1\0"+
    "\7\4\1\u012d\6\4\60\0\1\u012e\31\0\2\73\1\0"+
    "\4\73\2\0\2\73\25\0\1\100\3\73\1\u012f\4\73"+
    "\1\0\16\73\11\0\2\4\1\0\4\4\2\0\2\4"+
    "\25\0\10\4\1\u0130\1\0\16\4\11\0\2\4\1\0"+
    "\1\u0131\3\4\2\0\2\4\25\0\11\4\1\0\16\4"+
    "\11\0\2\4\1\0\4\4\2\0\2\4\25\0\11\4"+
    "\1\0\2\4\1\u0132\13\4\11\0\2\4\1\0\4\4"+
    "\2\0\2\4\25\0\11\4\1\0\15\4\1\u0133\55\0"+
    "\1\u0134\34\0\2\73\1\0\4\73\2\0\2\73\25\0"+
    "\1\100\1\u0135\7\73\1\0\16\73\11\0\2\4\1\0"+
    "\4\4\2\0\2\4\25\0\10\4\1\u0136\1\0\16\4"+
    "\52\0\1\u0137\37\0\2\73\1\0\4\73\2\0\2\73"+
    "\25\0\1\100\7\73\1\u0138\1\0\16\73\11\0\2\4"+
    "\1\0\4\4\2\0\2\4\25\0\11\4\1\0\7\4"+
    "\1\u0139\6\4\61\0\1\u013a\30\0\2\73\1\0\4\73"+
    "\2\0\2\73\25\0\1\100\3\73\1\u013b\4\73\1\0"+
    "\16\73\55\0\1\u013c\34\0\2\73\1\0\4\73\2\0"+
    "\2\73\25\0\1\100\1\u013d\7\73\1\0\16\73\52\0"+
    "\1\u013e\37\0\2\73\1\0\4\73\2\0\2\73\1\0"+
    "\2\u013f\22\0\1\100\10\73\1\0\16\73\25\0\2\u013f"+
    "\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15535];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\1\1\1\11\4\1\2\11"+
    "\4\1\1\11\1\1\3\11\16\1\4\11\3\1\1\11"+
    "\1\1\1\0\2\11\6\1\6\0\11\11\13\1\1\0"+
    "\1\11\24\1\3\11\1\1\1\11\2\1\1\11\5\1"+
    "\3\0\16\1\1\0\26\1\3\11\4\1\3\0\16\1"+
    "\1\0\31\1\2\0\12\1\1\11\23\1\2\0\26\1"+
    "\2\0\16\1\2\0\11\1\2\0\7\1\2\0\4\1"+
    "\2\0\1\1\2\0\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  public static String curLine;

  /**
   * Factory method for creating Symbols for a given type.
   * @param type The type of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn);
  }
  
  /**
   * Factory method for creating Symbols for a given type and its value.
   * @param type The type of this symbol
   * @param value The value of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type, Object value) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn, value);
  }
  
  /**
   * Reports an error occured in a given line.
   * @param line The bad line
   * @param msg Additional information about the error
   */
  private void reportError(int line, String msg) {
      throw new RuntimeException("Lexical error at line #" + line + ": " + msg);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { reportError(yyline+1, "Illegal character \"" + yytext() + "\"");
            }
          case 102: break;
          case 2: 
            { return symbol(sym.INTEGER_LITERAL, new String(yytext()));
            }
          case 103: break;
          case 3: 
            { return symbol(sym.IDENTIFIER,yytext());
            }
          case 104: break;
          case 4: 
            { return symbol(sym.MINUS);
            }
          case 105: break;
          case 5: 
            { /* just ignore it*/
            }
          case 106: break;
          case 6: 
            { return symbol(sym.DOT);
            }
          case 107: break;
          case 7: 
            { return symbol(sym.CHARLITERAL);
            }
          case 108: break;
          case 8: 
            { return symbol(sym.MULT);
            }
          case 109: break;
          case 9: 
            { return symbol(sym.PLUS);
            }
          case 110: break;
          case 10: 
            { return symbol(sym.LBRACK);
            }
          case 111: break;
          case 11: 
            { return symbol(sym.RBRACK);
            }
          case 112: break;
          case 12: 
            { return symbol(sym.NOT);
            }
          case 113: break;
          case 13: 
            { return symbol(sym.MOD);
            }
          case 114: break;
          case 14: 
            { return symbol(sym.AND);
            }
          case 115: break;
          case 15: 
            { return symbol(sym.ASSIGNMENT, new String(yytext()));
            }
          case 116: break;
          case 16: 
            { return symbol(sym.QUESTION);
            }
          case 117: break;
          case 17: 
            { return symbol(sym.XOR);
            }
          case 118: break;
          case 18: 
            { return symbol(sym.COLON);
            }
          case 119: break;
          case 19: 
            { return symbol(sym.LPAREN);
            }
          case 120: break;
          case 20: 
            { return symbol(sym.RPAREN);
            }
          case 121: break;
          case 21: 
            { return symbol(sym.DIV);
            }
          case 122: break;
          case 22: 
            { return symbol(sym.LBRACE);
            }
          case 123: break;
          case 23: 
            { return symbol(sym.RBRACE);
            }
          case 124: break;
          case 24: 
            { return symbol(sym.SEMICOLON);
            }
          case 125: break;
          case 25: 
            { return symbol(sym.COMMA);
            }
          case 126: break;
          case 26: 
            { return symbol(sym.OR);
            }
          case 127: break;
          case 27: 
            { return symbol(sym.GT);
            }
          case 128: break;
          case 28: 
            { return symbol(sym.LT);
            }
          case 129: break;
          case 29: 
            { return symbol(sym.NEG_BINARY);
            }
          case 130: break;
          case 30: 
            { return symbol(sym.INTEGER, new String(yytext()));
            }
          case 131: break;
          case 31: 
            { return symbol(sym.AUTODECRM);
            }
          case 132: break;
          case 32: 
            { return symbol(sym.MINUSASSIGN, new String(yytext()));
            }
          case 133: break;
          case 33: 
            { return symbol(sym.MULTASSIGN);
            }
          case 134: break;
          case 34: 
            { return symbol(sym.AUTOINCRM);
            }
          case 135: break;
          case 35: 
            { return symbol(sym.PLUSASSIGN, new String(yytext()));
            }
          case 136: break;
          case 36: 
            { return symbol(sym.NOTEQ);
            }
          case 137: break;
          case 37: 
            { return symbol(sym.MODASSIGN);
            }
          case 138: break;
          case 38: 
            { return symbol(sym.ANDAND);
            }
          case 139: break;
          case 39: 
            { return symbol(sym.ANDASSIGN);
            }
          case 140: break;
          case 40: 
            { return symbol(sym.EQEQ);
            }
          case 141: break;
          case 41: 
            { return symbol(sym.XORASSIGN);
            }
          case 142: break;
          case 42: 
            { return symbol(sym.IF);
            }
          case 143: break;
          case 43: 
            { return symbol(sym.DIVASSIGN);
            }
          case 144: break;
          case 44: 
            { return symbol(sym.DO);
            }
          case 145: break;
          case 45: 
            { return symbol(sym.ORASSIGN);
            }
          case 146: break;
          case 46: 
            { return symbol(sym.OROR);
            }
          case 147: break;
          case 47: 
            { return symbol(sym.GTEQ);
            }
          case 148: break;
          case 48: 
            { return symbol(sym.RSHIFT);
            }
          case 149: break;
          case 49: 
            { return symbol(sym.LTEQ);
            }
          case 150: break;
          case 50: 
            { return symbol(sym.LSHIFT);
            }
          case 151: break;
          case 51: 
            { return symbol(sym.FLOATING_POINT_LITERAL, new String(yytext()));
            }
          case 152: break;
          case 52: 
            { return symbol(sym.FOR);
            }
          case 153: break;
          case 53: 
            { return symbol(sym.TRY);
            }
          case 154: break;
          case 54: 
            { return symbol(sym.INT);
            }
          case 155: break;
          case 55: 
            { return symbol(sym.NEW);
            }
          case 156: break;
          case 56: 
            { return symbol(sym.RSHIFTASSIGN, new String(yytext()));
            }
          case 157: break;
          case 57: 
            { return symbol(sym.URSHIFT);
            }
          case 158: break;
          case 58: 
            { return symbol(sym.LSHIFTASSIGN, new String(yytext()));
            }
          case 159: break;
          case 59: 
            { return symbol(sym.LONG);
            }
          case 160: break;
          case 60: 
            { return symbol(sym.TRUE);
            }
          case 161: break;
          case 61: 
            { return symbol(sym.THIS);
            }
          case 162: break;
          case 62: 
            { return symbol(sym.NULL);
            }
          case 163: break;
          case 63: 
            { return symbol(sym.ELSE);
            }
          case 164: break;
          case 64: 
            { return symbol(sym.BYTE);
            }
          case 165: break;
          case 65: 
            { return symbol(sym.CASE);
            }
          case 166: break;
          case 66: 
            { return symbol(sym.CHAR);
            }
          case 167: break;
          case 67: 
            { return symbol(sym.VOID);
            }
          case 168: break;
          case 68: 
            { return symbol(sym.FLOAT);
            }
          case 169: break;
          case 69: 
            { return symbol(sym.FINAL);
            }
          case 170: break;
          case 70: 
            { return symbol(sym.FALSE);
            }
          case 171: break;
          case 71: 
            { return symbol(sym.THROW);
            }
          case 172: break;
          case 72: 
            { /* just ignore it */
            }
          case 173: break;
          case 73: 
            { return symbol(sym.BREAK);
            }
          case 174: break;
          case 74: 
            { return symbol(sym.SUPER);
            }
          case 175: break;
          case 75: 
            { return symbol(sym.SHORT);
            }
          case 176: break;
          case 76: 
            { return symbol(sym.CLASS);
            }
          case 177: break;
          case 77: 
            { return symbol(sym.CATCH);
            }
          case 178: break;
          case 78: 
            { return symbol(sym.WHILE);
            }
          case 179: break;
          case 79: 
            { return symbol(sym.RETURN);
            }
          case 180: break;
          case 80: 
            { return symbol(sym.IMPORT);
            }
          case 181: break;
          case 81: 
            { return symbol(sym.NATIVE);
            }
          case 182: break;
          case 82: 
            { return symbol(sym.STATIC);
            }
          case 183: break;
          case 83: 
            { return symbol(sym.SWITCH);
            }
          case 184: break;
          case 84: 
            { return symbol(sym.DOUBLE);
            }
          case 185: break;
          case 85: 
            { return symbol(sym.PUBLIC);
            }
          case 186: break;
          case 86: 
            { return symbol(sym.FINALLY);
            }
          case 187: break;
          case 87: 
            { return symbol(sym.EXTENDS);
            }
          case 188: break;
          case 88: 
            { return symbol(sym.BOOLEAN);
            }
          case 189: break;
          case 89: 
            { return symbol(sym.DEFAULT);
            }
          case 190: break;
          case 90: 
            { return symbol(sym.PRIVATE);
            }
          case 191: break;
          case 91: 
            { return symbol(sym.PACKAGE);
            }
          case 192: break;
          case 92: 
            { return symbol(sym.ABSTRACT);
            }
          case 193: break;
          case 93: 
            { return symbol(sym.CONTINUE);
            }
          case 194: break;
          case 94: 
            { return symbol(sym.TRANSIENT);
            }
          case 195: break;
          case 95: 
            { return symbol(sym.INTERFACE);
            }
          case 196: break;
          case 96: 
            { return symbol(sym.PROTECTED);
            }
          case 197: break;
          case 97: 
            { return symbol(sym.THREADSAFE);
            }
          case 198: break;
          case 98: 
            { return symbol(sym.INSTANCEOF);
            }
          case 199: break;
          case 99: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 200: break;
          case 100: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 201: break;
          case 101: 
            { return symbol(sym.STRING_LITERAL,new String(yytext()));
            }
          case 202: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
