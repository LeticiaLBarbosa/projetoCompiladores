/* The following code was generated by JFlex 1.6.1 */

/**
 * Lexical Specification
 *
 */
package compiler.analysis.generated;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./specs/lexical.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\2\1\0\1\33\1\1\22\0\1\3\1\15\1\7"+
    "\1\20\1\20\1\21\1\22\1\10\1\30\1\31\1\11\1\12\1\73"+
    "\1\26\1\6\1\46\1\4\11\5\1\27\1\72\1\76\1\23\1\75"+
    "\1\24\1\20\2\34\1\43\17\34\1\35\7\34\1\13\1\0\1\14"+
    "\1\25\1\34\1\0\1\47\1\50\1\52\1\60\1\45\1\61\1\42"+
    "\1\56\1\40\1\34\1\54\1\53\1\63\1\41\1\44\1\64\1\34"+
    "\1\37\1\51\1\36\1\57\1\65\1\66\1\62\1\55\1\67\1\70"+
    "\1\74\1\71\1\77\44\0\1\17\14\0\1\17\21\0\1\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff4d\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\6\24\1\25\12\24"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\7\0\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\4\24\1\51\6\24\1\0"+
    "\1\52\16\24\1\53\12\24\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\2\62\3\0\1\24\1\63\4\24\1\64"+
    "\2\24\1\65\4\24\1\0\22\24\1\66\10\24\1\67"+
    "\1\70\1\71\3\0\1\24\1\72\2\24\1\73\6\24"+
    "\1\74\1\75\1\24\1\0\3\24\1\76\7\24\1\77"+
    "\1\24\1\100\1\101\11\24\1\102\1\24\2\0\1\24"+
    "\1\103\10\24\1\104\1\24\1\105\3\24\1\106\1\107"+
    "\2\24\1\110\1\111\2\24\1\112\1\113\1\114\4\24"+
    "\1\115\2\0\2\24\1\116\2\24\1\117\1\24\1\120"+
    "\3\24\1\121\1\24\1\122\1\24\1\123\5\24\1\124"+
    "\2\0\5\24\1\125\1\24\1\126\2\24\1\127\1\130"+
    "\1\131\1\24\1\132\2\0\5\24\1\133\1\24\1\134"+
    "\1\24\2\0\1\135\1\24\1\136\3\24\1\137\2\0"+
    "\1\140\1\141\1\142\1\24\2\0\1\24\2\0\1\143"+
    "\5\0\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\300\0\u0100\0\100\0\u0140"+
    "\0\u0140\0\u0180\0\u01c0\0\100\0\100\0\u0200\0\u0240\0\u0280"+
    "\0\u02c0\0\100\0\u0300\0\u0340\0\100\0\100\0\100\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\100\0\100\0\100\0\100\0\u07c0\0\u0800\0\u0840\0\100"+
    "\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0380\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\100\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\100\0\100\0\100\0\u1340\0\100\0\u1380\0\100\0\u13c0"+
    "\0\u1400\0\u1440\0\u1480\0\u14c0\0\u0380\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u0380\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u0380\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\100\0\100\0\100"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u0380\0\u1f80\0\u1fc0\0\u0380"+
    "\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u0380\0\u0380"+
    "\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u0380\0\u22c0\0\u2300"+
    "\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u0380\0\u2480\0\u0380"+
    "\0\u0380\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u0380\0\u2700\0\u2740\0\u2780\0\u27c0\0\u0380"+
    "\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0"+
    "\0\100\0\u2a00\0\u0380\0\u2a40\0\u2a80\0\u2ac0\0\u0380\0\u0380"+
    "\0\u2b00\0\u2b40\0\u0380\0\u0380\0\u2b80\0\u2bc0\0\u2c00\0\u0380"+
    "\0\u0380\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u0380\0\u2d40\0\u2d80"+
    "\0\u2dc0\0\u2e00\0\u0380\0\u2e40\0\u2e80\0\u0380\0\u2ec0\0\u0380"+
    "\0\u2f00\0\u2f40\0\u2f80\0\u0380\0\u2fc0\0\u0380\0\u3000\0\u0380"+
    "\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u0380\0\u3180\0\u31c0"+
    "\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u0380\0\u3340\0\u0380"+
    "\0\u3380\0\u33c0\0\u0380\0\u0380\0\u0380\0\u3400\0\u0380\0\u3440"+
    "\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u0380\0\u3600"+
    "\0\u0380\0\u3640\0\u3680\0\u36c0\0\u0380\0\u3700\0\u0380\0\u3740"+
    "\0\u3780\0\u37c0\0\u0380\0\u3800\0\u3840\0\u0380\0\u0380\0\u0380"+
    "\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u0380\0\u3a00"+
    "\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\3\2\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\4"+
    "\2\30\1\31\1\32\1\33\1\34\3\30\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\4\30\1\44\1\45"+
    "\2\30\1\46\1\47\1\50\1\30\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\102\0\1\4\103\0"+
    "\1\61\75\0\2\6\1\61\72\0\1\62\1\63\3\64"+
    "\3\0\5\65\1\66\1\0\12\65\2\0\1\64\1\67"+
    "\10\64\1\0\21\64\33\0\1\70\66\0\1\71\10\0"+
    "\1\72\77\0\1\73\77\0\1\74\76\0\1\75\1\76"+
    "\77\0\1\77\77\0\1\100\77\0\1\101\2\0\1\102"+
    "\54\0\3\30\26\0\12\30\1\0\21\30\13\0\3\30"+
    "\26\0\3\30\1\103\6\30\1\0\7\30\1\104\11\30"+
    "\13\0\3\30\26\0\11\30\1\105\1\0\21\30\13\0"+
    "\3\30\26\0\5\30\1\106\4\30\1\0\12\30\1\107"+
    "\1\30\1\110\4\30\13\0\3\30\26\0\11\30\1\111"+
    "\1\0\1\112\7\30\1\113\10\30\13\0\3\30\26\0"+
    "\12\30\1\0\4\30\1\114\6\30\1\115\5\30\21\0"+
    "\1\116\11\0\1\117\57\0\3\30\26\0\12\30\1\0"+
    "\1\30\1\120\17\30\13\0\3\30\26\0\3\30\1\121"+
    "\4\30\1\122\1\30\1\0\6\30\1\123\12\30\13\0"+
    "\3\30\26\0\2\30\1\124\7\30\1\0\6\30\1\125"+
    "\1\126\1\127\6\30\1\130\1\30\13\0\3\30\26\0"+
    "\10\30\1\131\1\30\1\0\1\132\3\30\1\133\2\30"+
    "\1\134\11\30\13\0\3\30\26\0\10\30\1\135\1\30"+
    "\1\0\21\30\13\0\3\30\26\0\10\30\1\136\1\137"+
    "\1\0\21\30\13\0\3\30\26\0\4\30\1\140\3\30"+
    "\1\141\1\30\1\0\1\142\3\30\1\143\14\30\13\0"+
    "\3\30\26\0\3\30\1\144\6\30\1\0\1\145\7\30"+
    "\1\146\10\30\13\0\3\30\26\0\10\30\1\147\1\30"+
    "\1\0\21\30\13\0\3\30\26\0\12\30\1\0\7\30"+
    "\1\150\11\30\33\0\1\151\50\0\1\152\26\0\1\153"+
    "\51\0\1\154\25\0\1\155\52\0\1\156\5\0\1\157"+
    "\1\160\73\0\1\62\1\161\32\0\1\162\43\0\1\62"+
    "\1\63\32\0\1\162\45\0\3\64\26\0\1\64\1\67"+
    "\10\64\1\0\21\64\21\0\5\65\1\66\1\0\12\65"+
    "\3\0\1\162\61\0\1\65\63\0\3\64\26\0\1\64"+
    "\1\67\1\163\7\64\1\0\21\64\13\0\3\30\26\0"+
    "\12\30\1\0\1\164\5\30\1\165\1\30\1\166\10\30"+
    "\13\0\3\30\26\0\3\30\1\167\1\170\5\30\1\0"+
    "\21\30\13\0\3\30\26\0\2\30\1\171\7\30\1\0"+
    "\21\30\13\0\3\30\26\0\2\30\1\172\7\30\1\0"+
    "\2\30\1\173\16\30\13\0\3\30\26\0\12\30\1\0"+
    "\15\30\1\174\3\30\13\0\3\30\26\0\12\30\1\0"+
    "\17\30\1\175\1\30\13\0\3\30\26\0\2\30\1\176"+
    "\7\30\1\0\21\30\13\0\3\30\26\0\12\30\1\0"+
    "\4\30\1\177\14\30\13\0\3\30\26\0\12\30\1\0"+
    "\2\30\1\200\16\30\13\0\3\30\26\0\2\30\1\201"+
    "\7\30\1\0\21\30\21\0\1\202\71\0\3\30\26\0"+
    "\12\30\1\0\2\30\1\203\16\30\13\0\3\30\26\0"+
    "\11\30\1\204\1\0\21\30\13\0\3\30\26\0\10\30"+
    "\1\205\1\30\1\0\21\30\13\0\3\30\26\0\2\30"+
    "\1\206\7\30\1\0\21\30\13\0\3\30\26\0\12\30"+
    "\1\0\1\207\20\30\13\0\3\30\26\0\5\30\1\210"+
    "\4\30\1\0\21\30\13\0\3\30\26\0\10\30\1\211"+
    "\1\30\1\0\21\30\13\0\3\30\26\0\12\30\1\0"+
    "\15\30\1\212\3\30\13\0\3\30\26\0\4\30\1\213"+
    "\5\30\1\0\21\30\13\0\3\30\26\0\5\30\1\214"+
    "\4\30\1\0\21\30\13\0\3\30\26\0\2\30\1\215"+
    "\7\30\1\0\2\30\1\216\16\30\13\0\3\30\26\0"+
    "\12\30\1\0\1\217\20\30\13\0\3\30\26\0\12\30"+
    "\1\0\1\220\20\30\13\0\3\30\26\0\5\30\1\221"+
    "\4\30\1\0\21\30\13\0\3\30\26\0\12\30\1\0"+
    "\10\30\1\222\10\30\13\0\3\30\26\0\12\30\1\0"+
    "\12\30\1\223\6\30\13\0\3\30\26\0\5\30\1\224"+
    "\4\30\1\0\21\30\13\0\3\30\26\0\3\30\1\225"+
    "\6\30\1\0\21\30\13\0\3\30\26\0\12\30\1\0"+
    "\4\30\1\226\14\30\13\0\3\30\26\0\10\30\1\227"+
    "\1\30\1\0\21\30\13\0\3\30\26\0\4\30\1\230"+
    "\3\30\1\231\1\30\1\0\21\30\13\0\3\30\26\0"+
    "\12\30\1\0\3\30\1\232\15\30\13\0\3\30\26\0"+
    "\12\30\1\0\1\30\1\233\17\30\13\0\3\30\26\0"+
    "\4\30\1\234\5\30\1\0\21\30\13\0\3\30\26\0"+
    "\4\30\1\235\5\30\1\0\21\30\33\0\1\236\51\0"+
    "\1\237\25\0\1\240\60\0\2\160\73\0\1\62\1\63"+
    "\27\0\1\241\2\0\1\162\100\0\1\242\44\0\3\64"+
    "\26\0\1\64\1\67\1\64\1\243\6\64\1\0\21\64"+
    "\13\0\3\30\26\0\5\30\1\244\4\30\1\0\21\30"+
    "\13\0\3\30\26\0\11\30\1\245\1\0\21\30\13\0"+
    "\3\30\26\0\10\30\1\246\1\247\1\0\21\30\13\0"+
    "\3\30\26\0\12\30\1\0\2\30\1\250\16\30\13\0"+
    "\3\30\26\0\12\30\1\0\10\30\1\251\10\30\13\0"+
    "\3\30\26\0\11\30\1\252\1\0\21\30\13\0\3\30"+
    "\26\0\2\30\1\253\7\30\1\0\21\30\13\0\3\30"+
    "\26\0\10\30\1\254\1\30\1\0\4\30\1\255\14\30"+
    "\13\0\3\30\26\0\4\30\1\256\5\30\1\0\21\30"+
    "\13\0\3\30\26\0\12\30\1\0\4\30\1\257\14\30"+
    "\13\0\3\30\26\0\11\30\1\260\1\0\21\30\13\0"+
    "\3\30\26\0\11\30\1\261\1\0\21\30\10\0\11\202"+
    "\1\262\66\202\3\0\3\30\26\0\2\30\1\263\7\30"+
    "\1\0\21\30\13\0\3\30\26\0\12\30\1\0\1\264"+
    "\20\30\13\0\3\30\26\0\12\30\1\0\4\30\1\265"+
    "\14\30\13\0\3\30\26\0\11\30\1\266\1\0\21\30"+
    "\13\0\3\30\26\0\2\30\1\267\7\30\1\0\21\30"+
    "\13\0\3\30\26\0\12\30\1\0\3\30\1\270\15\30"+
    "\13\0\3\30\26\0\3\30\1\271\6\30\1\0\21\30"+
    "\13\0\3\30\26\0\11\30\1\272\1\0\21\30\13\0"+
    "\3\30\26\0\2\30\1\273\7\30\1\0\21\30\13\0"+
    "\3\30\26\0\2\30\1\274\7\30\1\0\21\30\13\0"+
    "\3\30\26\0\12\30\1\0\3\30\1\275\15\30\13\0"+
    "\3\30\26\0\11\30\1\276\1\0\21\30\13\0\3\30"+
    "\26\0\12\30\1\0\2\30\1\277\16\30\13\0\3\30"+
    "\26\0\3\30\1\300\6\30\1\0\21\30\13\0\3\30"+
    "\26\0\6\30\1\301\3\30\1\0\21\30\13\0\3\30"+
    "\26\0\12\30\1\0\1\30\1\302\17\30\13\0\3\30"+
    "\26\0\12\30\1\0\1\303\20\30\13\0\3\30\26\0"+
    "\12\30\1\0\1\304\20\30\13\0\3\30\26\0\12\30"+
    "\1\0\2\30\1\305\16\30\13\0\3\30\26\0\12\30"+
    "\1\0\1\306\20\30\13\0\3\30\26\0\12\30\1\0"+
    "\16\30\1\307\2\30\13\0\3\30\26\0\2\30\1\310"+
    "\7\30\1\0\21\30\13\0\3\30\26\0\12\30\1\0"+
    "\5\30\1\311\13\30\13\0\3\30\26\0\12\30\1\0"+
    "\4\30\1\312\14\30\13\0\3\30\26\0\12\30\1\0"+
    "\11\30\1\313\7\30\13\0\3\30\26\0\12\30\1\0"+
    "\4\30\1\314\14\30\43\0\1\63\103\0\1\315\43\0"+
    "\3\64\26\0\1\64\1\67\2\64\1\316\5\64\1\0"+
    "\21\64\13\0\3\30\26\0\12\30\1\0\2\30\1\317"+
    "\16\30\13\0\3\30\26\0\12\30\1\0\17\30\1\320"+
    "\1\30\13\0\3\30\26\0\12\30\1\0\1\321\20\30"+
    "\13\0\3\30\26\0\3\30\1\322\6\30\1\0\21\30"+
    "\13\0\3\30\26\0\3\30\1\323\6\30\1\0\21\30"+
    "\13\0\3\30\26\0\12\30\1\0\1\324\20\30\13\0"+
    "\3\30\26\0\3\30\1\325\6\30\1\0\21\30\13\0"+
    "\3\30\26\0\11\30\1\326\1\0\21\30\13\0\3\30"+
    "\26\0\12\30\1\0\16\30\1\327\2\30\13\0\3\30"+
    "\26\0\5\30\1\330\4\30\1\0\21\30\10\0\11\202"+
    "\1\262\34\202\1\331\31\202\3\0\3\30\26\0\3\30"+
    "\1\332\6\30\1\0\21\30\13\0\3\30\26\0\12\30"+
    "\1\0\5\30\1\333\13\30\13\0\3\30\26\0\11\30"+
    "\1\334\1\0\21\30\13\0\3\30\26\0\4\30\1\335"+
    "\5\30\1\0\21\30\13\0\3\30\26\0\12\30\1\0"+
    "\7\30\1\336\11\30\13\0\3\30\26\0\2\30\1\337"+
    "\7\30\1\0\21\30\13\0\3\30\26\0\3\30\1\340"+
    "\6\30\1\0\21\30\13\0\3\30\26\0\12\30\1\0"+
    "\3\30\1\341\15\30\13\0\3\30\26\0\4\30\1\342"+
    "\5\30\1\0\21\30\13\0\3\30\26\0\12\30\1\0"+
    "\7\30\1\343\11\30\13\0\3\30\26\0\12\30\1\0"+
    "\2\30\1\344\16\30\13\0\3\30\26\0\12\30\1\0"+
    "\4\30\1\345\14\30\13\0\3\30\26\0\12\30\1\0"+
    "\10\30\1\346\10\30\13\0\3\30\26\0\12\30\1\0"+
    "\4\30\1\347\14\30\13\0\3\30\26\0\11\30\1\350"+
    "\1\0\21\30\13\0\3\30\26\0\2\30\1\351\7\30"+
    "\1\0\21\30\13\0\3\30\26\0\12\30\1\0\1\352"+
    "\20\30\13\0\3\30\26\0\11\30\1\353\1\0\21\30"+
    "\13\0\3\30\26\0\12\30\1\0\1\354\20\30\13\0"+
    "\3\30\26\0\4\30\1\355\5\30\1\0\21\30\13\0"+
    "\3\30\26\0\11\30\1\356\1\0\21\30\50\0\1\357"+
    "\42\0\3\64\26\0\1\64\1\67\3\64\1\360\4\64"+
    "\1\0\21\64\13\0\3\30\26\0\4\30\1\361\5\30"+
    "\1\0\21\30\13\0\3\30\26\0\12\30\1\0\11\30"+
    "\1\362\7\30\13\0\3\30\26\0\5\30\1\363\4\30"+
    "\1\0\21\30\13\0\3\30\26\0\12\30\1\0\12\30"+
    "\1\364\6\30\13\0\3\30\26\0\5\30\1\365\4\30"+
    "\1\0\21\30\13\0\3\30\26\0\2\30\1\366\7\30"+
    "\1\0\21\30\13\0\3\30\26\0\12\30\1\0\14\30"+
    "\1\367\4\30\13\0\3\30\26\0\11\30\1\370\1\0"+
    "\21\30\13\0\3\30\26\0\12\30\1\0\11\30\1\371"+
    "\7\30\13\0\3\30\26\0\12\30\1\0\1\372\20\30"+
    "\13\0\3\30\26\0\12\30\1\0\1\373\20\30\13\0"+
    "\3\30\26\0\12\30\1\0\3\30\1\374\15\30\13\0"+
    "\3\30\26\0\3\30\1\375\6\30\1\0\21\30\13\0"+
    "\3\30\26\0\12\30\1\0\7\30\1\376\11\30\13\0"+
    "\3\30\26\0\5\30\1\377\4\30\1\0\21\30\13\0"+
    "\3\30\26\0\11\30\1\u0100\1\0\21\30\13\0\3\30"+
    "\26\0\12\30\1\0\4\30\1\u0101\14\30\13\0\3\30"+
    "\26\0\12\30\1\0\4\30\1\u0102\14\30\13\0\3\30"+
    "\26\0\2\30\1\u0103\7\30\1\0\21\30\13\0\3\30"+
    "\26\0\12\30\1\0\3\30\1\u0104\15\30\13\0\3\30"+
    "\26\0\6\30\1\u0105\3\30\1\0\21\30\13\0\3\30"+
    "\26\0\12\30\1\0\3\30\1\u0106\15\30\51\0\1\u0107"+
    "\41\0\3\64\26\0\1\64\1\67\4\64\1\u0108\3\64"+
    "\1\0\21\64\13\0\3\30\26\0\11\30\1\u0109\1\0"+
    "\21\30\13\0\3\30\26\0\12\30\1\0\2\30\1\u010a"+
    "\16\30\13\0\3\30\26\0\12\30\1\0\1\u010b\20\30"+
    "\13\0\3\30\26\0\12\30\1\0\3\30\1\u010c\15\30"+
    "\13\0\3\30\26\0\11\30\1\u010d\1\0\21\30\13\0"+
    "\3\30\26\0\12\30\1\0\2\30\1\u010e\16\30\13\0"+
    "\3\30\26\0\12\30\1\0\3\30\1\u010f\15\30\13\0"+
    "\3\30\26\0\5\30\1\u0110\4\30\1\0\21\30\13\0"+
    "\3\30\26\0\10\30\1\u0111\1\30\1\0\21\30\13\0"+
    "\3\30\26\0\12\30\1\0\10\30\1\u0112\10\30\13\0"+
    "\3\30\26\0\2\30\1\u0113\7\30\1\0\21\30\13\0"+
    "\3\30\26\0\12\30\1\0\6\30\1\u0114\12\30\13\0"+
    "\3\30\26\0\11\30\1\u0115\1\0\21\30\13\0\3\30"+
    "\26\0\2\30\1\u0116\7\30\1\0\21\30\13\0\3\30"+
    "\26\0\11\30\1\u0117\1\0\21\30\52\0\1\u0118\40\0"+
    "\3\64\26\0\1\64\1\67\5\64\1\u0119\2\64\1\0"+
    "\21\64\13\0\3\30\26\0\5\30\1\u011a\4\30\1\0"+
    "\21\30\13\0\3\30\26\0\12\30\1\0\1\u011b\20\30"+
    "\13\0\3\30\26\0\12\30\1\0\3\30\1\u011c\15\30"+
    "\13\0\3\30\26\0\11\30\1\u011d\1\0\21\30\13\0"+
    "\3\30\26\0\5\30\1\u011e\4\30\1\0\21\30\13\0"+
    "\3\30\26\0\2\30\1\u011f\7\30\1\0\21\30\13\0"+
    "\3\30\26\0\5\30\1\u0120\4\30\1\0\21\30\13\0"+
    "\3\30\26\0\11\30\1\u0121\1\0\21\30\13\0\3\30"+
    "\26\0\11\30\1\u0122\1\0\21\30\53\0\1\u0123\37\0"+
    "\3\64\26\0\1\64\1\67\6\64\1\u0124\1\64\1\0"+
    "\21\64\13\0\3\30\26\0\2\30\1\u0125\7\30\1\0"+
    "\21\30\13\0\3\30\26\0\12\30\1\0\12\30\1\u0126"+
    "\6\30\13\0\3\30\26\0\11\30\1\u0127\1\0\21\30"+
    "\13\0\3\30\26\0\10\30\1\u0128\1\30\1\0\21\30"+
    "\13\0\3\30\26\0\2\30\1\u0129\7\30\1\0\21\30"+
    "\13\0\3\30\26\0\4\30\1\u012a\5\30\1\0\21\30"+
    "\13\0\3\30\26\0\12\30\1\0\11\30\1\u012b\7\30"+
    "\54\0\1\u012c\36\0\3\64\26\0\1\64\1\67\3\64"+
    "\1\u012d\4\64\1\0\21\64\13\0\3\30\26\0\11\30"+
    "\1\u012e\1\0\21\30\13\0\3\30\26\0\12\30\1\0"+
    "\12\30\1\u012f\6\30\13\0\3\30\26\0\12\30\1\0"+
    "\2\30\1\u0130\16\30\13\0\3\30\26\0\12\30\1\0"+
    "\20\30\1\u0131\51\0\1\u0132\41\0\3\64\26\0\1\64"+
    "\1\67\1\u0133\7\64\1\0\21\64\13\0\3\30\26\0"+
    "\11\30\1\u0134\1\0\21\30\46\0\1\u0135\44\0\3\64"+
    "\26\0\1\64\1\67\7\64\1\u0136\1\0\21\64\13\0"+
    "\3\30\26\0\12\30\1\0\11\30\1\u0137\7\30\55\0"+
    "\1\u0138\35\0\3\64\26\0\1\64\1\67\3\64\1\u0139"+
    "\4\64\1\0\21\64\51\0\1\u013a\41\0\3\64\26\0"+
    "\1\64\1\67\1\u013b\7\64\1\0\21\64\46\0\1\u013c"+
    "\44\0\3\64\1\0\2\u013d\23\0\1\64\1\67\10\64"+
    "\1\0\21\64\17\0\2\u013d\67\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15168];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\4\1\2\11"+
    "\4\1\1\11\2\1\3\11\21\1\4\11\3\1\1\11"+
    "\7\0\13\11\13\1\1\0\1\11\31\1\3\11\1\1"+
    "\1\11\1\1\1\11\1\1\3\0\16\1\1\0\33\1"+
    "\3\11\3\0\16\1\1\0\32\1\2\0\12\1\1\11"+
    "\25\1\2\0\26\1\2\0\17\1\2\0\11\1\2\0"+
    "\7\1\2\0\4\1\2\0\1\1\2\0\1\1\5\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  public static String curLine;

  /**
   * Factory method for creating Symbols for a given type.
   * @param type The type of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn);
  }
  
  /**
   * Factory method for creating Symbols for a given type and its value.
   * @param type The type of this symbol
   * @param value The value of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type, Object value) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn, value);
  }
  
  /**
   * Reports an error occured in a given line.
   * @param line The bad line
   * @param msg Additional information about the error
   */
  private void reportError(int line, String msg) {
      throw new RuntimeException("Lexical error at line #" + line + ": " + msg);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { reportError(yyline+1, "Illegal character \"" + yytext() + "\"");
            }
          case 101: break;
          case 2: 
            { /* just ignore it*/
            }
          case 102: break;
          case 3: 
            { return symbol(sym.INTEGER_LITERAL, new String(yytext()));
            }
          case 103: break;
          case 4: 
            { return symbol(sym.DOT);
            }
          case 104: break;
          case 5: 
            { return symbol(sym.CHARLITERAL);
            }
          case 105: break;
          case 6: 
            { return symbol(sym.MULT);
            }
          case 106: break;
          case 7: 
            { return symbol(sym.PLUS);
            }
          case 107: break;
          case 8: 
            { return symbol(sym.LBRACK);
            }
          case 108: break;
          case 9: 
            { return symbol(sym.RBRACK);
            }
          case 109: break;
          case 10: 
            { return symbol(sym.NOT);
            }
          case 110: break;
          case 11: 
            { return symbol(sym.MOD);
            }
          case 111: break;
          case 12: 
            { return symbol(sym.AND);
            }
          case 112: break;
          case 13: 
            { return symbol(sym.ASSIGNMENT, new String(yytext()));
            }
          case 113: break;
          case 14: 
            { return symbol(sym.QUESTION);
            }
          case 114: break;
          case 15: 
            { return symbol(sym.XOR);
            }
          case 115: break;
          case 16: 
            { return symbol(sym.MINUS);
            }
          case 116: break;
          case 17: 
            { return symbol(sym.COLON);
            }
          case 117: break;
          case 18: 
            { return symbol(sym.LPAREN);
            }
          case 118: break;
          case 19: 
            { return symbol(sym.RPAREN);
            }
          case 119: break;
          case 20: 
            { return symbol(sym.IDENTIFIER,yytext());
            }
          case 120: break;
          case 21: 
            { return symbol(sym.DIV);
            }
          case 121: break;
          case 22: 
            { return symbol(sym.LBRACE);
            }
          case 122: break;
          case 23: 
            { return symbol(sym.RBRACE);
            }
          case 123: break;
          case 24: 
            { return symbol(sym.SEMICOLON);
            }
          case 124: break;
          case 25: 
            { return symbol(sym.COMMA);
            }
          case 125: break;
          case 26: 
            { return symbol(sym.OR);
            }
          case 126: break;
          case 27: 
            { return symbol(sym.GT);
            }
          case 127: break;
          case 28: 
            { return symbol(sym.LT);
            }
          case 128: break;
          case 29: 
            { return symbol(sym.NEG_BINARY);
            }
          case 129: break;
          case 30: 
            { return symbol(sym.MULTASSIGN);
            }
          case 130: break;
          case 31: 
            { return symbol(sym.AUTOINCRM);
            }
          case 131: break;
          case 32: 
            { return symbol(sym.PLUSASSIGN, new String(yytext()));
            }
          case 132: break;
          case 33: 
            { return symbol(sym.NOTEQ);
            }
          case 133: break;
          case 34: 
            { return symbol(sym.MODASSIGN);
            }
          case 134: break;
          case 35: 
            { return symbol(sym.ANDAND);
            }
          case 135: break;
          case 36: 
            { return symbol(sym.ANDASSIGN);
            }
          case 136: break;
          case 37: 
            { return symbol(sym.EQEQ);
            }
          case 137: break;
          case 38: 
            { return symbol(sym.XORASSIGN);
            }
          case 138: break;
          case 39: 
            { return symbol(sym.MINUSASSIGN, new String(yytext()));
            }
          case 139: break;
          case 40: 
            { return symbol(sym.AUTODECRM);
            }
          case 140: break;
          case 41: 
            { return symbol(sym.IF);
            }
          case 141: break;
          case 42: 
            { return symbol(sym.DIVASSIGN);
            }
          case 142: break;
          case 43: 
            { return symbol(sym.DO);
            }
          case 143: break;
          case 44: 
            { return symbol(sym.ORASSIGN);
            }
          case 144: break;
          case 45: 
            { return symbol(sym.OROR);
            }
          case 145: break;
          case 46: 
            { return symbol(sym.GTEQ);
            }
          case 146: break;
          case 47: 
            { return symbol(sym.RSHIFT);
            }
          case 147: break;
          case 48: 
            { return symbol(sym.LTEQ);
            }
          case 148: break;
          case 49: 
            { return symbol(sym.LSHIFT);
            }
          case 149: break;
          case 50: 
            { return symbol(sym.FLOATING_POINT_LITERAL, new String(yytext()));
            }
          case 150: break;
          case 51: 
            { return symbol(sym.TRY);
            }
          case 151: break;
          case 52: 
            { return symbol(sym.INT);
            }
          case 152: break;
          case 53: 
            { return symbol(sym.NEW);
            }
          case 153: break;
          case 54: 
            { return symbol(sym.FOR);
            }
          case 154: break;
          case 55: 
            { return symbol(sym.RSHIFTASSIGN, new String(yytext()));
            }
          case 155: break;
          case 56: 
            { return symbol(sym.URSHIFT);
            }
          case 156: break;
          case 57: 
            { return symbol(sym.LSHIFTASSIGN, new String(yytext()));
            }
          case 157: break;
          case 58: 
            { return symbol(sym.TRUE);
            }
          case 158: break;
          case 59: 
            { return symbol(sym.THIS);
            }
          case 159: break;
          case 60: 
            { return symbol(sym.NULL);
            }
          case 160: break;
          case 61: 
            { return symbol(sym.ELSE);
            }
          case 161: break;
          case 62: 
            { return symbol(sym.BYTE);
            }
          case 162: break;
          case 63: 
            { return symbol(sym.CASE);
            }
          case 163: break;
          case 64: 
            { return symbol(sym.CHAR);
            }
          case 164: break;
          case 65: 
            { return symbol(sym.LONG);
            }
          case 165: break;
          case 66: 
            { return symbol(sym.VOID);
            }
          case 166: break;
          case 67: 
            { return symbol(sym.THROW);
            }
          case 167: break;
          case 68: 
            { /* just ignore it */
            }
          case 168: break;
          case 69: 
            { return symbol(sym.BREAK);
            }
          case 169: break;
          case 70: 
            { return symbol(sym.SHORT);
            }
          case 170: break;
          case 71: 
            { return symbol(sym.SUPER);
            }
          case 171: break;
          case 72: 
            { return symbol(sym.CATCH);
            }
          case 172: break;
          case 73: 
            { return symbol(sym.CLASS);
            }
          case 173: break;
          case 74: 
            { return symbol(sym.FINAL);
            }
          case 174: break;
          case 75: 
            { return symbol(sym.FALSE);
            }
          case 175: break;
          case 76: 
            { return symbol(sym.FLOAT);
            }
          case 176: break;
          case 77: 
            { return symbol(sym.WHILE);
            }
          case 177: break;
          case 78: 
            { return symbol(sym.RETURN);
            }
          case 178: break;
          case 79: 
            { return symbol(sym.IMPORT);
            }
          case 179: break;
          case 80: 
            { return symbol(sym.NATIVE);
            }
          case 180: break;
          case 81: 
            { return symbol(sym.STATIC);
            }
          case 181: break;
          case 82: 
            { return symbol(sym.SWITCH);
            }
          case 182: break;
          case 83: 
            { return symbol(sym.DOUBLE);
            }
          case 183: break;
          case 84: 
            { return symbol(sym.PUBLIC);
            }
          case 184: break;
          case 85: 
            { return symbol(sym.EXTENDS);
            }
          case 185: break;
          case 86: 
            { return symbol(sym.BOOLEAN);
            }
          case 186: break;
          case 87: 
            { return symbol(sym.DEFAULT);
            }
          case 187: break;
          case 88: 
            { return symbol(sym.FINALLY);
            }
          case 188: break;
          case 89: 
            { return symbol(sym.PRIVATE);
            }
          case 189: break;
          case 90: 
            { return symbol(sym.PACKAGE);
            }
          case 190: break;
          case 91: 
            { return symbol(sym.ABSTRACT);
            }
          case 191: break;
          case 92: 
            { return symbol(sym.CONTINUE);
            }
          case 192: break;
          case 93: 
            { return symbol(sym.TRANSIENT);
            }
          case 193: break;
          case 94: 
            { return symbol(sym.INTERFACE);
            }
          case 194: break;
          case 95: 
            { return symbol(sym.PROTECTED);
            }
          case 195: break;
          case 96: 
            { return symbol(sym.THREADSAFE);
            }
          case 196: break;
          case 97: 
            { return symbol(sym.INSTANCEOF);
            }
          case 197: break;
          case 98: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 198: break;
          case 99: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 199: break;
          case 100: 
            { return symbol(sym.STRING_LITERAL,new String(yytext()));
            }
          case 200: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
