
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 05 23:33:35 BRT 2016
//----------------------------------------------------

package compiler.generated;

import java_cup.runtime.*;
import compiler.core.*;
import compiler.analysis.*;
import compiler.util.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 05 23:33:35 BRT 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\351\000\002\002\004\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\002\005\000\002" +
    "\002\004\000\002\011\005\000\002\012\002\000\002\012" +
    "\003\000\002\032\003\000\002\032\004\000\002\030\005" +
    "\000\002\031\005\000\002\031\003\000\002\004\003\000" +
    "\002\004\003\000\002\010\003\000\002\010\005\000\002" +
    "\016\002\000\002\016\004\000\002\017\002\000\002\017" +
    "\004\000\002\020\003\000\002\020\005\000\002\124\002" +
    "\000\002\125\002\000\002\005\014\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\126\002\000\002\024\012\000\002\127" +
    "\002\000\002\101\007\000\002\025\010\000\002\026\005" +
    "\000\002\026\006\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\002\000\002\007\004" +
    "\000\002\050\003\000\002\050\005\000\002\051\005\000" +
    "\002\053\002\000\002\053\004\000\002\052\003\000\002" +
    "\052\005\000\002\052\003\000\002\047\002\000\002\047" +
    "\004\000\002\054\003\000\002\054\005\000\002\055\002" +
    "\000\002\055\003\000\002\027\003\000\002\043\004\000" +
    "\002\042\002\000\002\042\004\000\002\033\004\000\002" +
    "\044\005\000\002\045\002\000\002\045\003\000\002\046" +
    "\003\000\002\046\005\000\002\021\002\000\002\021\004" +
    "\000\002\035\011\000\002\023\002\000\002\023\004\000" +
    "\002\022\002\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\040\004\000\002\040" +
    "\005\000\002\037\003\000\002\037\004\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\007\000\002\037\005\000\002\037\004\000\002\037" +
    "\005\000\002\037\004\000\002\037\005\000\002\037\005" +
    "\000\002\037\003\000\002\041\003\000\002\041\004\000" +
    "\002\100\003\000\002\100\003\000\002\056\010\000\002" +
    "\040\005\000\002\057\002\000\002\057\004\000\002\064" +
    "\011\000\002\065\007\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\005\000\002\060\004" +
    "\000\002\123\005\000\002\112\003\000\002\112\003\000" +
    "\002\130\002\000\002\066\012\000\002\131\002\000\002" +
    "\066\012\000\002\132\002\000\002\066\011\000\002\133" +
    "\002\000\002\066\013\000\002\003\003\000\002\113\003" +
    "\000\002\113\003\000\002\113\003\000\002\113\003\000" +
    "\002\113\003\000\002\113\003\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\070" +
    "\003\000\002\070\004\000\002\070\003\000\002\102\004" +
    "\000\002\102\004\000\002\102\004\000\002\102\005\000" +
    "\002\061\003\000\002\114\003\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\114\003\000\002\103\005\000\002\071\006" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\115\003\000\002\115\003\000\002\115\003\000\002\115" +
    "\003\000\002\115\003\000\002\072\002\000\002\072\010" +
    "\000\002\116\003\000\002\116\003\000\002\073\002\000" +
    "\002\073\004\000\002\105\005\000\002\074\011\000\002" +
    "\117\003\000\002\117\003\000\002\117\003\000\002\117" +
    "\003\000\002\107\006\000\002\106\004\000\002\106\005" +
    "\000\002\075\002\000\002\075\004\000\002\110\004\000" +
    "\002\122\006\000\002\122\005\000\002\122\005\000\002" +
    "\121\002\000\002\121\005\000\002\076\005\000\002\076" +
    "\004\000\002\076\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\104\004\000\002\104\005\000\002" +
    "\104\007\000\002\104\003\000\002\077\002\000\002\077" +
    "\003\000\002\062\005\000\002\062\005\000\002\062\004" +
    "\000\002\062\004\000\002\062\004\000\002\120\002\000" +
    "\002\120\003\000\002\063\003\000\002\063\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\004\030\006\001\ufff3\000\030\031\016\032" +
    "\025\033\027\034\022\035\036\036\026\037\033\040\032" +
    "\041\023\042\034\043\030\001\uffc9\000\002\001\ufff2\000" +
    "\004\150\012\001\002\000\004\002\010\001\002\000\002" +
    "\001\001\000\006\016\014\017\013\001\002\000\002\001" +
    "\uffea\000\002\001\ufff4\000\004\150\015\001\002\000\002" +
    "\001\uffe9\000\004\150\012\001\002\000\026\032\025\033" +
    "\027\034\022\035\036\036\026\037\033\040\032\041\023" +
    "\042\034\043\030\001\uffc9\000\006\045\043\054\042\001" +
    "\002\000\004\031\016\001\ufff1\000\002\001\uffd2\000\002" +
    "\001\uffce\000\002\001\uffec\000\002\001\uffd3\000\002\001" +
    "\uffd0\000\002\001\uffd1\000\002\001\uffca\000\002\001\ufff5" +
    "\000\002\001\uffcf\000\002\001\uffcc\000\002\001\uffcd\000" +
    "\002\001\uffeb\000\002\001\uffcb\000\026\032\025\033\027" +
    "\034\022\035\036\036\026\037\033\040\032\041\023\042" +
    "\034\043\030\001\uffc9\000\002\001\ufff6\000\002\001\ufff0" +
    "\000\004\150\u0163\001\002\000\004\150\044\001\002\000" +
    "\002\001\uffe2\000\004\046\046\001\uffe8\000\004\150\012" +
    "\001\002\000\002\001\uffe1\000\004\047\052\001\uffe6\000" +
    "\004\022\057\001\002\000\004\150\012\001\002\000\002" +
    "\001\uffe5\000\006\016\014\021\055\001\uffe4\000\004\150" +
    "\012\001\002\000\002\001\uffe3\000\054\004\076\005\072" +
    "\006\102\007\067\010\061\011\071\014\077\015\104\017" +
    "\065\032\025\033\027\034\022\035\036\036\026\037\033" +
    "\040\032\041\023\042\034\043\030\050\103\150\074\001" +
    "\uffac\000\002\001\uffde\000\002\001\ufffa\000\004\023\u0161" +
    "\001\002\000\004\105\112\001\uffb7\000\026\004\076\005" +
    "\072\006\102\007\067\010\061\011\071\014\077\015\104" +
    "\050\103\150\330\001\002\000\002\001\uffdb\000\002\001" +
    "\uffdf\000\002\001\ufffc\000\004\150\110\001\002\000\002" +
    "\001\ufffe\000\002\001\uffff\000\004\016\014\001\ufff7\000" +
    "\010\016\uffea\105\uffea\150\uffea\001\uffb9\000\002\001\uffdc" +
    "\000\002\001\000\000\002\001\ufffb\000\002\001\uffdd\000" +
    "\054\004\076\005\072\006\102\007\067\010\061\011\071" +
    "\014\077\015\104\017\065\032\025\033\027\034\022\035" +
    "\036\036\026\037\033\040\032\041\023\042\034\043\030" +
    "\050\103\150\074\001\uffac\000\002\001\ufffd\000\002\001" +
    "\ufff8\000\002\001\ufff9\000\002\001\uffab\000\004\017\326" +
    "\001\002\000\004\021\324\001\uffc7\000\004\105\112\001" +
    "\uffb7\000\004\105\112\001\uffb7\000\004\106\322\001\002" +
    "\000\004\024\114\001\uffc4\000\044\022\130\025\127\052" +
    "\132\053\150\074\145\075\142\076\126\100\143\101\121" +
    "\102\123\143\146\144\144\145\124\146\147\147\133\150" +
    "\125\151\153\001\002\000\002\001\uffc5\000\002\001\uff86" +
    "\000\002\001\uff81\000\002\001\uff82\000\042\025\127\052" +
    "\132\053\150\074\145\075\142\076\126\100\143\101\121" +
    "\102\123\143\146\144\144\145\124\146\147\147\133\150" +
    "\161\151\153\001\002\000\002\001\uff7f\000\042\025\127" +
    "\052\132\053\150\074\145\075\142\076\126\100\143\101" +
    "\121\102\123\143\146\144\144\145\124\146\147\147\133" +
    "\150\161\151\153\001\002\000\002\001\uff2b\000\014\017" +
    "\uffc0\021\uffc0\023\uffc0\024\263\025\264\001\uff7c\000\002" +
    "\001\uff77\000\064\004\076\005\072\006\102\007\067\010" +
    "\061\011\071\014\077\015\104\025\127\050\103\052\132" +
    "\053\150\074\145\075\142\076\126\100\143\101\121\102" +
    "\123\143\146\144\144\145\124\146\147\147\133\150\313" +
    "\151\153\001\002\000\044\022\130\025\127\052\132\053" +
    "\150\074\145\075\142\076\126\100\143\101\121\102\123" +
    "\143\146\144\144\145\124\146\147\147\133\150\125\151" +
    "\153\001\uffbf\000\002\001\uff83\000\002\001\uff7d\000\002" +
    "\001\uff29\000\002\001\uff85\000\116\016\217\020\170\021" +
    "\241\025\175\075\142\076\126\077\216\100\200\102\203" +
    "\103\211\104\224\105\225\107\232\110\237\111\176\112" +
    "\205\113\234\114\171\115\167\116\201\117\222\120\236" +
    "\121\204\122\173\123\207\124\212\125\202\126\233\127" +
    "\231\130\223\131\166\132\172\133\213\134\214\136\215" +
    "\140\235\141\220\142\221\001\uffc2\000\042\025\127\052" +
    "\132\053\150\074\145\075\142\076\126\100\143\101\121" +
    "\102\123\143\146\144\144\145\124\146\147\147\133\150" +
    "\161\151\153\001\002\000\002\001\uff84\000\002\001\uff80" +
    "\000\002\001\uff88\000\002\001\uff78\000\042\025\127\052" +
    "\132\053\150\074\145\075\142\076\126\100\143\101\121" +
    "\102\123\143\146\144\144\145\124\146\147\147\133\150" +
    "\161\151\153\001\002\000\002\001\uff2c\000\030\004\076" +
    "\005\072\006\102\007\067\010\061\011\071\014\077\015" +
    "\104\025\156\050\103\150\012\001\002\000\002\001\uff2d" +
    "\000\002\001\uff2a\000\002\001\uff7e\000\002\001\uff87\000" +
    "\002\001\uffc3\000\002\001\uff28\000\004\026\273\001\uff32" +
    "\000\002\001\uff36\000\042\025\127\052\132\053\150\074" +
    "\145\075\142\076\126\100\143\101\121\102\123\143\146" +
    "\144\144\145\124\146\147\147\133\150\161\151\153\001" +
    "\002\000\006\016\014\025\160\001\ufff7\000\042\025\127" +
    "\052\132\053\150\074\145\075\142\076\126\100\143\101" +
    "\121\102\123\143\146\144\144\145\124\146\147\147\133" +
    "\150\161\151\153\001\uff1c\000\006\024\263\025\264\001" +
    "\uff7c\000\004\026\262\001\002\000\116\016\217\020\170" +
    "\021\210\025\175\075\142\076\126\077\216\100\200\102" +
    "\203\103\211\104\224\105\225\107\232\110\237\111\176" +
    "\112\205\113\234\114\171\115\167\116\201\117\222\120" +
    "\236\121\204\122\173\123\207\124\212\125\202\126\233" +
    "\127\231\130\223\131\166\132\172\133\213\134\214\136" +
    "\215\140\235\141\220\142\221\001\uff1a\000\002\001\uff1b" +
    "\000\002\001\uff7a\000\002\001\uff66\000\002\001\uff59\000" +
    "\002\001\uff69\000\002\001\uff58\000\002\001\uff64\000\002" +
    "\001\uff4d\000\002\001\uff5e\000\042\025\127\052\132\053" +
    "\150\074\145\075\142\076\126\100\143\101\121\102\123" +
    "\143\146\144\144\145\124\146\147\147\133\150\161\151" +
    "\153\001\uff1c\000\002\001\uff3c\000\042\025\127\052\132" +
    "\053\150\074\145\075\142\076\126\100\143\101\121\102" +
    "\123\143\146\144\144\145\124\146\147\147\133\150\161" +
    "\151\153\001\002\000\002\001\uff6b\000\004\150\012\001" +
    "\002\000\002\001\uff4f\000\002\001\uff55\000\002\001\uff52" +
    "\000\002\001\uff5a\000\042\025\127\052\132\053\150\074" +
    "\145\075\142\076\126\100\143\101\121\102\123\143\146" +
    "\144\144\145\124\146\147\147\133\150\161\151\153\001" +
    "\002\000\002\001\uff50\000\042\025\127\052\132\053\150" +
    "\074\145\075\142\076\126\100\143\101\121\102\123\143" +
    "\146\144\144\145\124\146\147\147\133\150\161\151\153" +
    "\001\002\000\002\001\uff67\000\002\001\uff4b\000\002\001" +
    "\uff6c\000\002\001\uff6a\000\002\001\uff3f\000\002\001\uff6d" +
    "\000\042\025\127\052\132\053\150\074\145\075\142\076" +
    "\126\100\143\101\121\102\123\143\146\144\144\145\124" +
    "\146\147\147\133\150\161\151\153\001\002\000\002\001" +
    "\uff4c\000\002\001\uff4e\000\002\001\uff57\000\002\001\uff68" +
    "\000\002\001\uff65\000\042\025\127\052\132\053\150\074" +
    "\145\075\142\076\126\100\143\101\121\102\123\143\146" +
    "\144\144\145\124\146\147\147\133\150\161\151\153\001" +
    "\002\000\042\025\127\052\132\053\150\074\145\075\142" +
    "\076\126\100\143\101\121\102\123\143\146\144\144\145" +
    "\124\146\147\147\133\150\161\151\153\001\002\000\042" +
    "\025\127\052\132\053\150\074\145\075\142\076\126\100" +
    "\143\101\121\102\123\143\146\144\144\145\124\146\147" +
    "\147\133\150\161\151\153\001\002\000\042\025\127\052" +
    "\132\053\150\074\145\075\142\076\126\100\143\101\121" +
    "\102\123\143\146\144\144\145\124\146\147\147\133\150" +
    "\161\151\153\001\002\000\042\025\127\052\132\053\150" +
    "\074\145\075\142\076\126\100\143\101\121\102\123\143" +
    "\146\144\144\145\124\146\147\147\133\150\161\151\153" +
    "\001\002\000\002\001\uff3e\000\002\001\uff4a\000\002\001" +
    "\uff5b\000\002\001\uff51\000\002\001\uff56\000\002\001\uff3d" +
    "\000\120\016\217\020\170\021\241\025\175\027\242\075" +
    "\142\076\126\077\216\100\200\102\203\103\211\104\224" +
    "\105\225\107\232\110\237\111\176\112\205\113\234\114" +
    "\171\115\167\116\201\117\222\120\236\121\204\122\173" +
    "\123\207\124\212\125\202\126\233\127\231\130\223\131" +
    "\166\132\172\133\213\134\214\136\215\140\235\141\220" +
    "\142\221\001\002\000\042\025\127\052\132\053\150\074" +
    "\145\075\142\076\126\100\143\101\121\102\123\143\146" +
    "\144\144\145\124\146\147\147\133\150\161\151\153\001" +
    "\002\000\042\025\127\052\132\053\150\074\145\075\142" +
    "\076\126\100\143\101\121\102\123\143\146\144\144\145" +
    "\124\146\147\147\133\150\161\151\153\001\002\000\116" +
    "\016\217\020\170\021\241\025\175\075\142\076\126\077" +
    "\216\100\200\102\203\103\211\104\224\105\225\107\232" +
    "\110\237\111\176\112\205\113\234\114\171\115\167\116" +
    "\201\117\222\120\236\121\204\122\173\123\207\124\212" +
    "\125\202\126\233\127\231\130\223\131\166\132\172\133" +
    "\213\134\214\136\215\140\235\141\220\142\221\001\uff25" +
    "\000\116\016\217\020\170\021\241\025\175\075\142\076" +
    "\126\077\216\100\200\102\203\103\211\104\224\105\225" +
    "\107\232\110\237\111\176\112\205\113\234\114\171\115" +
    "\167\116\201\117\222\120\236\121\204\122\173\123\207" +
    "\124\212\125\202\126\233\127\231\130\223\131\166\132" +
    "\172\133\213\134\214\136\215\140\235\141\220\142\221" +
    "\001\uff1e\000\116\016\217\020\170\021\241\025\175\075" +
    "\142\076\126\077\216\100\200\102\203\103\211\104\224" +
    "\105\225\107\232\110\237\111\176\112\205\113\234\114" +
    "\171\115\167\116\201\117\222\120\236\121\204\122\173" +
    "\123\207\124\212\125\202\126\233\127\231\130\223\131" +
    "\166\132\172\133\213\134\214\136\215\140\235\141\220" +
    "\142\221\001\uff41\000\116\016\217\020\170\021\241\025" +
    "\175\075\142\076\126\077\216\100\200\102\203\103\211" +
    "\104\224\105\225\107\232\110\237\111\176\112\205\113" +
    "\234\114\171\115\167\116\201\117\222\120\236\121\204" +
    "\122\173\123\207\124\212\125\202\126\233\127\231\130" +
    "\223\131\166\132\172\133\213\134\214\136\215\140\235" +
    "\141\220\142\221\001\uff5d\000\116\016\217\020\170\021" +
    "\241\025\175\075\142\076\126\077\216\100\200\102\203" +
    "\103\211\104\224\105\225\107\232\110\237\111\176\112" +
    "\205\113\234\114\171\115\167\116\201\117\222\120\236" +
    "\121\204\122\173\123\207\124\212\125\202\126\233\127" +
    "\231\130\223\131\166\132\172\133\213\134\214\136\215" +
    "\140\235\141\220\142\221\001\uff54\000\120\016\217\020" +
    "\170\021\241\025\175\075\142\076\126\077\216\100\200" +
    "\102\203\103\211\104\224\105\225\106\251\107\232\110" +
    "\237\111\176\112\205\113\234\114\171\115\167\116\201" +
    "\117\222\120\236\121\204\122\173\123\207\124\212\125" +
    "\202\126\233\127\231\130\223\131\166\132\172\133\213" +
    "\134\214\136\215\140\235\141\220\142\221\001\002\000" +
    "\002\001\uff20\000\116\016\217\020\170\021\241\025\175" +
    "\075\142\076\126\077\216\100\200\102\203\103\211\104" +
    "\224\105\225\107\232\110\237\111\176\112\205\113\234" +
    "\114\171\115\167\116\201\117\222\120\236\121\204\122" +
    "\173\123\207\124\212\125\202\126\233\127\231\130\223" +
    "\131\166\132\172\133\213\134\214\136\215\140\235\141" +
    "\220\142\221\001\uff1f\000\116\016\217\020\170\021\210" +
    "\025\175\075\142\076\126\077\216\100\200\102\203\103" +
    "\211\104\224\105\225\107\232\110\237\111\176\112\205" +
    "\113\234\114\171\115\167\116\201\117\222\120\236\121" +
    "\204\122\173\123\207\124\212\125\202\126\233\127\231" +
    "\130\223\131\166\132\172\133\213\134\214\136\215\140" +
    "\235\141\220\142\221\001\uff1e\000\002\001\uff19\000\116" +
    "\016\217\020\170\021\241\025\175\075\142\076\126\077" +
    "\216\100\200\102\203\103\211\104\224\105\225\107\232" +
    "\110\237\111\176\112\205\113\234\114\171\115\167\116" +
    "\201\117\222\120\236\121\204\122\173\123\207\124\212" +
    "\125\202\126\233\127\231\130\223\131\166\132\172\133" +
    "\213\134\214\136\215\140\235\141\220\142\221\001\uff39" +
    "\000\004\016\014\001\uff1d\000\116\016\217\020\170\021" +
    "\241\025\175\075\142\076\126\077\216\100\200\102\203" +
    "\103\211\104\224\105\225\107\232\110\237\111\176\112" +
    "\205\113\234\114\171\115\167\116\201\117\222\120\236" +
    "\121\204\122\173\123\207\124\212\125\202\126\233\127" +
    "\231\130\223\131\166\132\172\133\213\134\214\136\215" +
    "\140\235\141\220\142\221\001\uff26\000\004\026\261\001" +
    "\002\000\002\001\uff21\000\002\001\uff35\000\042\025\127" +
    "\052\132\053\150\074\145\075\142\076\126\100\143\101" +
    "\121\102\123\143\146\144\144\145\124\146\147\147\133" +
    "\150\161\151\153\001\002\000\002\001\uffd8\000\042\025" +
    "\127\052\132\053\150\074\145\075\142\076\126\100\143" +
    "\101\121\102\123\143\146\144\144\145\124\146\147\147" +
    "\133\150\161\151\153\001\uff1c\000\004\026\267\001\002" +
    "\000\002\001\uffd7\000\116\016\217\020\170\021\241\025" +
    "\175\075\142\076\126\077\216\100\200\102\203\103\211" +
    "\104\224\105\225\107\232\110\237\111\176\112\205\113" +
    "\234\114\171\115\167\116\201\117\222\120\236\121\204" +
    "\122\173\123\207\124\212\125\202\126\233\127\231\130" +
    "\223\131\166\132\172\133\213\134\214\136\215\140\235" +
    "\141\220\142\221\001\uff79\000\120\016\217\020\170\021" +
    "\241\025\175\026\272\075\142\076\126\077\216\100\200" +
    "\102\203\103\211\104\224\105\225\107\232\110\237\111" +
    "\176\112\205\113\234\114\171\115\167\116\201\117\222" +
    "\120\236\121\204\122\173\123\207\124\212\125\202\126" +
    "\233\127\231\130\223\131\166\132\172\133\213\134\214" +
    "\136\215\140\235\141\220\142\221\001\002\000\002\001" +
    "\uff33\000\042\025\127\052\132\053\150\074\145\075\142" +
    "\076\126\100\143\101\121\102\123\143\146\144\144\145" +
    "\124\146\147\147\133\150\161\151\153\001\002\000\004" +
    "\105\112\001\uffb7\000\002\001\uff34\000\116\016\217\020" +
    "\170\021\241\025\277\075\142\076\126\077\216\100\200" +
    "\102\203\103\211\104\224\105\225\107\232\110\237\111" +
    "\176\112\205\113\234\114\171\115\167\116\201\117\222" +
    "\120\236\121\204\122\173\123\207\124\212\125\202\126" +
    "\233\127\231\130\223\131\166\132\172\133\213\134\214" +
    "\136\215\140\235\141\220\142\221\001\002\000\042\025" +
    "\127\052\132\053\150\074\145\075\142\076\126\100\143" +
    "\101\121\102\123\143\146\144\144\145\124\146\147\147" +
    "\133\150\161\151\153\001\uff31\000\116\016\217\020\170" +
    "\021\241\025\175\075\142\076\126\077\216\100\200\102" +
    "\203\103\211\104\224\105\225\107\232\110\237\111\176" +
    "\112\205\113\234\114\171\115\167\116\201\117\222\120" +
    "\236\121\204\122\173\123\207\124\212\125\202\126\233" +
    "\127\231\130\223\131\166\132\172\133\213\134\214\136" +
    "\215\140\235\141\220\142\221\001\uff60\000\116\016\217" +
    "\020\170\021\241\025\175\075\142\076\126\077\216\100" +
    "\200\102\203\103\211\104\224\105\225\107\232\110\237" +
    "\111\176\112\205\113\234\114\171\115\167\116\201\117" +
    "\222\120\236\121\204\122\173\123\207\124\212\125\202" +
    "\126\233\127\231\130\223\131\166\132\172\133\213\134" +
    "\214\136\215\140\235\141\220\142\221\001\uff5f\000\004" +
    "\021\310\001\uffbb\000\004\021\306\001\uffbd\000\004\023" +
    "\305\001\002\000\002\001\uffc1\000\044\022\130\025\127" +
    "\052\132\053\150\074\145\075\142\076\126\100\143\101" +
    "\121\102\123\143\146\144\144\145\124\146\147\147\133" +
    "\150\125\151\153\001\002\000\002\001\uffbc\000\002\001" +
    "\uffba\000\002\001\uffbe\000\120\016\217\020\170\021\241" +
    "\025\175\026\317\075\142\076\126\077\216\100\200\102" +
    "\203\103\211\104\224\105\225\107\232\110\237\111\176" +
    "\112\205\113\234\114\171\115\167\116\201\117\222\120" +
    "\236\121\204\122\173\123\207\124\212\125\202\126\233" +
    "\127\231\130\223\131\166\132\172\133\213\134\214\136" +
    "\215\140\235\141\220\142\221\001\002\000\016\016\uffea" +
    "\024\263\025\264\026\uffea\105\uffea\150\uffea\001\uff7c\000" +
    "\004\026\315\001\002\000\042\025\127\052\132\053\150" +
    "\074\145\075\142\076\126\100\143\101\121\102\123\143" +
    "\146\144\144\145\124\146\147\147\133\150\161\151\153" +
    "\001\002\000\116\016\217\020\170\021\241\025\175\075" +
    "\142\076\126\077\216\100\200\102\203\103\211\104\224" +
    "\105\225\107\232\110\237\111\176\112\205\113\234\114" +
    "\171\115\167\116\201\117\222\120\236\121\204\122\173" +
    "\123\207\124\212\125\202\126\233\127\231\130\223\131" +
    "\166\132\172\133\213\134\214\136\215\140\235\141\220" +
    "\142\221\001\uff3b\000\002\001\uff7b\000\116\016\217\020" +
    "\170\021\241\025\175\075\142\076\126\077\216\100\200" +
    "\102\203\103\211\104\224\105\225\107\232\110\237\111" +
    "\176\112\205\113\234\114\171\115\167\116\201\117\222" +
    "\120\236\121\204\122\173\123\207\124\212\125\202\126" +
    "\233\127\231\130\223\131\166\132\172\133\213\134\214" +
    "\136\215\140\235\141\220\142\221\001\uff27\000\116\016" +
    "\217\020\170\021\241\025\175\075\142\076\126\077\216" +
    "\100\200\102\203\103\211\104\224\105\225\107\232\110" +
    "\237\111\176\112\205\113\234\114\171\115\167\116\201" +
    "\117\222\120\236\121\204\122\173\123\207\124\212\125" +
    "\202\126\233\127\231\130\223\131\166\132\172\133\213" +
    "\134\214\136\215\140\235\141\220\142\221\001\uff3a\000" +
    "\002\001\uffb8\000\002\001\uffb6\000\004\150\110\001\002" +
    "\000\002\001\uffc6\000\002\001\uffd5\000\004\150\u0158\001" +
    "\002\000\004\025\331\001\uffea\000\026\004\076\005\072" +
    "\006\102\007\067\010\061\011\071\014\077\015\104\050" +
    "\103\150\012\001\uffb3\000\004\026\342\001\002\000\004" +
    "\150\340\001\002\000\004\021\336\001\uffb1\000\002\001" +
    "\uffb2\000\026\004\076\005\072\006\102\007\067\010\061" +
    "\011\071\014\077\015\104\050\103\150\012\001\002\000" +
    "\002\001\uffb0\000\004\105\112\001\uffb7\000\002\001\uffb4" +
    "\000\004\022\344\001\002\000\002\001\uffd6\000\144\004" +
    "\076\005\072\006\102\007\067\010\061\011\071\014\077" +
    "\015\104\017\366\022\344\023\350\025\127\027\375\032" +
    "\025\033\027\034\022\035\036\036\026\037\033\040\032" +
    "\041\023\042\371\043\030\050\103\052\132\053\150\055" +
    "\373\057\355\062\357\063\354\064\356\065\364\066\372" +
    "\067\360\070\351\071\361\074\145\075\142\076\126\100" +
    "\143\101\121\102\123\143\146\144\144\145\124\146\147" +
    "\147\133\150\313\151\153\001\002\000\026\004\076\005" +
    "\072\006\102\007\067\010\061\011\071\014\077\015\104" +
    "\050\103\150\012\001\002\000\002\001\uff9d\000\002\001" +
    "\uff9b\000\002\001\uffa5\000\042\025\127\052\132\053\150" +
    "\074\145\075\142\076\126\100\143\101\121\102\123\143" +
    "\146\144\144\145\124\146\147\147\133\150\161\151\153" +
    "\001\002\000\002\001\uff9c\000\002\001\uffa3\000\004\025" +
    "\u014f\001\002\000\004\025\u0141\001\002\000\002\001\uff6e" +
    "\000\142\004\076\005\072\006\102\007\067\010\061\011" +
    "\071\014\077\015\104\017\366\022\344\025\127\027\375" +
    "\032\025\033\027\034\022\035\036\036\026\037\033\040" +
    "\032\041\023\042\371\043\030\050\103\052\132\053\150" +
    "\055\373\057\355\062\357\063\354\064\356\065\364\066" +
    "\372\067\360\070\351\071\361\074\145\075\142\076\126" +
    "\100\143\101\121\102\123\143\146\144\144\145\124\146" +
    "\147\147\133\150\313\151\153\001\002\000\044\017\u0138" +
    "\025\127\052\132\053\150\074\145\075\142\076\126\100" +
    "\143\101\121\102\123\143\146\144\144\145\124\146\147" +
    "\147\133\150\161\151\153\001\002\000\142\004\076\005" +
    "\072\006\102\007\067\010\061\011\071\014\077\015\104" +
    "\017\366\022\344\025\127\027\375\032\025\033\027\034" +
    "\022\035\036\036\026\037\033\040\032\041\023\042\371" +
    "\043\030\050\103\052\132\053\150\055\373\057\355\062" +
    "\357\063\354\064\356\065\364\066\372\067\360\070\351" +
    "\071\361\074\145\075\142\076\126\100\143\101\121\102" +
    "\123\143\146\144\144\145\124\146\147\147\133\150\313" +
    "\151\153\001\002\000\002\001\uffa1\000\144\004\076\005" +
    "\072\006\102\007\067\010\061\011\071\014\077\015\104" +
    "\017\366\022\344\023\u012b\025\127\027\375\032\025\033" +
    "\027\034\022\035\036\036\026\037\033\040\032\041\023" +
    "\042\371\043\030\050\103\052\132\053\150\055\373\057" +
    "\355\062\357\063\354\064\356\065\364\066\372\067\360" +
    "\070\351\071\361\074\145\075\142\076\126\100\143\101" +
    "\121\102\123\143\146\144\144\145\124\146\147\147\133" +
    "\150\313\151\153\001\002\000\004\150\u0122\001\uff23\000" +
    "\002\001\uffa0\000\002\001\uff93\000\002\001\uff9e\000\120" +
    "\016\217\017\u0128\020\170\021\241\025\175\075\142\076" +
    "\126\077\216\100\200\102\203\103\211\104\224\105\225" +
    "\107\232\110\237\111\176\112\205\113\234\114\171\115" +
    "\167\116\201\117\222\120\236\121\204\122\173\123\207" +
    "\124\212\125\202\126\233\127\231\130\223\131\166\132" +
    "\172\133\213\134\214\136\215\140\235\141\220\142\221" +
    "\001\002\000\004\025\u0124\001\uffcd\000\004\150\u0122\001" +
    "\uff23\000\004\025\u011a\001\002\000\004\025\u0102\001\002" +
    "\000\142\004\076\005\072\006\102\007\067\010\061\011" +
    "\071\014\077\015\104\017\366\022\344\025\127\027\375" +
    "\032\025\033\027\034\022\035\036\036\026\037\033\040" +
    "\032\041\023\042\371\043\030\050\103\052\132\053\150" +
    "\055\373\057\355\062\357\063\354\064\356\065\364\066" +
    "\372\067\360\070\351\071\361\074\145\075\142\076\126" +
    "\100\143\101\121\102\123\143\146\144\144\145\124\146" +
    "\147\147\133\150\313\151\153\001\002\000\004\023\u0100" +
    "\001\uff92\000\002\001\uff9f\000\002\001\uff8d\000\002\001" +
    "\uff96\000\112\004\076\005\072\006\102\007\067\010\061" +
    "\011\071\014\077\015\104\017\u0104\025\127\032\025\033" +
    "\027\034\022\035\036\036\026\037\033\040\032\041\023" +
    "\042\034\043\030\050\103\052\132\053\150\074\145\075" +
    "\142\076\126\100\143\101\121\102\123\143\146\144\144" +
    "\145\124\146\147\147\133\150\313\151\153\001\002\000" +
    "\044\017\u0108\025\127\052\132\053\150\074\145\075\142" +
    "\076\126\100\143\101\121\102\123\143\146\144\144\145" +
    "\124\146\147\147\133\150\161\151\153\001\002\000\002" +
    "\001\uff61\000\002\001\uff63\000\120\016\217\017\u0107\020" +
    "\170\021\241\025\175\075\142\076\126\077\216\100\200" +
    "\102\203\103\211\104\224\105\225\107\232\110\237\111" +
    "\176\112\205\113\234\114\171\115\167\116\201\117\222" +
    "\120\236\121\204\122\173\123\207\124\212\125\202\126" +
    "\233\127\231\130\223\131\166\132\172\133\213\134\214" +
    "\136\215\140\235\141\220\142\221\001\002\000\002\001" +
    "\uff62\000\044\025\127\026\u0113\052\132\053\150\074\145" +
    "\075\142\076\126\100\143\101\121\102\123\143\146\144" +
    "\144\145\124\146\147\147\133\150\161\151\153\001\002" +
    "\000\004\017\u010b\001\002\000\116\016\217\020\170\021" +
    "\241\025\175\075\142\076\126\077\216\100\200\102\203" +
    "\103\211\104\224\105\225\107\232\110\237\111\176\112" +
    "\205\113\234\114\171\115\167\116\201\117\222\120\236" +
    "\121\204\122\173\123\207\124\212\125\202\126\233\127" +
    "\231\130\223\131\166\132\172\133\213\134\214\136\215" +
    "\140\235\141\220\142\221\001\uff5c\000\044\025\127\026" +
    "\u010c\052\132\053\150\074\145\075\142\076\126\100\143" +
    "\101\121\102\123\143\146\144\144\145\124\146\147\147" +
    "\133\150\161\151\153\001\002\000\002\001\uff74\000\004" +
    "\026\u010e\001\002\000\002\001\uff70\000\004\022\344\001" +
    "\002\000\002\001\uff6f\000\004\022\344\001\002\000\002" +
    "\001\uff73\000\002\001\uff72\000\004\026\u0115\001\002\000" +
    "\002\001\uff76\000\004\022\344\001\002\000\002\001\uff75" +
    "\000\004\022\344\001\002\000\002\001\uff71\000\042\025" +
    "\127\052\132\053\150\074\145\075\142\076\126\100\143" +
    "\101\121\102\123\143\146\144\144\145\124\146\147\147" +
    "\133\150\161\151\153\001\002\000\120\016\217\020\170" +
    "\021\241\025\175\026\u011c\075\142\076\126\077\216\100" +
    "\200\102\203\103\211\104\224\105\225\107\232\110\237" +
    "\111\176\112\205\113\234\114\171\115\167\116\201\117" +
    "\222\120\236\121\204\122\173\123\207\124\212\125\202" +
    "\126\233\127\231\130\223\131\166\132\172\133\213\134" +
    "\214\136\215\140\235\141\220\142\221\001\002\000\142" +
    "\004\076\005\072\006\102\007\067\010\061\011\071\014" +
    "\077\015\104\017\366\022\344\025\127\027\375\032\025" +
    "\033\027\034\022\035\036\036\026\037\033\040\032\041" +
    "\023\042\371\043\030\050\103\052\132\053\150\055\373" +
    "\057\355\062\357\063\354\064\356\065\364\066\372\067" +
    "\360\070\351\071\361\074\145\075\142\076\126\100\143" +
    "\101\121\102\123\143\146\144\144\145\124\146\147\147" +
    "\133\150\313\151\153\001\002\000\004\056\u011e\001\uff8c" +
    "\000\142\004\076\005\072\006\102\007\067\010\061\011" +
    "\071\014\077\015\104\017\366\022\344\025\127\027\375" +
    "\032\025\033\027\034\022\035\036\036\026\037\033\040" +
    "\032\041\023\042\371\043\030\050\103\052\132\053\150" +
    "\055\373\057\355\062\357\063\354\064\356\065\364\066" +
    "\372\067\360\070\351\071\361\074\145\075\142\076\126" +
    "\100\143\101\121\102\123\143\146\144\144\145\124\146" +
    "\147\147\133\150\313\151\153\001\002\000\002\001\uff8e" +
    "\000\002\001\uff8b\000\004\017\u0123\001\002\000\002\001" +
    "\uff22\000\002\001\uff94\000\042\025\127\052\132\053\150" +
    "\074\145\075\142\076\126\100\143\101\121\102\123\143" +
    "\146\144\144\145\124\146\147\147\133\150\161\151\153" +
    "\001\002\000\120\016\217\020\170\021\241\025\175\026" +
    "\u0126\075\142\076\126\077\216\100\200\102\203\103\211" +
    "\104\224\105\225\107\232\110\237\111\176\112\205\113" +
    "\234\114\171\115\167\116\201\117\222\120\236\121\204" +
    "\122\173\123\207\124\212\125\202\126\233\127\231\130" +
    "\223\131\166\132\172\133\213\134\214\136\215\140\235" +
    "\141\220\142\221\001\002\000\142\004\076\005\072\006" +
    "\102\007\067\010\061\011\071\014\077\015\104\017\366" +
    "\022\344\025\127\027\375\032\025\033\027\034\022\035" +
    "\036\036\026\037\033\040\032\041\023\042\371\043\030" +
    "\050\103\052\132\053\150\055\373\057\355\062\357\063" +
    "\354\064\356\065\364\066\372\067\360\070\351\071\361" +
    "\074\145\075\142\076\126\100\143\101\121\102\123\143" +
    "\146\144\144\145\124\146\147\147\133\150\313\151\153" +
    "\001\002\000\002\001\uff9a\000\002\001\uffa2\000\004\017" +
    "\u012a\001\002\000\002\001\uff95\000\002\001\uffa4\000\002" +
    "\001\uff91\000\004\072\u012f\001\uff47\000\004\073\u0136\001" +
    "\uff43\000\004\025\u0130\001\002\000\026\004\076\005\072" +
    "\006\102\007\067\010\061\011\071\014\077\015\104\050" +
    "\103\150\012\001\002\000\004\026\u0132\001\002\000\142" +
    "\004\076\005\072\006\102\007\067\010\061\011\071\014" +
    "\077\015\104\017\366\022\344\025\127\027\375\032\025" +
    "\033\027\034\022\035\036\036\026\037\033\040\032\041" +
    "\023\042\371\043\030\050\103\052\132\053\150\055\373" +
    "\057\355\062\357\063\354\064\356\065\364\066\372\067" +
    "\360\070\351\071\361\074\145\075\142\076\126\100\143" +
    "\101\121\102\123\143\146\144\144\145\124\146\147\147" +
    "\133\150\313\151\153\001\002\000\004\072\u012f\001\uff47" +
    "\000\002\001\uff46\000\002\001\uff53\000\142\004\076\005" +
    "\072\006\102\007\067\010\061\011\071\014\077\015\104" +
    "\017\366\022\344\025\127\027\375\032\025\033\027\034" +
    "\022\035\036\036\026\037\033\040\032\041\023\042\371" +
    "\043\030\050\103\052\132\053\150\055\373\057\355\062" +
    "\357\063\354\064\356\065\364\066\372\067\360\070\351" +
    "\071\361\074\145\075\142\076\126\100\143\101\121\102" +
    "\123\143\146\144\144\145\124\146\147\147\133\150\313" +
    "\151\153\001\002\000\002\001\uff42\000\002\001\uff98\000" +
    "\004\017\u013a\001\002\000\002\001\uff99\000\004\063\u013c" +
    "\001\002\000\004\025\u013d\001\002\000\042\025\127\052" +
    "\132\053\150\074\145\075\142\076\126\100\143\101\121" +
    "\102\123\143\146\144\144\145\124\146\147\147\133\150" +
    "\161\151\153\001\002\000\120\016\217\020\170\021\241" +
    "\025\175\026\u013f\075\142\076\126\077\216\100\200\102" +
    "\203\103\211\104\224\105\225\107\232\110\237\111\176" +
    "\112\205\113\234\114\171\115\167\116\201\117\222\120" +
    "\236\121\204\122\173\123\207\124\212\125\202\126\233" +
    "\127\231\130\223\131\166\132\172\133\213\134\214\136" +
    "\215\140\235\141\220\142\221\001\002\000\004\017\u0140" +
    "\001\002\000\002\001\uff8a\000\042\025\127\052\132\053" +
    "\150\074\145\075\142\076\126\100\143\101\121\102\123" +
    "\143\146\144\144\145\124\146\147\147\133\150\161\151" +
    "\153\001\002\000\120\016\217\020\170\021\241\025\175" +
    "\026\u0143\075\142\076\126\077\216\100\200\102\203\103" +
    "\211\104\224\105\225\107\232\110\237\111\176\112\205" +
    "\113\234\114\171\115\167\116\201\117\222\120\236\121" +
    "\204\122\173\123\207\124\212\125\202\126\233\127\231" +
    "\130\223\131\166\132\172\133\213\134\214\136\215\140" +
    "\235\141\220\142\221\001\002\000\004\022\u0144\001\002" +
    "\000\146\004\076\005\072\006\102\007\067\010\061\011" +
    "\071\014\077\015\104\017\366\022\344\025\127\027\375" +
    "\032\025\033\027\034\022\035\036\036\026\037\033\040" +
    "\032\041\023\042\371\043\030\050\103\052\132\053\150" +
    "\055\373\057\355\060\u0148\061\u0147\062\357\063\354\064" +
    "\356\065\364\066\372\067\360\070\351\071\361\074\145" +
    "\075\142\076\126\100\143\101\121\102\123\143\146\144" +
    "\144\145\124\146\147\147\133\150\313\151\153\001\uff38" +
    "\000\004\023\u014e\001\002\000\146\004\076\005\072\006" +
    "\102\007\067\010\061\011\071\014\077\015\104\017\366" +
    "\022\344\025\127\027\375\032\025\033\027\034\022\035" +
    "\036\036\026\037\033\040\032\041\023\042\371\043\030" +
    "\050\103\052\132\053\150\055\373\057\355\060\u0148\061" +
    "\u0147\062\357\063\354\064\356\065\364\066\372\067\360" +
    "\070\351\071\361\074\145\075\142\076\126\100\143\101" +
    "\121\102\123\143\146\144\144\145\124\146\147\147\133" +
    "\150\313\151\153\001\uff38\000\004\027\u014c\001\002\000" +
    "\042\025\127\052\132\053\150\074\145\075\142\076\126" +
    "\100\143\101\121\102\123\143\146\144\144\145\124\146" +
    "\147\147\133\150\161\151\153\001\002\000\002\001\uff2e" +
    "\000\120\016\217\020\170\021\241\025\175\027\u014b\075" +
    "\142\076\126\077\216\100\200\102\203\103\211\104\224" +
    "\105\225\107\232\110\237\111\176\112\205\113\234\114" +
    "\171\115\167\116\201\117\222\120\236\121\204\122\173" +
    "\123\207\124\212\125\202\126\233\127\231\130\223\131" +
    "\166\132\172\133\213\134\214\136\215\140\235\141\220" +
    "\142\221\001\002\000\002\001\uff30\000\002\001\uff2f\000" +
    "\002\001\uff37\000\002\001\uff40\000\042\025\127\052\132" +
    "\053\150\074\145\075\142\076\126\100\143\101\121\102" +
    "\123\143\146\144\144\145\124\146\147\147\133\150\161" +
    "\151\153\001\002\000\120\016\217\020\170\021\241\025" +
    "\175\026\u0151\075\142\076\126\077\216\100\200\102\203" +
    "\103\211\104\224\105\225\107\232\110\237\111\176\112" +
    "\205\113\234\114\171\115\167\116\201\117\222\120\236" +
    "\121\204\122\173\123\207\124\212\125\202\126\233\127" +
    "\231\130\223\131\166\132\172\133\213\134\214\136\215" +
    "\140\235\141\220\142\221\001\002\000\142\004\076\005" +
    "\072\006\102\007\067\010\061\011\071\014\077\015\104" +
    "\017\366\022\344\025\127\027\375\032\025\033\027\034" +
    "\022\035\036\036\026\037\033\040\032\041\023\042\371" +
    "\043\030\050\103\052\132\053\150\055\373\057\355\062" +
    "\357\063\354\064\356\065\364\066\372\067\360\070\351" +
    "\071\361\074\145\075\142\076\126\100\143\101\121\102" +
    "\123\143\146\144\144\145\124\146\147\147\133\150\313" +
    "\151\153\001\002\000\002\001\uff89\000\120\016\217\017" +
    "\u0154\020\170\021\241\025\175\075\142\076\126\077\216" +
    "\100\200\102\203\103\211\104\224\105\225\107\232\110" +
    "\237\111\176\112\205\113\234\114\171\115\167\116\201" +
    "\117\222\120\236\121\204\122\173\123\207\124\212\125" +
    "\202\126\233\127\231\130\223\131\166\132\172\133\213" +
    "\134\214\136\215\140\235\141\220\142\221\001\002\000" +
    "\002\001\uff97\000\004\150\110\001\002\000\004\017\u0157" +
    "\001\002\000\002\001\uffd4\000\006\025\u0159\105\112\001" +
    "\uffb7\000\026\004\076\005\072\006\102\007\067\010\061" +
    "\011\071\014\077\015\104\050\103\150\012\001\uffb3\000" +
    "\004\026\u015b\001\002\000\002\001\uffda\000\006\017\u015f" +
    "\022\344\001\002\000\002\001\uff90\000\002\001\uffd9\000" +
    "\002\001\uff8f\000\002\001\uffb5\000\002\001\uffe0\000\004" +
    "\016\014\001\uffe7\000\004\046\u0164\001\uffaf\000\004\150" +
    "\012\001\002\000\004\022\u0166\001\002\000\054\004\076" +
    "\005\072\006\102\007\067\010\061\011\071\014\077\015" +
    "\104\017\065\032\025\033\027\034\022\035\036\036\026" +
    "\037\033\040\032\041\023\042\034\043\030\050\103\150" +
    "\074\001\uffac\000\004\023\u0168\001\002\000\002\001\uffad" +
    "\000\002\001\uffae\000\002\001\uffc8\000\004\016\u016e\001" +
    "\uffed\000\004\017\u016d\001\002\000\002\001\uffef\000\006" +
    "\020\u016f\150\015\001\002\000\002\001\uffee" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\010\002\006\011\004\012\003\001\001\000" +
    "\020\004\030\005\023\006\016\007\017\030\020\032\036" +
    "\035\034\001\001\000\002\001\001\000\004\010\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\u016a\031\u016b\001\001\000\006" +
    "\006\016\007\u0169\001\001\000\002\001\001\000\006\030" +
    "\020\032\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\037\005\023\006\016" +
    "\007\017\035\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\124\044" +
    "\001\001\000\004\016\046\001\001\000\004\010\u0161\001" +
    "\001\000\004\125\047\001\001\000\004\017\050\001\001" +
    "\000\002\001\001\000\006\010\053\020\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\053\020\055" +
    "\001\001\000\002\001\001\000\030\006\016\007\063\010" +
    "\072\022\100\023\061\024\065\025\057\026\077\027\074" +
    "\033\067\034\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\u015f\043\110\001\001" +
    "\000\010\010\072\033\326\034\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\105" +
    "\051\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\016\007\063\010\072\022\100\023\104\024\065\025\057" +
    "\026\077\027\074\033\067\034\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\112\043" +
    "\110\001\001\000\006\042\322\043\110\001\001\000\002" +
    "\001\001\000\004\053\114\001\001\000\034\052\151\060" +
    "\134\101\121\102\140\103\150\104\115\105\133\106\136" +
    "\107\130\110\117\111\116\112\135\123\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\060\320\101\121\102\140\103\150\104" +
    "\115\105\133\106\136\107\130\110\117\111\116\112\135" +
    "\123\137\001\001\000\002\001\001\000\032\060\317\101" +
    "\121\102\140\103\150\104\115\105\133\106\136\107\130" +
    "\110\117\111\116\112\135\123\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\010\072" +
    "\033\313\034\062\060\311\101\121\102\140\103\150\104" +
    "\115\105\133\106\136\107\130\110\117\111\116\112\135" +
    "\123\137\001\001\000\040\047\303\052\302\054\301\060" +
    "\134\101\121\102\140\103\150\104\115\105\133\106\136" +
    "\107\130\110\117\111\116\112\135\123\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\062\164\112\173\113\226\114\225\115" +
    "\176\116\227\117\205\001\001\000\032\060\300\101\121" +
    "\102\140\103\150\104\115\105\133\106\136\107\130\110" +
    "\117\111\116\112\135\123\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\060\277\101\121\102\140\103\150\104\115\105\133" +
    "\106\136\107\130\110\117\111\116\112\135\123\137\001" +
    "\001\000\002\001\001\000\010\010\156\034\153\122\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\273\001\001\000\002\001\001\000\032\060" +
    "\270\101\121\102\140\103\150\104\115\105\133\106\136" +
    "\107\130\110\117\111\116\112\135\123\137\001\001\000" +
    "\002\001\001\000\036\060\162\063\163\101\121\102\140" +
    "\103\150\104\115\105\133\106\136\107\130\110\117\111" +
    "\116\112\135\120\161\123\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\062\164\112\173\113\226\114" +
    "\225\115\176\116\227\117\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\060\162\063\163\101" +
    "\121\102\140\103\150\104\115\105\133\106\136\107\130" +
    "\110\117\111\116\112\135\120\257\123\137\001\001\000" +
    "\002\001\001\000\032\060\256\101\121\102\140\103\150" +
    "\104\115\105\133\106\136\107\130\110\117\111\116\112" +
    "\135\123\137\001\001\000\002\001\001\000\004\010\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\060\254\101\121\102\140" +
    "\103\150\104\115\105\133\106\136\107\130\110\117\111" +
    "\116\112\135\123\137\001\001\000\002\001\001\000\034" +
    "\060\252\063\253\101\121\102\140\103\150\104\115\105" +
    "\133\106\136\107\130\110\117\111\116\112\135\123\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\060\251\101\121\102\140\103\150\104\115\105" +
    "\133\106\136\107\130\110\117\111\116\112\135\123\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\060\247" +
    "\101\121\102\140\103\150\104\115\105\133\106\136\107" +
    "\130\110\117\111\116\112\135\123\137\001\001\000\032" +
    "\060\246\101\121\102\140\103\150\104\115\105\133\106" +
    "\136\107\130\110\117\111\116\112\135\123\137\001\001" +
    "\000\032\060\245\101\121\102\140\103\150\104\115\105" +
    "\133\106\136\107\130\110\117\111\116\112\135\123\137" +
    "\001\001\000\032\060\244\101\121\102\140\103\150\104" +
    "\115\105\133\106\136\107\130\110\117\111\116\112\135" +
    "\123\137\001\001\000\032\060\237\101\121\102\140\103" +
    "\150\104\115\105\133\106\136\107\130\110\117\111\116" +
    "\112\135\123\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\062\164\112\173\113\226\114" +
    "\225\115\176\116\227\117\205\001\001\000\032\060\243" +
    "\101\121\102\140\103\150\104\115\105\133\106\136\107" +
    "\130\110\117\111\116\112\135\123\137\001\001\000\032" +
    "\060\242\101\121\102\140\103\150\104\115\105\133\106" +
    "\136\107\130\110\117\111\116\112\135\123\137\001\001" +
    "\000\020\062\164\112\173\113\226\114\225\115\176\116" +
    "\227\117\205\001\001\000\020\062\164\112\173\113\226" +
    "\114\225\115\176\116\227\117\205\001\001\000\020\062" +
    "\164\112\173\113\226\114\225\115\176\116\227\117\205" +
    "\001\001\000\020\062\164\112\173\113\226\114\225\115" +
    "\176\116\227\117\205\001\001\000\020\062\164\112\173" +
    "\113\226\114\225\115\176\116\227\117\205\001\001\000" +
    "\020\062\164\112\173\113\226\114\225\115\176\116\227" +
    "\117\205\001\001\000\002\001\001\000\020\062\164\112" +
    "\173\113\226\114\225\115\176\116\227\117\205\001\001" +
    "\000\020\062\164\112\173\113\226\114\225\115\176\116" +
    "\227\117\205\001\001\000\002\001\001\000\020\062\164" +
    "\112\173\113\226\114\225\115\176\116\227\117\205\001" +
    "\001\000\002\001\001\000\020\062\164\112\173\113\226" +
    "\114\225\115\176\116\227\117\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\060\267" +
    "\101\121\102\140\103\150\104\115\105\133\106\136\107" +
    "\130\110\117\111\116\112\135\123\137\001\001\000\004" +
    "\127\264\001\001\000\036\060\162\063\163\101\121\102" +
    "\140\103\150\104\115\105\133\106\136\107\130\110\117" +
    "\111\116\112\135\120\265\123\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\062\164\112\173\113\226" +
    "\114\225\115\176\116\227\117\205\001\001\000\020\062" +
    "\164\112\173\113\226\114\225\115\176\116\227\117\205" +
    "\001\001\000\002\001\001\000\032\060\275\101\121\102" +
    "\140\103\150\104\115\105\133\106\136\107\130\110\117" +
    "\111\116\112\135\123\137\001\001\000\006\042\274\043" +
    "\110\001\001\000\002\001\001\000\020\062\164\112\173" +
    "\113\226\114\225\115\176\116\227\117\205\001\001\000" +
    "\036\060\162\063\163\101\121\102\140\103\150\104\115" +
    "\105\133\106\136\107\130\110\117\111\116\112\135\120" +
    "\257\123\137\001\001\000\020\062\164\112\173\113\226" +
    "\114\225\115\176\116\227\117\205\001\001\000\020\062" +
    "\164\112\173\113\226\114\225\115\176\116\227\117\205" +
    "\001\001\000\004\055\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\052\302\054\306" +
    "\060\134\101\121\102\140\103\150\104\115\105\133\106" +
    "\136\107\130\110\117\111\116\112\135\123\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\062\164\112\173\113\226\114\225\115\176\116\227" +
    "\117\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\060\315\101\121\102\140\103\150\104\115\105\133" +
    "\106\136\107\130\110\117\111\116\112\135\123\137\001" +
    "\001\000\020\062\164\112\173\113\226\114\225\115\176" +
    "\116\227\117\205\001\001\000\002\001\001\000\020\062" +
    "\164\112\173\113\226\114\225\115\176\116\227\117\205" +
    "\001\001\000\020\062\164\112\173\113\226\114\225\115" +
    "\176\116\227\117\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\324\051\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\u0155\051\106\001\001" +
    "\000\002\001\001\000\016\010\072\033\332\034\062\044" +
    "\333\045\331\046\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\072\033\332\034\062\044\333\046\336\001\001\000\002" +
    "\001\001\000\006\042\340\043\110\001\001\000\002\001" +
    "\001\000\004\040\342\001\001\000\002\001\001\000\072" +
    "\003\373\006\016\007\344\010\072\026\352\033\067\034" +
    "\062\037\375\040\361\041\362\056\364\060\367\064\376" +
    "\065\366\066\345\071\351\074\346\101\121\102\140\103" +
    "\150\104\115\105\133\106\136\107\130\110\117\111\116" +
    "\112\135\123\137\001\001\000\010\010\072\033\u0154\034" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\060\u0152\101\121\102\140\103\150\104" +
    "\115\105\133\106\136\107\130\110\117\111\116\112\135" +
    "\123\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\003\373\006\016\007\344\010\072\026\352\033\067\034" +
    "\062\037\u013a\040\361\056\364\060\367\064\376\065\366" +
    "\066\345\071\351\074\346\101\121\102\140\103\150\104" +
    "\115\105\133\106\136\107\130\110\117\111\116\112\135" +
    "\123\137\001\001\000\034\060\u0109\061\u0138\101\121\102" +
    "\140\103\150\104\115\105\133\106\136\107\130\110\117" +
    "\111\116\112\135\123\137\001\001\000\070\003\373\006" +
    "\016\007\344\010\072\026\352\033\067\034\062\037\u012c" +
    "\040\361\056\364\060\367\064\376\065\366\066\345\071" +
    "\351\074\346\101\121\102\140\103\150\104\115\105\133" +
    "\106\136\107\130\110\117\111\116\112\135\123\137\001" +
    "\001\000\002\001\001\000\070\003\373\006\016\007\344" +
    "\010\072\026\352\033\067\034\062\037\u012b\040\361\056" +
    "\364\060\367\064\376\065\366\066\345\071\351\074\346" +
    "\101\121\102\140\103\150\104\115\105\133\106\136\107" +
    "\130\110\117\111\116\112\135\123\137\001\001\000\004" +
    "\077\u0128\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\062\164\112\173\113\226\114\225" +
    "\115\176\116\227\117\205\001\001\000\002\001\001\000" +
    "\004\077\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\003\373\006\016\007\344\010\072\026\352\033" +
    "\067\034\062\037\u0100\040\361\056\364\060\367\064\376" +
    "\065\366\066\345\071\351\074\346\101\121\102\140\103" +
    "\150\104\115\105\133\106\136\107\130\110\117\111\116" +
    "\112\135\123\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\006\016" +
    "\007\344\010\072\026\u0104\033\067\034\062\060\u0105\070" +
    "\u0102\101\121\102\140\103\150\104\115\105\133\106\136" +
    "\107\130\110\117\111\116\112\135\123\137\001\001\000" +
    "\034\060\u0109\061\u0108\101\121\102\140\103\150\104\115" +
    "\105\133\106\136\107\130\110\117\111\116\112\135\123" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\062\164\112\173\113\226\114\225\115\176\116\227\117" +
    "\205\001\001\000\002\001\001\000\034\060\u0109\061\u0113" +
    "\101\121\102\140\103\150\104\115\105\133\106\136\107" +
    "\130\110\117\111\116\112\135\123\137\001\001\000\002" +
    "\001\001\000\020\062\164\112\173\113\226\114\225\115" +
    "\176\116\227\117\205\001\001\000\034\060\u0109\061\u010c" +
    "\101\121\102\140\103\150\104\115\105\133\106\136\107" +
    "\130\110\117\111\116\112\135\123\137\001\001\000\004" +
    "\131\u0110\001\001\000\002\001\001\000\004\133\u010e\001" +
    "\001\000\004\040\u010f\001\001\000\002\001\001\000\004" +
    "\040\u0111\001\001\000\002\001\001\000\004\132\u0117\001" +
    "\001\000\002\001\001\000\004\130\u0115\001\001\000\004" +
    "\040\u0116\001\001\000\002\001\001\000\004\040\u0118\001" +
    "\001\000\002\001\001\000\032\060\u011a\101\121\102\140" +
    "\103\150\104\115\105\133\106\136\107\130\110\117\111" +
    "\116\112\135\123\137\001\001\000\020\062\164\112\173" +
    "\113\226\114\225\115\176\116\227\117\205\001\001\000" +
    "\070\003\373\006\016\007\344\010\072\026\352\033\067" +
    "\034\062\037\u011c\040\361\056\364\060\367\064\376\065" +
    "\366\066\345\071\351\074\346\101\121\102\140\103\150" +
    "\104\115\105\133\106\136\107\130\110\117\111\116\112" +
    "\135\123\137\001\001\000\004\057\u011e\001\001\000\070" +
    "\003\373\006\016\007\344\010\072\026\352\033\067\034" +
    "\062\037\u011f\040\361\056\364\060\367\064\376\065\366" +
    "\066\345\071\351\074\346\101\121\102\140\103\150\104" +
    "\115\105\133\106\136\107\130\110\117\111\116\112\135" +
    "\123\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\060\u0124\101\121\102\140\103\150\104\115\105\133\106" +
    "\136\107\130\110\117\111\116\112\135\123\137\001\001" +
    "\000\020\062\164\112\173\113\226\114\225\115\176\116" +
    "\227\117\205\001\001\000\070\003\373\006\016\007\344" +
    "\010\072\026\352\033\067\034\062\037\u0126\040\361\056" +
    "\364\060\367\064\376\065\366\066\345\071\351\074\346" +
    "\101\121\102\140\103\150\104\115\105\133\106\136\107" +
    "\130\110\117\111\116\112\135\123\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\u012d" +
    "\001\001\000\004\073\u0134\001\001\000\002\001\001\000" +
    "\012\010\072\033\332\034\062\044\u0130\001\001\000\002" +
    "\001\001\000\070\003\373\006\016\007\344\010\072\026" +
    "\352\033\067\034\062\037\u0132\040\361\056\364\060\367" +
    "\064\376\065\366\066\345\071\351\074\346\101\121\102" +
    "\140\103\150\104\115\105\133\106\136\107\130\110\117" +
    "\111\116\112\135\123\137\001\001\000\004\072\u0133\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\003\373" +
    "\006\016\007\344\010\072\026\352\033\067\034\062\037" +
    "\u0136\040\361\056\364\060\367\064\376\065\366\066\345" +
    "\071\351\074\346\101\121\102\140\103\150\104\115\105" +
    "\133\106\136\107\130\110\117\111\116\112\135\123\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\060\u013d\101\121\102\140\103\150\104\115\105" +
    "\133\106\136\107\130\110\117\111\116\112\135\123\137" +
    "\001\001\000\020\062\164\112\173\113\226\114\225\115" +
    "\176\116\227\117\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\060\u0141\101\121\102\140\103\150\104" +
    "\115\105\133\106\136\107\130\110\117\111\116\112\135" +
    "\123\137\001\001\000\020\062\164\112\173\113\226\114" +
    "\225\115\176\116\227\117\205\001\001\000\002\001\001" +
    "\000\074\003\373\006\016\007\344\010\072\026\352\033" +
    "\067\034\062\037\u0148\040\361\056\364\060\367\064\376" +
    "\065\366\066\345\071\351\074\346\075\u0144\076\u0145\101" +
    "\121\102\140\103\150\104\115\105\133\106\136\107\130" +
    "\110\117\111\116\112\135\123\137\001\001\000\002\001" +
    "\001\000\074\003\373\006\016\007\344\010\072\026\352" +
    "\033\067\034\062\037\u0148\040\361\056\364\060\367\064" +
    "\376\065\366\066\345\071\351\074\346\075\u014c\076\u0145" +
    "\101\121\102\140\103\150\104\115\105\133\106\136\107" +
    "\130\110\117\111\116\112\135\123\137\001\001\000\002" +
    "\001\001\000\032\060\u0149\101\121\102\140\103\150\104" +
    "\115\105\133\106\136\107\130\110\117\111\116\112\135" +
    "\123\137\001\001\000\002\001\001\000\020\062\164\112" +
    "\173\113\226\114\225\115\176\116\227\117\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\060\u014f\101\121\102\140\103\150" +
    "\104\115\105\133\106\136\107\130\110\117\111\116\112" +
    "\135\123\137\001\001\000\020\062\164\112\173\113\226" +
    "\114\225\115\176\116\227\117\205\001\001\000\070\003" +
    "\373\006\016\007\344\010\072\026\352\033\067\034\062" +
    "\037\u0151\040\361\056\364\060\367\064\376\065\366\066" +
    "\345\071\351\074\346\101\121\102\140\103\150\104\115" +
    "\105\133\106\136\107\130\110\117\111\116\112\135\123" +
    "\137\001\001\000\002\001\001\000\020\062\164\112\173" +
    "\113\226\114\225\115\176\116\227\117\205\001\001\000" +
    "\002\001\001\000\006\050\u0155\051\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\112\043\110\001" +
    "\001\000\016\010\072\033\332\034\062\044\333\045\u0159" +
    "\046\334\001\001\000\002\001\001\000\004\126\u015b\001" +
    "\001\000\006\040\u015c\100\u015d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u0164\001\001" +
    "\000\006\010\053\020\u0168\001\001\000\002\001\001\000" +
    "\030\006\016\007\063\010\072\022\100\023\u0166\024\065" +
    "\025\057\026\077\027\074\033\067\034\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error ");

   if (info instanceof java_cup.runtime.Symbol)
     m.append( "("+info.toString()+")" );

   m.append(" : "+message);

   System.out.println(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expression_loop ::= expression COMMA expression_loop 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 419");((ArrayList<Expression>) el).add((Expression)e);
                                                                                                        RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_loop",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expression_loop ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 418"); RESULT =  ListCreator.newList(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_loop",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // arglist_opt ::= expression_loop 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 415");RESULT = el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist_opt",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // arglist_opt ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 414");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist_opt",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expression_end_option ::= INSTANCEOF entity_name 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 412"); RESULT = en;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expression_end_option ::= COMMA expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 411"); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expression_end_option ::= DOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 410"); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expression_end_option ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Line 409"); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expression_end_option ::= LPAREN arglist_opt RPAREN 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Line 408"); RESULT = args;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_end_option",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // identifier_opt ::= IDENTIFIER 
            {
              Object RESULT =null;
		 Logger.print("Line 402");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_opt",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // identifier_opt ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 401");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_opt",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // logical_expression ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Boolean bl = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 400 "+bl);
	                                                                    RESULT = new Expression(new Type("boolean"),bl.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // logical_expression ::= expression QUESTION expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 399"); RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // logical_expression ::= expression logical_option expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 398");
	                                                                    RESULT = SemanticImpl.getInstance().getExpression((Expression) le,
                                                                        Operation.valueOf(((Node) lo).getIdentifier()), (Expression) re);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // logical_expression ::= NOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 397 " + e); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // literal_expression ::= NULL_LITERAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("null"), (String) n);
                                                                        Logger.print("Line 393, valor do N: ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // literal_expression ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("string"), s.toString());
                                                                        Logger.print("Line 392, valor do S: "+s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // literal_expression ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Character c = (java.lang.Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("char"), c.toString());
                                                                        Logger.print("Line 391, valor do C: "+c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // literal_expression ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Boolean b = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("boolean"), b.toString());
                                                                        Logger.print("Line 390, valor do B: "+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // literal_expression ::= FLOATING_POINT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number f = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("float"), f.toString());
                                                                        Logger.print("Line 389, valor do f: "+f);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // literal_expression ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(new Type("int"), i.toString());
                                                                        Logger.print("Line 388, valor do I: "+i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // switch_clausulas ::= statement 
            {
              Object RESULT =null;
		 Logger.print("Line 386");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // switch_clausulas ::= DEFAULT COLON 
            {
              Object RESULT =null;
		 Logger.print("Line 385");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // switch_clausulas ::= CASE expression COLON 
            {
              Object RESULT =null;
		 Logger.print("Line 384");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // creating_expression_option ::= RPAREN expression LPAREN 
            {
              Object RESULT =null;
		 Logger.print("Line 341");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_option",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // creating_expression_option ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 380");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_option",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // creating_expression_end_option ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Line 377");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_end_option",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // creating_expression_end_option ::= type_specifier creating_expression_option brack_loop 
            {
              Object RESULT =null;
		 Logger.print("Line 376");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_end_option",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // creating_expression_end_option ::= entity_name LPAREN arglist_opt RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Line 375");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_end_option",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // creating_expression ::= NEW creating_expression_end_option 
            {
              Object RESULT =null;
		 Logger.print("Line 372");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // switch_clausulas_loop ::= switch_clausulas switch_clausulas_loop 
            {
              Object RESULT =null;
		 Logger.print("Line 369");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas_loop",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // switch_clausulas_loop ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 368");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_clausulas_loop",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // bit_expression ::= expression bit_operation expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 365");RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_expression",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // bit_expression ::= COMP expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 364");RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_expression",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // casting_expression ::= LPAREN type RPAREN expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 361 casting: "+e);
	                                                                    SemanticImpl.getInstance().checkTypeCompatibility((Type)t, ((Expression)e).getType());
	                                                                    ((Expression) e).setType((Type) t);
	                                                                    Logger.print("Linha " + e);
	                                                                    RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_expression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // bit_operation ::= URSHIFT 
            {
              Object RESULT =null;
		 Logger.print("Line 358");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_operation",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // bit_operation ::= RSHIFT 
            {
              Object RESULT =null;
		 Logger.print("Line 357");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_operation",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // bit_operation ::= LSHIFT 
            {
              Object RESULT =null;
		 Logger.print("Line 356");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_operation",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // bit_operation ::= RSHIFTEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 355");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_operation",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // switch_statement ::= SWITCH LPAREN expression RPAREN LBRACE switch_clausulas_loop RBRACE 
            {
              Object RESULT =null;
		 Logger.print("Line 352");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // string_expression ::= expression string_operation expression 
            {
              Object RESULT =null;
		 Logger.print("Line 349");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // finally_opt ::= FINALLY statement 
            {
              Object RESULT =null;
		 Logger.print("Line 346");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finally_opt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // finally_opt ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 345");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finally_opt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // string_operation ::= PLUSEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 342");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_operation",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // string_operation ::= PLUS 
            {
              Object RESULT =null;
		 Logger.print("Line 341");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_operation",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // catch_loop ::= CATCH LPAREN parameter RPAREN statement catch_loop 
            {
              Object RESULT =null;
		 Logger.print("Line 338");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("catch_loop",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // catch_loop ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 337");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("catch_loop",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // logical_option ::= MODEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 333");
                                                                        RESULT = new Node("%=","primary", "MODEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // logical_option ::= MOD 
            {
              Object RESULT =null;
		 Logger.print("Line 332");
                                                                        RESULT = new Node("%","primary", "MOD");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // logical_option ::= OROREQ 
            {
              Object RESULT =null;
		 Logger.print("Line 331");
                                                                        RESULT = new Node("||=","primary", "OROREQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // logical_option ::= ANDAND 
            {
              Object RESULT =null;
		 Logger.print("Line 330");
                                                                        RESULT = new Node("&&","primary", "ANDAND");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // logical_option ::= XOREQ 
            {
              Object RESULT =null;
		 Logger.print("Line 329");
                                                                        RESULT = new Node("^=","primary", "XOREQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // logical_option ::= XOR 
            {
              Object RESULT =null;
		 Logger.print("Line 328");
                                                                        RESULT = new Node("^","primary", "XOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // logical_option ::= OREQ 
            {
              Object RESULT =null;
		 Logger.print("Line 327");
                                                                        RESULT = new Node("|=","primary", "OREQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // logical_option ::= OROR 
            {
              Object RESULT =null;
		 Logger.print("Line 326");
                                                                        RESULT = new Node("||","primary", "OROR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // logical_option ::= OR 
            {
              Object RESULT =null;
		 Logger.print("Line 325");
                                                                        RESULT = new Node("|","primary", "OR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // logical_option ::= ANDEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 324");
                                                                        RESULT = new Node("&=","primary", "ANDEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // logical_option ::= AND 
            {
              Object RESULT =null;
		 Logger.print("Line 323");
                                                                        RESULT = new Node("&","primary", "AND");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_option",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // try_statement ::= TRY statement catch_loop finally_opt 
            {
              Object RESULT =null;
		 Logger.print("Line 320");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_statement",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // testing_expression ::= expression testing_option expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 317");
	                                                                    SemanticImpl.getInstance().isRelationalExpression((Expression) e1, (Expression) e2);
	                                                                    RESULT = SemanticImpl.getInstance().getExpression((Expression) e1,
	                                                                    Operation.valueOf(((Node) to).getIdentifier()), (Expression) e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_expression",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // testing_option ::= NOT 
            {
              Object RESULT =null;
		 Logger.print("Line 314");
                                                                        RESULT= new Node("!","primary", "NOT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // testing_option ::= NOTEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 314");
                                                                        RESULT= new Node("!=","primary", "NOTEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // testing_option ::= EQEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 313");
                                                                        RESULT= new Node("==","primary", "EQEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // testing_option ::= LTEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 312");
                                                                        RESULT= new Node("<=","primary", "LTEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // testing_option ::= GTEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 311");
                                                                        RESULT= new Node(">=","primary", "GTEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // testing_option ::= LT 
            {
              Object RESULT =null;
		 Logger.print("Line 310");
                                                                        RESULT= new Node("<","primary", "LT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // testing_option ::= GT 
            {
              Object RESULT =null;
		 Logger.print("Line 309");
                                                                        RESULT = new Node(">","primary", "GT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_option",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expression_opt ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 306 "+e); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_opt",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // numeric_expression ::= expression middle_operator expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 302 "+ ((Expression)le).getValue() + ((Node) md).getValue()+ " "+((Expression)re).getValue());
					   								        		    SemanticImpl.getInstance().isNumericExpression((Expression) le,(Expression) re);
					   												    RESULT = SemanticImpl.getInstance().getExpression((Expression) le,
					   												    Operation.valueOf(((Node) md).getIdentifier()), (Expression) re);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // numeric_expression ::= expression numeric_option 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int noright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 300, numeric_option:" + e);
	                                                                    SemanticImpl.getInstance().isNumericExpression((Expression) e, null);
	                                                                    System.out.println(Operation.valueOf(((Node) no).getIdentifier()));
	                                                                    RESULT = SemanticImpl.getInstance().getExpression((Expression) e,
                                                                        Operation.valueOf(((Node) no).getIdentifier()), null);
	                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // numeric_expression ::= numeric_option expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 299");
                                                                        SemanticImpl.getInstance().isNumericExpression((Expression) e, null); RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // numeric_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 298");
                                                                        SemanticImpl.getInstance().isNumericExpression((Expression) e, null); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // for_div_1 ::= SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 296"); RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_div_1",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // for_div_1 ::= expression SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print(" Line 295"); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_div_1",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // for_div_1 ::= variable_declaration 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print(" Line 294" + vd);RESULT= vd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_div_1",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // middle_operator ::= MODEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 291");
                                                                        RESULT= new Node("%=","primary", "MODEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // middle_operator ::= MOD 
            {
              Object RESULT =null;
		 Logger.print("Line 290");
                                                                        RESULT= new Node("%","primary", "MOD");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // middle_operator ::= DIVEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 289");
                                                                        RESULT= new Node("/=","primary", "DIVEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // middle_operator ::= DIV 
            {
              Object RESULT =null;
		 Logger.print("Line 288");
                                                                        RESULT= new Node("/","primary", "DIV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // middle_operator ::= MULTEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 287");
                                                                        RESULT= new Node("*=","primary", "MULTEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // middle_operator ::= MULT 
            {
              Object RESULT =null;
		 Logger.print("Line 286");
                                                                        RESULT= new Node("*","primary", "MULT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // middle_operator ::= MINUSEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 285");
                                                                        RESULT= new Node("-=","primary", "MINUSEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // middle_operator ::= MINUS 
            {
              Object RESULT =null;
		 Logger.print("Line 284");
                                                                        RESULT= new Node("-","primary", "MINUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // middle_operator ::= PLUSEQ 
            {
              Object RESULT =null;
		 Logger.print("Line 283");
                                                                        RESULT= new Node("+=","primary", "PLUSEQ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // middle_operator ::= PLUS 
            {
              Object RESULT =null;
		 Logger.print("Line 282");
	                                                                    RESULT= new Node("+","primary", "PLUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("middle_operator",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // for_header ::= FOR 
            {
              Object RESULT =null;
		SemanticImpl.getInstance().contextFor = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // for_statement ::= for_header LPAREN for_div_1 expression_opt SEMICOLON expression_opt RPAREN NT$7 statement_block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int boptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int boptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object bopt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aoptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aoptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object aopt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Logger.print("Line 372");SemanticImpl.getInstance().exitForCurrentScope((Expression) aopt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$7 ::= 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int boptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int boptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object bopt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aoptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aoptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object aopt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
SemanticImpl.getInstance().createForScope((Variable)vd,(Expression)bopt,(Expression)aopt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // for_statement ::= for_header LPAREN for_div_1 SEMICOLON RPAREN NT$6 statement_block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Logger.print("Line 371");SemanticImpl.getInstance().exitForCurrentScope(null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$6 ::= 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
SemanticImpl.getInstance().createForScope((Variable)d1,null,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // for_statement ::= for_header LPAREN for_div_1 expression_opt SEMICOLON RPAREN NT$5 statement_block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int boptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int boptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object bopt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Logger.print("Line 370");SemanticImpl.getInstance().exitForCurrentScope(null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$5 ::= 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int boptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int boptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bopt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
SemanticImpl.getInstance().createForScope((Variable)d1,(Expression)bopt,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // for_statement ::= for_header LPAREN for_div_1 SEMICOLON expression_opt RPAREN NT$4 statement_block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aoptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aoptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object aopt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Logger.print("Line 369");SemanticImpl.getInstance().exitForCurrentScope((Expression) aopt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$4 ::= 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aoptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aoptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object aopt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
SemanticImpl.getInstance().createForScope((Variable)d1,null,(Expression)aopt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // numeric_option ::= MINUSMINUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 276"); RESULT = new Node("--","primary", "MINUSMINUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_option",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // numeric_option ::= PLUSPLUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 275"); RESULT = new Node("++","primary", "PLUSPLUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_option",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // attribution ::= IDENTIFIER EQ expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 273 " + e);
                                                                        if(e instanceof String){
                                                                            SemanticImpl.getInstance().checkVariableAttribution(id, (String) e);
                                                                            Variable var = SemanticImpl.getInstance().findVariableByIdentifier((String) id);
                                                                            if(!SemanticImpl.getInstance().contextFor) SemanticImpl.getInstance().getCodeGenerator().assignmentDeclaration((Variable)var,(String)e);
                                                                        }else{
                                                                            SemanticImpl.getInstance().checkVariableAttribution(id, (Expression) e);
                                                                            Variable var = SemanticImpl.getInstance().findVariableByIdentifier((String) id);
                                                                            var.setValue((Expression) e);
                                                                            if(!SemanticImpl.getInstance().contextFor) SemanticImpl.getInstance().getCodeGenerator().assignmentDeclaration((Variable)var,(Expression)e);
                                                                            RESULT = e;
                                                                        }


                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribution",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= expression expression_end_option 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("LINE 271 "+e);
                                                                        RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("LINE 270 "+e); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 268 " + id);
                                                                        SemanticImpl.getInstance().validateVariableName(id);
                                                                        Variable var = SemanticImpl.getInstance().findVariableByIdentifier((String) id);
                                                                        if(!SemanticImpl.getInstance().contextFor) SemanticImpl.getInstance().getCodeGenerator().generateLDCode((Variable) var);
                                                                        if(var.getValue()!=null){
                                                                            RESULT = new Expression(var.getType(), var.getIdentifier());
                                                                        }else{
                                                                            RESULT = new Expression(var.getType(), var.getIdentifier());
                                                                        }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= THIS 
            {
              Object RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 267 ");RESULT = th;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= SUPER 
            {
              Object RESULT =null;
		int supleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int supright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sup = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 266 ");RESULT = sup;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= call_method 
            {
              Object RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 351 "+ cm);RESULT = cm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= attribution 
            {
              Object RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print(" Line 269 ");RESULT = attr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= literal_expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 263, le = " + ((Expression)le).getValue()); if(!SemanticImpl.getInstance().contextFor) SemanticImpl.getInstance().getCodeGenerator().generateLDCode((Expression) le); RESULT = le;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= creating_expression 
            {
              Object RESULT =null;
		int creleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int creright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 262 ");RESULT = cre;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= casting_expression 
            {
              Object RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 261 "+ ce);RESULT = ce;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= bit_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 260 ");RESULT = be;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= string_expression 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 259 ");RESULT = se;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= logical_expression 
            {
              Object RESULT =null;
		int lgeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lgeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lge = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 264 " + lge);RESULT = lge;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= testing_expression 
            {
              Object RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object te = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 258 te "+te);RESULT = te;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= numeric_expression 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 257, ne = " + ((Expression)ne).getValue()); RESULT = ne;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;
		 Logger.print("Line 255");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // do_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 253");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_statement",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_opt ::= ELSE statement 
            {
              Object RESULT =null;
		 Logger.print("Line 251");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else_opt ::= 
            {
              Object RESULT =null;
		 Logger.print("Line 250");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // statement_block ::= LBRACE statement RBRACE 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Line 247 "+st); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if_statement ::= IF LPAREN expression RPAREN statement else_opt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Logger.print("Line 244 "+ e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // end_option ::= SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 241");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("end_option",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // end_option ::= statement_block 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 240 "+st); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("end_option",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // statement_loop ::= statement_loop statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 237b " + st); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_loop",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // statement_loop ::= statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 237 "+ st); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_loop",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // statement ::= SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 233");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // statement ::= CONTINUE identifier_opt SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 232");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // statement ::= BREAK identifier_opt SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 231");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // statement ::= COLON statement 
            {
              Object RESULT =null;
		 Logger.print("Line 230");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // statement ::= THROW expression SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line 229");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // statement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Line return");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // statement ::= RETURN expression_opt SEMICOLON 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Line return "+ep);
                                                                        ((Expression) ep).setContext("return");RESULT = ep;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // statement ::= SYNCHRONIZED LPAREN expression RPAREN statement 
            {
              Object RESULT =null;
		 Logger.print("Line 227");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // statement ::= switch_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 226");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // statement ::= try_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 225");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statement ::= for_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 224");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statement ::= while_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 223");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement ::= do_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 222");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // statement ::= if_statement 
            {
              Object RESULT =null;
		 Logger.print("Line 221");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement ::= statement_block 
            {
              Object RESULT =null;
		 Logger.print("Line 220 ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement ::= expression SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("Line 219 ");RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement ::= variable_declaration 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Line 218 "); RESULT = vd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement_block ::= LBRACE statement_loop RBRACE 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 216"); RESULT = st;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement_block ::= LBRACE RBRACE 
            {
              Object RESULT =null;
		Logger.print("Line 217");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // field_declaration ::= static_initializer 
            {
              Object RESULT =null;
		Logger.print("212");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // field_declaration ::= variable_declaration 
            {
              Object RESULT =null;
		Logger.print("211");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // field_declaration ::= constructor_declaration 
            {
              Object RESULT =null;
		Logger.print("210");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // field_declaration ::= method_declaration 
            {
              Object RESULT =null;
		Logger.print("209");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // field_declaration ::= 
            {
              Object RESULT =null;
		Logger.print("Line   ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // field_declaration_loop ::= field_declaration field_declaration_loop 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 205");RESULT = fd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration_loop",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // field_declaration_loop ::= 
            {
              Object RESULT =null;
		Logger.print("Line 204");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration_loop",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // interface_declaration ::= modifier_loop INTERFACE IDENTIFIER extends_interface_declaration_opt LBRACE field_declaration_loop RBRACE 
            {
              Object RESULT =null;
		Logger.print("Line 201");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // extends_interface_declaration_opt ::= EXTENDS implements_loop 
            {
              Object RESULT =null;
		Logger.print("Line 199");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_interface_declaration_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // extends_interface_declaration_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 198");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_interface_declaration_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parameter_list ::= parameter COMMA parameter_list 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 196"); ((ArrayList<Parameter>) pl).add((Parameter)p);
                                                                        RESULT = pl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parameter_list ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 195"); RESULT =  ListCreator.newList(p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parameter_list_opt ::= parameter_list 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 193"); RESULT = pl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parameter_list_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 192");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parameter ::= type IDENTIFIER brack_loop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 189 "+t); RESULT = new Variable(id,(Type)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= type_specifier brack_loop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 188 tipo: "+t); RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // brack_loop ::= brack brack_loop 
            {
              Object RESULT =null;
		Logger.print("Line 186");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack_loop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // brack_loop ::= 
            {
              Object RESULT =null;
		Logger.print("Line 185");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack_loop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // brack ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		Logger.print("Line 183");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // static_initializer ::= IDENTIFIER 
            {
              Object RESULT =null;
		Logger.print("Line 181");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("static_initializer",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comma_opt ::= COMMA 
            {
              Object RESULT =null;
		Logger.print("Line 179");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_opt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comma_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line178");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_opt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable_initializer_loop ::= variable_initializer COMMA variable_initializer_loop 
            {
              Object RESULT =null;
		Logger.print("Line 176");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_loop",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable_initializer_loop ::= variable_initializer 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 175"); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_loop",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variable_initializer_opt ::= variable_initializer_loop comma_opt 
            {
              Object RESULT =null;
		Logger.print("Line 173");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_initializer_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 172");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_initializer ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 170");
                                                                        SemanticImpl.getInstance().validateVariableName(id);
                                                                        Variable var = SemanticImpl.getInstance().findVariableByIdentifier((String) id);
                                                                        if(!SemanticImpl.getInstance().contextFor) SemanticImpl.getCodeGenerator().generateLDCode((Variable) var);
                                                                        RESULT = var.getValue();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable_initializer ::= LBRACE variable_initializer_opt RBRACE 
            {
              Object RESULT =null;
		Logger.print("Line 168");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_initializer ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 167 - Teste de Exp " + ((Expression)e).getValue()); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // attr_opt ::= EQ variable_initializer 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("209"); RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr_opt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // attr_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 208");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr_opt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_declarator ::= IDENTIFIER brack_loop attr_opt 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 161");
                                                                        Variable temp = new Variable((String) id,new Type("null"), (Expression) exp);
                                                                        if(!SemanticImpl.getInstance().contextFor) SemanticImpl.getInstance().getCodeGenerator().assignmentDeclaration((Variable) temp, (Expression) exp);
                                                                        Logger.print("Temp type "+ temp);
                                                                        RESULT = temp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable_declarator_loop ::= variable_declarator COMMA variable_declarator_loop 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Logger.print("Line 159");
                                                                        SemanticImpl.getInstance().addVariableToTempList((Variable)var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_loop",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable_declarator_loop ::= variable_declarator 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 158" + ((Variable) var).getIdentifier());
                                                                        SemanticImpl.getInstance().addVariableToTempList((Variable)var); RESULT = var;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_loop",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // modifier_loop ::= modifier modifier_loop 
            {
              Object RESULT =null;
		Logger.print("155");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_loop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // modifier_loop ::= 
            {
              Object RESULT =null;
		Logger.print("Line 154");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_loop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // modifier ::= TRANSIENT 
            {
              Object RESULT =null;
		Logger.print("Line 152");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // modifier ::= THREADSAFE 
            {
              Object RESULT =null;
		Logger.print("Line 151");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // modifier ::= ABSTRACT 
            {
              Object RESULT =null;
		Logger.print("Line 150");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // modifier ::= SYNCHRONIZED 
            {
              Object RESULT =null;
		Logger.print("Line 149");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // modifier ::= NATIVE 
            {
              Object RESULT =null;
		Logger.print("Line 148");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // modifier ::= FINAL 
            {
              Object RESULT =null;
		Logger.print("Line 147");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // modifier ::= STATIC 
            {
              Object RESULT =null;
		Logger.print("Line 146");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // modifier ::= PROTECTED 
            {
              Object RESULT =null;
		Logger.print("Line 145");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // modifier ::= PRIVATE 
            {
              Object RESULT =null;
		Logger.print("Line 144");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // modifier ::= PUBLIC 
            {
              Object RESULT =null;
		Logger.print("Line 143");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable_declaration ::= modifier_loop type variable_declarator_loop SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("Line 141");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable_declaration ::= type variable_declarator_loop SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 140");
                                                                        SemanticImpl.getInstance().addVariablesFromTempList((Type) t);RESULT=v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // constructor_declaration ::= modifier_loop IDENTIFIER LPAREN parameter_list_opt RPAREN statement_block 
            {
              Object RESULT =null;
		Logger.print("Line 138");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor_declaration",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // call_method ::= IDENTIFIER LPAREN NT$3 arglist_opt RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(args != null){
                     Logger.print("Line 164");
                     SemanticImpl.getInstance().verifyCall((String)id,(ArrayList<Expression>) args); RESULT = id;
                     }else{
                     Logger.print("Line 164b");
                        SemanticImpl.getInstance().verifyCall((String)id,new ArrayList<Expression>()); RESULT= id;
                     }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_method",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
Logger.print("Line 163");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method_declaration ::= modifier_loop type IDENTIFIER LPAREN parameter_list_opt RPAREN NT$2 end_option 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 136b "+ ep);
                                                                          if(ep instanceof Expression) SemanticImpl.getInstance().exitCurrentScope((Expression) ep);
                                                                          else  SemanticImpl.getInstance().exitCurrentScope();
                                                                          SemanticImpl.getInstance().getCodeGenerator().addFunctionAddress(id);
                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
Logger.print("Line 136 ");
                                                                        SemanticImpl.getInstance().validateFunction(id,(ArrayList<Parameter>) p,(Type)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_declaration ::= SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("Line 134");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // field_declaration ::= static_initializer 
            {
              Object RESULT =null;
		Logger.print("Line 133");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_declaration ::= variable_declaration 
            {
              Object RESULT =null;
		Logger.print("132");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_declaration ::= constructor_declaration 
            {
              Object RESULT =null;
		Logger.print("Line 131");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field_declaration ::= method_declaration 
            {
              Object RESULT =null;
		Logger.print("Line 130");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // class_declaration ::= modifier_loop CLASS IDENTIFIER NT$0 extends_declaration_opt NT$1 implements_declaration_opt LBRACE field_declaration_loop RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object superclass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Logger.print("Line 128"); SemanticImpl.getInstance().getCodeGenerator().generateFinalAssemblyCode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object superclass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
SemanticImpl.getInstance().addSupertype((String) id, (String) superclass);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Type t = new Type(id); SemanticImpl.getInstance().addType(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // implements_loop ::= entity_name COMMA implements_loop 
            {
              Object RESULT =null;
		Logger.print("126");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_loop",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // implements_loop ::= entity_name 
            {
              Object RESULT =null;
		Logger.print("Line 125");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_loop",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // implements_declaration_opt ::= IMPLEMENTS implements_loop 
            {
              Object RESULT =null;
		Logger.print("123");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // implements_declaration_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 122");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // extends_declaration_opt ::= EXTENDS entity_name 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 120 "+ name); RESULT = name;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // extends_declaration_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 190");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // entity_name ::= entity_name DOT IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 117 "+i); RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entity_name",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // entity_name ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 116 "+i); RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entity_name",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_declaration ::= interface_declaration 
            {
              Object RESULT =null;
		Logger.print("Line 114");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_declaration ::= class_declaration 
            {
              Object RESULT =null;
		Logger.print("Line 113");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // import_aux ::= entity_name 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 109" + en); RESULT = en;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_aux",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // import_aux ::= entity_name DOT MULT 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Logger.print("107" + en); RESULT = en;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_aux",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // import_statement ::= IMPORT import_aux SEMICOLON 
            {
              Object RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Logger.print("Line 103 "+ia);
                                                                        SemanticImpl.getInstance().addType(new Type(((String)ia)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // import_statement_loop ::= import_statement import_statement_loop 
            {
              Object RESULT =null;
		Logger.print("100");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement_loop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // import_statement_loop ::= import_statement 
            {
              Object RESULT =null;
		Logger.print("100a");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement_loop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // package_declaration_opt ::= package_declaration 
            {
              Object RESULT =null;
		Logger.print("95");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // package_declaration_opt ::= 
            {
              Object RESULT =null;
		Logger.print("Line 94");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // package_declaration ::= PACKAGE entity_name SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("Line 91");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // compilation_unit ::= package_declaration_opt type_declaration 
            {
              Object RESULT =null;
		 Logger.print("Line 87b");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compilation_unit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // compilation_unit ::= package_declaration_opt import_statement_loop type_declaration 
            {
              Object RESULT =null;
		 Logger.print("Line 87");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compilation_unit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_specifier ::= entity_name 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Line 84");Type t = new Type((String) en); RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= VOID 
            {
              Object RESULT =null;
		RESULT = new Type("void");Logger.print("VOID at line 79");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT = new Type("double");Logger.print("DOUBLE at line 78");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_specifier ::= LONG 
            {
              Object RESULT =null;
		RESULT = new Type("long");Logger.print("LONG at line 77");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type_specifier ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = new Type("float");Logger.print("FLOAT at line 76");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_specifier ::= INT 
            {
              Object RESULT =null;
		RESULT = new Type("int");Logger.print("INT at line 75");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_specifier ::= SHORT 
            {
              Object RESULT =null;
		RESULT = new Type("short");Logger.print("SHORT at line 74");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_specifier ::= CHAR 
            {
              Object RESULT =null;
		RESULT = new Type("char");Logger.print("CHAR at line 73");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type_specifier ::= BYTE 
            {
              Object RESULT =null;
		RESULT = new Type("byte"); Logger.print("BYTE at line 72");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // type_specifier ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = new Type("boolean"); Logger.print("BOOLEAN at line 71");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compilation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

